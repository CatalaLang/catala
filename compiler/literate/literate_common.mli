(* This file is part of the Catala compiler, a specification language for tax
   and social benefits computation rules. Copyright (C) 2020 Inria, contributor:
   Emile Rolley <emile.rolley@tuta.io>

   Licensed under the Apache License, Version 2.0 (the "License"); you may not
   use this file except in compliance with the License. You may obtain a copy of
   the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
   License for the specific language governing permissions and limitations under
   the License. *)

open Catala_utils

val literal_title : Global.backend_lang -> string
(** Return the title traduction according the given
    {!type:Catala_utils.Global.backend_lang}. *)

val literal_generated_by : Global.backend_lang -> string
(** Return the 'generated by' traduction according the given
    {!type:Catala_utils.Global.backend_lang}. *)

val literal_source_files : Global.backend_lang -> string
(** Return the 'source files weaved' traduction according the given
    {!type:Catala_utils.Global.backend_lang}. *)

val literal_disclaimer_and_link : Global.backend_lang -> string
(** Return the traduction of a paragraph giving a basic disclaimer about Catala
    and a link to the website according the given
    {!type:Catala_utils.Global.backend_lang}. *)

val literal_last_modification : Global.backend_lang -> string
(** Return the 'last modification' traduction according the given
    {!type:Catala_utils.Global.backend_lang}. *)

val get_language_extension : Global.backend_lang -> string
(** Return the file extension corresponding to the given
    {!type:Catala_utils.Global.backend_lang}. *)

val run_pandoc : string -> [ `Html | `Latex ] -> string
(** Runs the [pandoc] on a string to pretty-print markdown features into the
    desired format. *)

val check_exceeding_lines : ?max_len:int -> int -> string -> string -> unit
(** [check_exceeding_lines ~max_len start_line filename content] prints a
    warning message for each lines of [content] exceeding [max_len] characters. *)

val call_pygmentize : ?lang:Global.backend_lang -> string list -> string
(** Calls the [pygmentize] command with the given arguments, and returns the
    results as a string. If [lang] is specified, the proper arguments for the
    Catala lexer are already passed. *)

val with_pygmentize_lexer : Global.backend_lang -> (string list -> 'a) -> 'a
(** Creates the required lexer file and returns the corresponding [pygmentize]
    command-line arguments *)
