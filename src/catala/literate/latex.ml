(* This file is part of the Catala compiler, a specification language for tax and social benefits
   computation rules. Copyright (C) 2020 Inria, contributor: Denis Merigoux
   <denis.merigoux@inria.fr>

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   in compliance with the License. You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License
   is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   or implied. See the License for the specific language governing permissions and limitations under
   the License. *)

(** This modules weaves the source code and the legislative text together into a document that law
    professionals can understand. *)

module A = Ast
module P = Printf
module R = Re.Pcre
module C = Cli

let pre_latexify (s : string) =
  let percent = R.regexp "%" in
  let s = R.substitute ~rex:percent ~subst:(fun _ -> "\\%") s in
  let dollar = R.regexp "\\$" in
  let s = R.substitute ~rex:dollar ~subst:(fun _ -> "\\$") s in
  let premier = R.regexp "1er" in
  let s = R.substitute ~rex:premier ~subst:(fun _ -> "1\\textsuperscript{er}") s in
  let underscore = R.regexp "\\_" in
  let s = R.substitute ~rex:underscore ~subst:(fun _ -> "\\_") s in
  s

let wrap_latex (code : string) (source_files : string list) (custom_pygments : string option)
    (language : Cli.language_option) =
  Printf.sprintf
    "\\documentclass[11pt, a4paper]{article}\n\n\
     \\usepackage[T1]{fontenc}\n\
     \\usepackage[utf8]{inputenc}\n\
     \\usepackage[%s]{babel}\n\
     \\usepackage{lmodern}\n\
     \\usepackage{minted}\n\
     \\usepackage{amssymb}\n\
     \\usepackage{newunicodechar}\n\
     %s\n\
     \\usepackage{textcomp}\n\
     \\usepackage[hidelinks]{hyperref}\n\
     \\usepackage[dvipsnames]{xcolor}\n\
     \\usepackage{fullpage}\n\
     \\usepackage[many]{tcolorbox}\n\n\
     \\newunicodechar{÷}{$\\div$}\n\
     \\newunicodechar{×}{$\\times$}\n\
     \\newunicodechar{≤}{$\\leqslant$}\n\
     \\newunicodechar{≥}{$\\geqslant$}\n\
     \\newunicodechar{→}{$\\rightarrow$}\n\
     \\newunicodechar{≠}{$\\neq$}\n\n\
     \\fvset{\n\
     commandchars=\\\\\\{\\},\n\
     numbers=left,\n\
     frame=lines,\n\
     framesep=3mm,\n\
     rulecolor=\\color{gray!70},\n\
     firstnumber=last,\n\
     codes={\\catcode`\\$=3\\catcode`\\^=7}\n\
     }\n\n\
     \\title{\n\
     %s\n\
     }\n\
     \\author{\n\
     %s Catala version %s\n\
     }\n\
     \\begin{document}\n\
     \\maketitle\n\n\
     %s : \n\
     \\begin{itemize}%s\\end{itemize}\n\n\
     \\[\\star\\star\\star\\]\\\\\n\
     %s\n\n\
     \\end{document}"
    (match language with C.Fr -> "french" | C.En -> "english")
    ( match custom_pygments with
    | None -> ""
    | Some p -> Printf.sprintf "\\renewcommand{\\MintedPygmentize}{%s}" p )
    ( match language with
    | C.Fr -> "Implémentation de texte législatif"
    | C.En -> "Legislative text implementation" )
    (match language with C.Fr -> "Document généré par" | C.En -> "Document generated by")
    ( match Build_info.V1.version () with
    | None -> "n/a"
    | Some v -> Build_info.V1.Version.to_string v )
    ( match language with
    | C.Fr -> "Fichiers sources tissés dans ce document"
    | C.En -> "Source files weaved in this document" )
    (String.concat ","
       (List.map
          (fun filename ->
            let mtime = (Unix.stat filename).Unix.st_mtime in
            let ltime = Unix.localtime mtime in
            let ftime =
              Printf.sprintf "%d-%02d-%02d, %d:%02d" (1900 + ltime.Unix.tm_year)
                (ltime.Unix.tm_mon + 1) ltime.Unix.tm_mday ltime.Unix.tm_hour ltime.Unix.tm_min
            in
            Printf.sprintf "\\item\\texttt{%s}, %s %s"
              (pre_latexify (Filename.basename filename))
              ( match language with
              | C.Fr -> "dernière modification le"
              | C.En -> "last modification" )
              ftime)
          source_files))
    code

let math_syms_replace (c : string) : string =
  let date = "\\d\\d/\\d\\d/\\d\\d\\d\\d" in
  let syms = R.regexp (date ^ "|!=|<=|>=|--|->|\\*|/") in
  let syms2cmd = function
    | "!=" -> "≠"
    | "<=" -> "≤"
    | ">=" -> "≥"
    | "--" -> "—"
    | "->" -> "→"
    | "*" -> "×"
    | "/" -> "÷"
    | s -> s
  in
  R.substitute ~rex:syms ~subst:syms2cmd c

let program_item_to_latex (i : A.program_item) (language : C.language_option) : string =
  match i with
  | A.LawHeading (title, precedence) ->
      P.sprintf "\\%ssection*{%s}"
        (match precedence with 0 -> "" | 1 -> "" | 2 -> "sub" | 3 -> "sub" | _ -> "subsub")
        (pre_latexify title)
  | A.LawText t -> pre_latexify t
  | A.LawArticle a -> P.sprintf "\\paragraph{%s}" (pre_latexify (Pos.unmark a.law_article_name))
  | A.CodeBlock (_, c) ->
      P.sprintf
        "\\begin{minted}[label={\\hspace*{\\fill}\\texttt{%s}},firstnumber=%d]{%s}\n\
         /*%s*/\n\
         \\end{minted}"
        (pre_latexify (Filename.basename (Pos.get_file (Pos.get_position c))))
        (Pos.get_start_line (Pos.get_position c))
        (match language with C.Fr -> "catala_fr" | C.En -> "catala_en")
        (math_syms_replace (Pos.unmark c))
  | A.MetadataBlock (_, c) ->
      let metadata_title = match language with C.Fr -> "Métadonnées" | C.En -> "Metadata" in
      P.sprintf
        "\\begin{tcolorbox}[colframe=OliveGreen, breakable, \
         title=\\textcolor{black}{\\texttt{%s}},title after \
         break=\\textcolor{black}{\\texttt{%s}},before skip=1em, after skip=1em]\n\
         \\begin{minted}[numbersep=9mm, firstnumber=%d, label={\\hspace*{\\fill}\\texttt{%s}}]{%s}\n\
         /*%s*/\n\
         \\end{minted}\n\
         \\end{tcolorbox}"
        metadata_title metadata_title
        (Pos.get_start_line (Pos.get_position c))
        (pre_latexify (Filename.basename (Pos.get_file (Pos.get_position c))))
        (match language with C.Fr -> "catala_fr" | C.En -> "catala_en")
        (math_syms_replace (Pos.unmark c))
  | A.LawInclude (A.PdfFile ((file, _), page)) ->
      let label = file ^ match page with None -> "" | Some p -> P.sprintf "_page_%d," p in
      P.sprintf
        "\\begin{center}\\textit{Annexe incluse, retranscrite page \\pageref{%s}}\\end{center} \
         \\begin{figure}[p]\\begin{center}\\includegraphics[%swidth=\\textwidth]{%s}\\label{%s}\\end{center}\\end{figure}"
        label
        (match page with None -> "" | Some p -> P.sprintf "page=%d," p)
        file label
  | A.LawInclude (A.CatalaFile _ | A.LegislativeText _) -> ""

let ast_to_latex (program : A.program) (language : C.language_option) : string =
  String.concat "\n\n" (List.map (fun i -> program_item_to_latex i language) program.program_items)
