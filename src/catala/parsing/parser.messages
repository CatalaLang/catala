source_file_or_master: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT CONSTRUCTOR CONTENT BOOLEAN INCLUDES
##
## Ends in an error in state: 262.
##
## nonempty_list(enum_decl_line) -> enum_decl_line . [ FIELD END_CODE DECLARATION ]
## nonempty_list(enum_decl_line) -> enum_decl_line . nonempty_list(enum_decl_line) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## enum_decl_line
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 205, spurious reduction of production option(optional_marked) ->
## In state 208, spurious reduction of production typ -> option(collection_marked) typ_base option(optional_marked)
## In state 258, spurious reduction of production enum_decl_line_payload -> CONTENT typ
## In state 260, spurious reduction of production option(enum_decl_line_payload) -> enum_decl_line_payload
## In state 259, spurious reduction of production enum_decl_line -> ALT constructor option(enum_decl_line_payload)
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT CONSTRUCTOR CONTENT YEAR
##
## Ends in an error in state: 257.
##
## enum_decl_line_payload -> CONTENT . typ [ FIELD END_CODE DECLARATION ALT ]
##
## The known suffix of the stack is as follows:
## CONTENT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT CONSTRUCTOR YEAR
##
## Ends in an error in state: 256.
##
## enum_decl_line -> ALT constructor . option(enum_decl_line_payload) [ FIELD END_CODE DECLARATION ALT ]
##
## The known suffix of the stack is as follows:
## ALT constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT YEAR
##
## Ends in an error in state: 255.
##
## enum_decl_line -> ALT . constructor option(enum_decl_line_payload) [ FIELD END_CODE DECLARATION ALT ]
##
## The known suffix of the stack is as follows:
## ALT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 254.
##
## code_item -> DECLARATION ENUM constructor COLON . nonempty_list(enum_decl_line) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION ENUM constructor COLON
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR YEAR
##
## Ends in an error in state: 253.
##
## code_item -> DECLARATION ENUM constructor . COLON nonempty_list(enum_decl_line) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION ENUM constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION ENUM YEAR
##
## Ends in an error in state: 252.
##
## code_item -> DECLARATION ENUM . constructor COLON nonempty_list(enum_decl_line) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION ENUM
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN DEPENDS BOOLEAN DEPENDS
##
## Ends in an error in state: 250.
##
## nonempty_list(field_decl_item) -> field_decl_item . [ INCLUDES FIELD END_CODE DECLARATION ]
## nonempty_list(field_decl_item) -> field_decl_item . nonempty_list(field_decl_item) [ INCLUDES FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## field_decl_item
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 205, spurious reduction of production option(optional_marked) ->
## In state 208, spurious reduction of production typ -> option(collection_marked) typ_base option(optional_marked)
## In state 214, spurious reduction of production struct_field_func -> DEPENDS typ
## In state 215, spurious reduction of production option(struct_field_func) -> struct_field_func
## In state 229, spurious reduction of production field_decl_item -> CONTEXT ident CONTENT typ option(struct_field_func)
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR DOT IDENT EQUAL CONSTRUCTOR DOT IDENT YEAR
##
## Ends in an error in state: 236.
##
## nonempty_list(field_decl_include) -> field_decl_include . [ INCLUDES FIELD END_CODE DECLARATION ]
## nonempty_list(field_decl_include) -> field_decl_include . nonempty_list(field_decl_include) [ INCLUDES FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## field_decl_include
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR DOT IDENT EQUAL CONSTRUCTOR DOT YEAR
##
## Ends in an error in state: 243.
##
## field_decl_include -> constructor DOT ident EQUAL constructor DOT . ident [ INCLUDES FIELD END_CODE DECLARATION CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## constructor DOT ident EQUAL constructor DOT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR DOT IDENT EQUAL CONSTRUCTOR YEAR
##
## Ends in an error in state: 242.
##
## field_decl_include -> constructor DOT ident EQUAL constructor . DOT ident [ INCLUDES FIELD END_CODE DECLARATION CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## constructor DOT ident EQUAL constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR DOT IDENT EQUAL YEAR
##
## Ends in an error in state: 241.
##
## field_decl_include -> constructor DOT ident EQUAL . constructor DOT ident [ INCLUDES FIELD END_CODE DECLARATION CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## constructor DOT ident EQUAL
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR DOT IDENT YEAR
##
## Ends in an error in state: 240.
##
## field_decl_include -> constructor DOT ident . EQUAL constructor DOT ident [ INCLUDES FIELD END_CODE DECLARATION CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## constructor DOT ident
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR DOT YEAR
##
## Ends in an error in state: 239.
##
## field_decl_include -> constructor DOT . ident EQUAL constructor DOT ident [ INCLUDES FIELD END_CODE DECLARATION CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## constructor DOT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT CONSTRUCTOR YEAR
##
## Ends in an error in state: 238.
##
## field_decl_include -> constructor . DOT ident EQUAL constructor DOT ident [ INCLUDES FIELD END_CODE DECLARATION CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR CONTEXT YEAR
##
## Ends in an error in state: 234.
##
## field_decl_includes_context -> CONTEXT . nonempty_list(field_decl_include) [ INCLUDES FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## CONTEXT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD CONSTRUCTOR YEAR
##
## Ends in an error in state: 233.
##
## field_decl_includes -> INCLUDES FIELD constructor . option(field_decl_includes_context) [ INCLUDES FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## INCLUDES FIELD constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES FIELD YEAR
##
## Ends in an error in state: 232.
##
## field_decl_includes -> INCLUDES FIELD . constructor option(field_decl_includes_context) [ INCLUDES FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## INCLUDES FIELD
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT BOOLEAN INCLUDES YEAR
##
## Ends in an error in state: 231.
##
## field_decl_includes -> INCLUDES . FIELD constructor option(field_decl_includes_context) [ INCLUDES FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## INCLUDES
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT TEXT DATA
##
## Ends in an error in state: 228.
##
## field_decl_item -> CONTEXT ident CONTENT typ . option(struct_field_func) [ INCLUDES FIELD END_CODE DECLARATION CONTEXT ]
##
## The known suffix of the stack is as follows:
## CONTEXT ident CONTENT typ
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 205, spurious reduction of production option(optional_marked) ->
## In state 208, spurious reduction of production typ -> option(collection_marked) typ_base option(optional_marked)
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT CONTENT YEAR
##
## Ends in an error in state: 227.
##
## field_decl_item -> CONTEXT ident CONTENT . typ option(struct_field_func) [ INCLUDES FIELD END_CODE DECLARATION CONTEXT ]
##
## The known suffix of the stack is as follows:
## CONTEXT ident CONTENT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT IDENT YEAR
##
## Ends in an error in state: 226.
##
## field_decl_item -> CONTEXT ident . CONTENT typ option(struct_field_func) [ INCLUDES FIELD END_CODE DECLARATION CONTEXT ]
##
## The known suffix of the stack is as follows:
## CONTEXT ident
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON CONTEXT YEAR
##
## Ends in an error in state: 225.
##
## field_decl_item -> CONTEXT . ident CONTENT typ option(struct_field_func) [ INCLUDES FIELD END_CODE DECLARATION CONTEXT ]
##
## The known suffix of the stack is as follows:
## CONTEXT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 224.
##
## code_item -> DECLARATION FIELD constructor COLON . nonempty_list(field_decl_item) list(field_decl_includes) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION FIELD constructor COLON
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD CONSTRUCTOR YEAR
##
## Ends in an error in state: 223.
##
## code_item -> DECLARATION FIELD constructor . COLON nonempty_list(field_decl_item) list(field_decl_includes) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION FIELD constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION FIELD YEAR
##
## Ends in an error in state: 222.
##
## code_item -> DECLARATION FIELD . constructor COLON nonempty_list(field_decl_item) list(field_decl_includes) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION FIELD
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS BOOLEAN INCLUDES
##
## Ends in an error in state: 217.
##
## list(struct_field) -> struct_field . list(struct_field) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## struct_field
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 205, spurious reduction of production option(optional_marked) ->
## In state 208, spurious reduction of production typ -> option(collection_marked) typ_base option(optional_marked)
## In state 214, spurious reduction of production struct_field_func -> DEPENDS typ
## In state 215, spurious reduction of production option(struct_field_func) -> struct_field_func
## In state 216, spurious reduction of production struct_field -> struct_field_base option(struct_field_func)
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS COLLECTION BEGIN_METADATA
##
## Ends in an error in state: 198.
##
## typ -> option(collection_marked) . typ_base option(optional_marked) [ INCLUDES FIELD END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
##
## The known suffix of the stack is as follows:
## option(collection_marked)
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS TEXT YEAR
##
## Ends in an error in state: 205.
##
## typ -> option(collection_marked) typ_base . option(optional_marked) [ INCLUDES FIELD END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
##
## The known suffix of the stack is as follows:
## option(collection_marked) typ_base
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS YEAR
##
## Ends in an error in state: 213.
##
## struct_field_func -> DEPENDS . typ [ INCLUDES FIELD END_CODE DECLARATION DATA CONTEXT CONDITION ]
##
## The known suffix of the stack is as follows:
## DEPENDS
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT YEAR
##
## Ends in an error in state: 212.
##
## struct_field -> struct_field_base . option(struct_field_func) [ FIELD END_CODE DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## struct_field_base
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION YEAR
##
## Ends in an error in state: 219.
##
## struct_field_base -> condition_pos . ident [ FIELD END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## condition_pos
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON DATA IDENT CONTENT YEAR
##
## Ends in an error in state: 195.
##
## struct_field_base -> DATA ident CONTENT . typ [ FIELD END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## DATA ident CONTENT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON DATA IDENT YEAR
##
## Ends in an error in state: 194.
##
## struct_field_base -> DATA ident . CONTENT typ [ FIELD END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## DATA ident
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON DATA YEAR
##
## Ends in an error in state: 193.
##
## struct_field_base -> DATA . ident CONTENT typ [ FIELD END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## DATA
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 192.
##
## code_item -> DECLARATION STRUCT constructor COLON . list(struct_field) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION STRUCT constructor COLON
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR YEAR
##
## Ends in an error in state: 191.
##
## code_item -> DECLARATION STRUCT constructor . COLON list(struct_field) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION STRUCT constructor
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION STRUCT YEAR
##
## Ends in an error in state: 190.
##
## code_item -> DECLARATION STRUCT . constructor COLON list(struct_field) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION STRUCT
##

unexpected token

source_file_or_master: BEGIN_CODE DECLARATION YEAR
##
## Ends in an error in state: 189.
##
## code_item -> DECLARATION . STRUCT constructor COLON list(struct_field) [ FIELD END_CODE DECLARATION ]
## code_item -> DECLARATION . FIELD constructor COLON nonempty_list(field_decl_item) list(field_decl_includes) [ FIELD END_CODE DECLARATION ]
## code_item -> DECLARATION . ENUM constructor COLON nonempty_list(enum_decl_line) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION CARDINAL THEN
##
## Ends in an error in state: 187.
##
## nonempty_list(application_field_item) -> application_field_item . [ FIELD END_CODE DECLARATION ]
## nonempty_list(application_field_item) -> application_field_item . nonempty_list(application_field_item) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## application_field_item
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 43, spurious reduction of production primitive_expression -> CARDINAL
## In state 50, spurious reduction of production base_expression -> primitive_expression
## In state 89, spurious reduction of production mult_expression -> base_expression
## In state 84, spurious reduction of production sum_expression -> mult_expression
## In state 94, spurious reduction of production compare_expression -> sum_expression
## In state 121, spurious reduction of production logical_expression -> compare_expression
## In state 105, spurious reduction of production expression -> logical_expression
## In state 183, spurious reduction of production assertion_base -> expression
## In state 184, spurious reduction of production assertion -> option(condition_consequence) assertion_base
## In state 185, spurious reduction of production application_field_item -> ASSERTION assertion
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION CARDINAL YEAR
##
## Ends in an error in state: 43.
##
## aggregate_func -> CARDINAL . [ FOR ]
## primitive_expression -> CARDINAL . [ WITH THEN RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## CARDINAL
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION CONSTRUCTOR CONTENT MONEY_AMOUNT YEAR
##
## Ends in an error in state: 68.
##
## constructor_payload -> CONTENT small_expression . [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## small_expression -> small_expression . ARROW constructor [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## CONTENT small_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION CONSTRUCTOR CONTENT YEAR
##
## Ends in an error in state: 67.
##
## constructor_payload -> CONTENT . small_expression [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## CONTENT
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION CONSTRUCTOR YEAR
##
## Ends in an error in state: 66.
##
## primitive_expression -> constructor . option(constructor_payload) [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## qident -> constructor . DOT qident [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## constructor
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION EXISTS IDENT IN CARDINAL SUCH THAT YEAR
##
## Ends in an error in state: 113.
##
## expression -> exists_prefix . expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## exists_prefix
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION EXISTS IDENT IN NOW SUCH YEAR
##
## Ends in an error in state: 119.
##
## exists_prefix -> exists_marked ident IN primitive_expression SUCH . THAT [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## exists_marked ident IN primitive_expression SUCH
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION EXISTS IDENT IN NOW YEAR
##
## Ends in an error in state: 118.
##
## exists_prefix -> exists_marked ident IN primitive_expression . SUCH THAT [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## exists_marked ident IN primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION EXISTS IDENT IN YEAR
##
## Ends in an error in state: 117.
##
## exists_prefix -> exists_marked ident IN . primitive_expression SUCH THAT [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## exists_marked ident IN
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION EXISTS IDENT YEAR
##
## Ends in an error in state: 116.
##
## exists_prefix -> exists_marked ident . IN primitive_expression SUCH THAT [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## exists_marked ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION EXISTS YEAR
##
## Ends in an error in state: 115.
##
## exists_prefix -> exists_marked . ident IN primitive_expression SUCH THAT [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## exists_marked
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FIXED IDENT BY YEAR
##
## Ends in an error in state: 180.
##
## assertion -> FIXED qident BY . ident [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## FIXED qident BY
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FIXED IDENT WITH_V
##
## Ends in an error in state: 179.
##
## assertion -> FIXED qident . BY ident [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## FIXED qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production qident -> ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FIXED YEAR
##
## Ends in an error in state: 178.
##
## assertion -> FIXED . qident BY ident [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## FIXED
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FOR ALL IDENT IN CARDINAL WE_HAVE YEAR
##
## Ends in an error in state: 106.
##
## expression -> forall_prefix . expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## forall_prefix
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FOR ALL IDENT IN NOW YEAR
##
## Ends in an error in state: 110.
##
## forall_prefix -> for_all_marked ident IN primitive_expression . WE_HAVE [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## for_all_marked ident IN primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FOR ALL IDENT IN YEAR
##
## Ends in an error in state: 109.
##
## forall_prefix -> for_all_marked ident IN . primitive_expression WE_HAVE [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## for_all_marked ident IN
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FOR ALL IDENT YEAR
##
## Ends in an error in state: 108.
##
## forall_prefix -> for_all_marked ident . IN primitive_expression WE_HAVE [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## for_all_marked ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FOR ALL YEAR
##
## Ends in an error in state: 107.
##
## forall_prefix -> for_all_marked . ident IN primitive_expression WE_HAVE [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR EXISTS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## for_all_marked
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION FOR YEAR
##
## Ends in an error in state: 39.
##
## for_all_marked -> FOR . ALL [ IDENT ]
##
## The known suffix of the stack is as follows:
## FOR
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION IF NOW RULE
##
## Ends in an error in state: 126.
##
## expression -> IF expression . THEN expression ELSE base_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production base_expression -> primitive_expression
## In state 89, spurious reduction of production mult_expression -> base_expression
## In state 84, spurious reduction of production sum_expression -> mult_expression
## In state 94, spurious reduction of production compare_expression -> sum_expression
## In state 121, spurious reduction of production logical_expression -> compare_expression
## In state 105, spurious reduction of production expression -> logical_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION IF NOW THEN NOW ELSE YEAR
##
## Ends in an error in state: 129.
##
## expression -> IF expression THEN expression ELSE . base_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression ELSE
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION IF NOW THEN NOW THEN
##
## Ends in an error in state: 128.
##
## expression -> IF expression THEN expression . ELSE base_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production base_expression -> primitive_expression
## In state 89, spurious reduction of production mult_expression -> base_expression
## In state 84, spurious reduction of production sum_expression -> mult_expression
## In state 94, spurious reduction of production compare_expression -> sum_expression
## In state 121, spurious reduction of production logical_expression -> compare_expression
## In state 105, spurious reduction of production expression -> logical_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION IF NOW THEN YEAR
##
## Ends in an error in state: 127.
##
## expression -> IF expression THEN . expression ELSE base_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF expression THEN
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION IF YEAR
##
## Ends in an error in state: 38.
##
## expression -> IF . expression THEN expression ELSE base_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION INT_LITERAL WITH_V
##
## Ends in an error in state: 54.
##
## literal -> num_literal . option(unit_literal) [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## num_literal
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION LPAREN NOW THEN
##
## Ends in an error in state: 131.
##
## atomic_expression -> LPAREN expression . RPAREN [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## LPAREN expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production base_expression -> primitive_expression
## In state 89, spurious reduction of production mult_expression -> base_expression
## In state 84, spurious reduction of production sum_expression -> mult_expression
## In state 94, spurious reduction of production compare_expression -> sum_expression
## In state 121, spurious reduction of production logical_expression -> compare_expression
## In state 105, spurious reduction of production expression -> logical_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION LPAREN YEAR
##
## Ends in an error in state: 36.
##
## atomic_expression -> LPAREN . expression RPAREN [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT CONSTRUCTOR COLON NOT NOW OR
##
## Ends in an error in state: 136.
##
## match_arms -> ALT match_arm . match_arms [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## ALT match_arm
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production base_expression -> primitive_expression
## In state 89, spurious reduction of production mult_expression -> base_expression
## In state 84, spurious reduction of production sum_expression -> mult_expression
## In state 94, spurious reduction of production compare_expression -> sum_expression
## In state 104, spurious reduction of production logical_expression -> logical_unop compare_expression
## In state 140, spurious reduction of production match_arm -> constructor_binding COLON logical_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 139.
##
## match_arm -> constructor_binding COLON . logical_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ALT ]
##
## The known suffix of the stack is as follows:
## constructor_binding COLON
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT CONSTRUCTOR OF CONSTRUCTOR YEAR
##
## Ends in an error in state: 144.
##
## optional_binding -> OF constructor . constructor_binding [ COLON ]
##
## The known suffix of the stack is as follows:
## OF constructor
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT CONSTRUCTOR OF IDENT YEAR
##
## Ends in an error in state: 138.
##
## match_arm -> constructor_binding . COLON logical_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ALT ]
##
## The known suffix of the stack is as follows:
## constructor_binding
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT CONSTRUCTOR OF YEAR
##
## Ends in an error in state: 142.
##
## optional_binding -> OF . ident [ COLON ]
## optional_binding -> OF . constructor constructor_binding [ COLON ]
##
## The known suffix of the stack is as follows:
## OF
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT CONSTRUCTOR YEAR
##
## Ends in an error in state: 141.
##
## constructor_binding -> constructor . optional_binding [ COLON ]
##
## The known suffix of the stack is as follows:
## constructor
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH ALT YEAR
##
## Ends in an error in state: 135.
##
## match_arms -> ALT . match_arm match_arms [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## ALT
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW WITH YEAR
##
## Ends in an error in state: 134.
##
## expression -> MATCH primitive_expression WITH . match_arms [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## MATCH primitive_expression WITH
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH NOW YEAR
##
## Ends in an error in state: 133.
##
## expression -> MATCH primitive_expression . WITH match_arms [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## MATCH primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MATCH YEAR
##
## Ends in an error in state: 35.
##
## expression -> MATCH . primitive_expression WITH match_arms [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ]
##
## The known suffix of the stack is as follows:
## MATCH
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MINUS YEAR
##
## Ends in an error in state: 44.
##
## sum_expression -> sum_unop . sum_expression [ THEN RULE RPAREN OR NOT_EQUAL LESSER_EQUAL LESSER GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## sum_unop
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MONEY_AMOUNT ARROW YEAR
##
## Ends in an error in state: 47.
##
## small_expression -> small_expression ARROW . constructor [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## small_expression ARROW
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION MONEY_AMOUNT YEAR
##
## Ends in an error in state: 46.
##
## primitive_expression -> small_expression . [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## small_expression -> small_expression . ARROW constructor [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## small_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOT YEAR
##
## Ends in an error in state: 103.
##
## logical_expression -> logical_unop . compare_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ALT ]
##
## The known suffix of the stack is as follows:
## logical_unop
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW IN YEAR
##
## Ends in an error in state: 82.
##
## base_expression -> primitive_expression IN . base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## primitive_expression IN
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW INCREASING
##
## Ends in an error in state: 89.
##
## mult_expression -> base_expression . [ THEN RULE RPAREN PLUS OR NOT_EQUAL MINUS LESSER_EQUAL LESSER GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## mult_expression -> base_expression . mult_op mult_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MINUS LESSER_EQUAL LESSER GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## base_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production base_expression -> primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW MULT YEAR
##
## Ends in an error in state: 92.
##
## mult_expression -> base_expression mult_op . mult_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MINUS LESSER_EQUAL LESSER GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## base_expression mult_op
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW NOT_EQUAL YEAR
##
## Ends in an error in state: 101.
##
## compare_expression -> sum_expression compare_op . compare_expression [ THEN RULE RPAREN OR FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## sum_expression compare_op
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW OF YEAR
##
## Ends in an error in state: 53.
##
## base_expression -> primitive_expression OF . base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## primitive_expression OF
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW OR YEAR
##
## Ends in an error in state: 124.
##
## logical_expression -> compare_expression logical_op . logical_expression [ THEN RULE RPAREN FIELD END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION ALT ]
##
## The known suffix of the stack is as follows:
## compare_expression logical_op
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW PLUS YEAR
##
## Ends in an error in state: 87.
##
## sum_expression -> mult_expression sum_op . sum_expression [ THEN RULE RPAREN OR NOT_EQUAL LESSER_EQUAL LESSER GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## mult_expression sum_op
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW WITH YEAR
##
## Ends in an error in state: 51.
##
## base_expression -> primitive_expression WITH . constructor [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## primitive_expression WITH
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION NOW YEAR
##
## Ends in an error in state: 50.
##
## base_expression -> primitive_expression . [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## base_expression -> primitive_expression . OF base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## base_expression -> primitive_expression . WITH constructor [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
## base_expression -> primitive_expression . IN base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION SUM FOR IDENT IN NOW OF YEAR
##
## Ends in an error in state: 79.
##
## aggregate -> aggregate_func FOR ident IN primitive_expression OF . base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## aggregate_func FOR ident IN primitive_expression OF
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION SUM FOR IDENT IN NOW YEAR
##
## Ends in an error in state: 78.
##
## aggregate -> aggregate_func FOR ident IN primitive_expression . OF base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## aggregate_func FOR ident IN primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION SUM FOR IDENT IN YEAR
##
## Ends in an error in state: 76.
##
## aggregate -> aggregate_func FOR ident IN . primitive_expression OF base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## aggregate_func FOR ident IN
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION SUM FOR IDENT YEAR
##
## Ends in an error in state: 75.
##
## aggregate -> aggregate_func FOR ident . IN primitive_expression OF base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## aggregate_func FOR ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION SUM FOR YEAR
##
## Ends in an error in state: 74.
##
## aggregate -> aggregate_func FOR . ident IN primitive_expression OF base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## aggregate_func FOR
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION SUM YEAR
##
## Ends in an error in state: 73.
##
## aggregate -> aggregate_func . FOR ident IN primitive_expression OF base_expression [ THEN RULE RPAREN PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## aggregate_func
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION UNDER_CONDITION CARDINAL CONSEQUENCE BY
##
## Ends in an error in state: 182.
##
## assertion -> option(condition_consequence) . assertion_base [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(condition_consequence)
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION UNDER_CONDITION CARDINAL THEN
##
## Ends in an error in state: 154.
##
## condition_consequence -> condition . CONSEQUENCE [ VERTICAL SUM NOW NOT MONEY_AMOUNT MINUS MATCH LPAREN INT_LITERAL IF IDENT FOR FILLED EXISTS DEFINED_AS DECIMAL_LITERAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## condition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 43, spurious reduction of production primitive_expression -> CARDINAL
## In state 50, spurious reduction of production base_expression -> primitive_expression
## In state 89, spurious reduction of production mult_expression -> base_expression
## In state 84, spurious reduction of production sum_expression -> mult_expression
## In state 94, spurious reduction of production compare_expression -> sum_expression
## In state 121, spurious reduction of production logical_expression -> compare_expression
## In state 105, spurious reduction of production expression -> logical_expression
## In state 148, spurious reduction of production condition -> UNDER_CONDITION expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION UNDER_CONDITION YEAR
##
## Ends in an error in state: 21.
##
## condition -> UNDER_CONDITION . expression [ CONSEQUENCE ]
##
## The known suffix of the stack is as follows:
## UNDER_CONDITION
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VARIES IDENT WITH
##
## Ends in an error in state: 171.
##
## assertion -> VARIES qident . WITH_V base_expression option(variation_type) [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production qident -> ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VARIES IDENT WITH_V NOW THEN
##
## Ends in an error in state: 173.
##
## assertion -> VARIES qident WITH_V base_expression . option(variation_type) [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES qident WITH_V base_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production base_expression -> primitive_expression
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VARIES IDENT WITH_V YEAR
##
## Ends in an error in state: 172.
##
## assertion -> VARIES qident WITH_V . base_expression option(variation_type) [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES qident WITH_V
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VARIES YEAR
##
## Ends in an error in state: 170.
##
## assertion -> VARIES . qident WITH_V base_expression option(variation_type) [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VERTICAL INT_LITERAL DIV INT_LITERAL DIV INT_LITERAL YEAR
##
## Ends in an error in state: 28.
##
## literal -> VERTICAL date_int DIV date_int DIV date_int . VERTICAL [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL date_int DIV date_int DIV date_int
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VERTICAL INT_LITERAL DIV INT_LITERAL DIV YEAR
##
## Ends in an error in state: 27.
##
## literal -> VERTICAL date_int DIV date_int DIV . date_int VERTICAL [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL date_int DIV date_int DIV
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VERTICAL INT_LITERAL DIV INT_LITERAL YEAR
##
## Ends in an error in state: 26.
##
## literal -> VERTICAL date_int DIV date_int . DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL date_int DIV date_int
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VERTICAL INT_LITERAL DIV YEAR
##
## Ends in an error in state: 25.
##
## literal -> VERTICAL date_int DIV . date_int DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL date_int DIV
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VERTICAL INT_LITERAL YEAR
##
## Ends in an error in state: 24.
##
## literal -> VERTICAL date_int . DIV date_int DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL date_int
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION VERTICAL YEAR
##
## Ends in an error in state: 22.
##
## literal -> VERTICAL . date_int DIV date_int DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FIELD EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON ASSERTION YEAR
##
## Ends in an error in state: 169.
##
## application_field_item -> ASSERTION . assertion [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## ASSERTION
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON DEFINITION IDENT DEFINED_AS YEAR
##
## Ends in an error in state: 166.
##
## definition -> qident option(definition_parameters) option(condition_consequence) DEFINED_AS . expression [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## qident option(definition_parameters) option(condition_consequence) DEFINED_AS
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON DEFINITION IDENT OF IDENT DECREASING
##
## Ends in an error in state: 164.
##
## definition -> qident option(definition_parameters) . option(condition_consequence) DEFINED_AS expression [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## qident option(definition_parameters)
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON DEFINITION IDENT UNDER_CONDITION CARDINAL CONSEQUENCE DECREASING
##
## Ends in an error in state: 165.
##
## definition -> qident option(definition_parameters) option(condition_consequence) . DEFINED_AS expression [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## qident option(definition_parameters) option(condition_consequence)
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON DEFINITION IDENT WITH_V
##
## Ends in an error in state: 163.
##
## definition -> qident . option(definition_parameters) option(condition_consequence) DEFINED_AS expression [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production qident -> ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON DEFINITION YEAR
##
## Ends in an error in state: 162.
##
## application_field_item -> DEFINITION . definition [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## DEFINITION
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE CONSTRUCTOR DOT YEAR
##
## Ends in an error in state: 64.
##
## qident -> constructor DOT . qident [ WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL NOT MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FILLED FIELD EQUAL END_CODE ELSE DIV DEFINITION DEFINED_AS DECREASING DECLARATION CONSEQUENCE BY ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## constructor DOT
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE CONSTRUCTOR YEAR
##
## Ends in an error in state: 63.
##
## qident -> constructor . DOT qident [ WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL NOT MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FILLED FIELD EQUAL END_CODE ELSE DIV DEFINITION DEFINED_AS DECREASING DECLARATION CONSEQUENCE BY ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## constructor
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT DOT YEAR
##
## Ends in an error in state: 61.
##
## qident -> ident DOT . qident [ WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL NOT MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FILLED FIELD EQUAL END_CODE ELSE DIV DEFINITION DEFINED_AS DECREASING DECLARATION CONSEQUENCE BY ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## ident DOT
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT NOT FIELD
##
## Ends in an error in state: 151.
##
## rule -> rule_expr option(condition_consequence) option(NOT) . FILLED [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## rule_expr option(condition_consequence) option(NOT)
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT OF IDENT YEAR
##
## Ends in an error in state: 20.
##
## rule -> rule_expr . option(condition_consequence) option(NOT) FILLED [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## rule_expr
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT OF YEAR
##
## Ends in an error in state: 158.
##
## definition_parameters -> OF . ident [ UNDER_CONDITION NOT FILLED DEFINED_AS ]
##
## The known suffix of the stack is as follows:
## OF
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT UNDER_CONDITION NOW CONSEQUENCE FIELD
##
## Ends in an error in state: 149.
##
## rule -> rule_expr option(condition_consequence) . option(NOT) FILLED [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## rule_expr option(condition_consequence)
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT WITH_V
##
## Ends in an error in state: 157.
##
## rule_expr -> qident . option(definition_parameters) [ UNDER_CONDITION NOT FILLED ]
##
## The known suffix of the stack is as follows:
## qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 60, spurious reduction of production qident -> ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE IDENT YEAR
##
## Ends in an error in state: 60.
##
## qident -> ident . [ WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL NOT MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FILLED FIELD EQUAL END_CODE ELSE DIV DEFINITION DEFINED_AS DECREASING DECLARATION CONSEQUENCE BY ASSERTION ARROW AND ALT ]
## qident -> ident . DOT qident [ WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH RULE RPAREN PLUS OR OF NOT_EQUAL NOT MULT MINUS LESSER_EQUAL LESSER INCREASING IN GREATER_EQUAL GREATER FILLED FIELD EQUAL END_CODE ELSE DIV DEFINITION DEFINED_AS DECREASING DECLARATION CONSEQUENCE BY ASSERTION ARROW AND ALT ]
##
## The known suffix of the stack is as follows:
## ident
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON RULE YEAR
##
## Ends in an error in state: 18.
##
## application_field_item -> RULE . rule [ RULE FIELD END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## RULE
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 17.
##
## code_item -> FIELD constructor COLON . nonempty_list(application_field_item) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## FIELD constructor COLON
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD CONSTRUCTOR YEAR
##
## Ends in an error in state: 16.
##
## code_item -> FIELD constructor . COLON nonempty_list(application_field_item) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## FIELD constructor
##

unexpected token

source_file_or_master: BEGIN_CODE FIELD YEAR
##
## Ends in an error in state: 14.
##
## code_item -> FIELD . constructor COLON nonempty_list(application_field_item) [ FIELD END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## FIELD
##

unexpected token

source_file_or_master: BEGIN_CODE YEAR
##
## Ends in an error in state: 271.
##
## source_file_item -> BEGIN_CODE . code END_CODE [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
##
## The known suffix of the stack is as follows:
## BEGIN_CODE
##

unexpected token

source_file_or_master: BEGIN_METADATA BEGIN_CODE END_CODE YEAR
##
## Ends in an error in state: 268.
##
## metadata_block -> BEGIN_CODE code END_CODE . END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
##
## The known suffix of the stack is as follows:
## BEGIN_CODE code END_CODE
##

unexpected token

source_file_or_master: BEGIN_METADATA BEGIN_CODE YEAR
##
## Ends in an error in state: 13.
##
## metadata_block -> BEGIN_CODE . code END_CODE END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
##
## The known suffix of the stack is as follows:
## BEGIN_CODE
##

unexpected token

source_file_or_master: BEGIN_METADATA YEAR
##
## Ends in an error in state: 12.
##
## source_file_item -> BEGIN_METADATA . metadata_block [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
##
## The known suffix of the stack is as follows:
## BEGIN_METADATA
##

unexpected token

source_file_or_master: LAW_TEXT YEAR
##
## Ends in an error in state: 275.
##
## source_file -> source_file_item . source_file [ # ]
##
## The known suffix of the stack is as follows:
## source_file_item
##

unexpected token

source_file_or_master: MASTER_FILE LAW_INCLUDE YEAR
##
## Ends in an error in state: 5.
##
## master_file_includes -> master_file_include . master_file_includes [ # ]
##
## The known suffix of the stack is as follows:
## master_file_include
##

unexpected token

source_file_or_master: MASTER_FILE YEAR
##
## Ends in an error in state: 1.
##
## source_file_or_master -> MASTER_FILE . master_file_includes [ # ]
##
## The known suffix of the stack is as follows:
## MASTER_FILE
##

unexpected token

source_file_or_master: YEAR
##
## Ends in an error in state: 0.
##
## source_file_or_master' -> . source_file_or_master [ # ]
##
## The known suffix of the stack is as follows:
##
##

unexpected token
