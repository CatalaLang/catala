```catala
declaration mult content decimal equals
    let x equals decimal of 2 * 3. in
    let y equals 1000. in
    x * y
```

(\x . (\y . (x * y)) 1000.) ) (decimal of ...)

```catala-test-cli
$ catala typecheck
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala
declaration foo1 content list of integer equals
  map each x among [1] to x + x
```

```catala-test-cli
$ catala typecheck
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala
declaration foo2 content list of integer equals
  map each (x, y) among ([1], [2]) to x + y
```

```catala-test-cli
$ catala scopelang


let mult: decimal =
  let x : decimal = (to_rat 2) * 3. in
  let y : decimal = 1000. in
  ((x * y))

let foo1: list of integer =
  map (λ (x: integer) → x + x) [1]

let foo2: list of integer =
  map (λ (x_y: (integer, integer)) →
       let x : integer = x_y.0 in
       let y : integer = x_y.1 in
       ((x + y)))
    map2 (λ (x: integer) (y: integer) → (x, y)) [1] [2]


```


```catala
declaration empty content list of anything of type t depends on x content integer equals []

declaration t1 content list of decimal equals empty of 0

declaration t2 content list of money equals empty of 0
```


```catala-test-cli
$ catala typecheck
┌─[ERROR]─
│
│  Error during typechecking, incompatible types:
│  ─➤ decimal
│  ─➤ money
│
│ While typechecking the following expression:
├─➤ tests/mini.catala_en:62.45-62.50:
│ 
│
│ Type decimal is coming from:
├─➤ tests/mini.catala_en:60.32-60.39:
│    │
│ 60 │ │ This expression has type (<ty1>, <ty1>) → (<ty1>, <ty1>):
│    │                                ‾‾‾‾‾‾‾
│
│ Type money is coming from:
├─➤ tests/mini.catala_en:62.32-62.37:
│ 
└─
#return code 123#
```
