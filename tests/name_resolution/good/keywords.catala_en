
```catala-metadata
declaration scope Stdlib:
  input val content integer
  output when content date
```


```catala
scope Stdlib:
  definition when equals val * 1 day + |1970-01-01|

#[test] declaration scope Test:
  a scope Stdlib
  output val content date

scope Test:
  definition a.val equals 99
  definition val equals a.when
```

```catala-test-cli
$ catala test-scope Test
┌─[RESULT]─ Test ─
│ val = 1970-04-10
└─
```

```catala-test-cli
$ catala ocaml
(** This file has been generated by the Catala compiler, do not edit! *)

[@@@ocaml.warning "-4-26-27-32-33-34-37-41-42-69"]

open Catala_runtime


let () =
  match Catala_runtime.check_module "Stdlib_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Stdlib_en, it may need recompiling"
module Stdlib_en = Stdlib_en
let () =
  match Catala_runtime.check_module "Date_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Date_en, it may need recompiling"
module Date_en = Date_en
let () =
  match Catala_runtime.check_module "Period_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Period_en, it may need recompiling"
module Period_en = Period_en
let () =
  match Catala_runtime.check_module "Money_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Money_en, it may need recompiling"
module Money_en = Money_en
let () =
  match Catala_runtime.check_module "Integer_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Integer_en, it may need recompiling"
module Integer_en = Integer_en
let () =
  match Catala_runtime.check_module "Decimal_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Decimal_en, it may need recompiling"
module Decimal_en = Decimal_en

module Stdlib__1 = struct
  type t = {when__1: date}
end

module Test = struct
  type t = {val__1: date}
end

module Stdlib_in = struct
  type t = {val_in: integer}
end

module Test_in = struct
  type t = unit
end


(* Scope Stdlib *)
let stdlib : Stdlib_in.t -> Stdlib__1.t = fun stdlib_in ->
  let val__1: integer = stdlib_in.Stdlib_in.val_in in
  let when__1: date =
    match
      (Optional.Present
         ((o_add_dat_dur AbortOnRound
             {filename="tests/name_resolution/good/keywords.catala_en";
              start_line=11; start_column=38; end_line=11; end_column=39;
              law_headings=[]} (date_of_numbers (1970) (1) (1))
             (o_mult_dur_int (duration_of_numbers (0) (0) (1)) val__1)),
           ({filename="tests/name_resolution/good/keywords.catala_en";
             start_line=11; start_column=26; end_line=11; end_column=52;
             law_headings=[]})))
    with
    | Optional.Absent _ -> (raise
        (Error (NoValue, [{filename="tests/name_resolution/good/keywords.catala_en";
                           start_line=5; start_column=10;
                           end_line=5; end_column=14; law_headings=[]}])))
    | Optional.Present arg -> (let x, _ = arg in x) in
  {Stdlib__1.when__1 = when__1}

(* Scope Test *)
let test : Test_in.t -> Test.t = fun _ ->
  let a: Stdlib__1.t =
    (let result : Stdlib__1.t =
       (stdlib
          ({Stdlib_in.val_in =
              (match
                 (Optional.Present
                    ((integer_of_string "99"),
                      ({filename="tests/name_resolution/good/keywords.catala_en";
                        start_line=18; start_column=27;
                        end_line=18; end_column=29; law_headings=[]})))
               with
               | Optional.Absent _ -> (raise
                   (Error (NoValue, [{filename="tests/name_resolution/good/keywords.catala_en";
                                      start_line=18; start_column=14;
                                      end_line=18; end_column=19;
                                      law_headings=[]}])))
               | Optional.Present arg -> (let x, _ = arg in x))}))
    in
    (let result__1 : Stdlib__1.t =
       ({Stdlib__1.when__1 = (result.Stdlib__1.when__1)})
    in
    ( if true then result__1 else result__1))) in
  let val__1: date =
    match
      (Optional.Present
         ((a.Stdlib__1.when__1),
           ({filename="tests/name_resolution/good/keywords.catala_en";
             start_line=19; start_column=25; end_line=19; end_column=31;
             law_headings=[]})))
    with
    | Optional.Absent _ -> (raise
        (Error (NoValue, [{filename="tests/name_resolution/good/keywords.catala_en";
                           start_line=15; start_column=10;
                           end_line=15; end_column=13; law_headings=[]}])))
    | Optional.Present arg -> (let x, _ = arg in x) in
  {Test.val__1 = val__1}
```
