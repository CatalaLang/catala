
```catala-metadata
declaration scope Stdlib:
  input val content integer
  output when content date
```


```catala
scope Stdlib:
  definition when equals val * 1 day + |1970-01-01|

declaration scope Test:
  a scope Stdlib
  output val content date

scope Test:
  definition a.val equals 99
  definition val equals a.when
```

```catala-test-inline
$ catala test-scope Test
┌─[RESULT]─
│ val = 1970-04-10
└─
```

```catala-test-inline
$ catala ocaml
(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module Stdlib__1 = struct
  type t = {when__1: date}
end

module Test = struct
  type t = {val__1: date}
end

module Stdlib_in = struct
  type t = {val_in: integer}
end

module Test_in = struct
  type t = unit
end


let stdlib (stdlib_in: Stdlib_in.t) : Stdlib__1.t =
  let val__1: integer = stdlib_in.Stdlib_in.val_in in
  let when__1: date =
    match
      (Eoption.ESome
         (o_add_dat_dur AbortOnRound
            {filename="tests/name_resolution/good/keywords.catala_en";
             start_line=11; start_column=38; end_line=11; end_column=39;
             law_headings=[]} (date_of_numbers (1970) (1) (1))
            (o_mult_dur_int (duration_of_numbers (0) (0) (1)) val__1)))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/name_resolution/good/keywords.catala_en";
                                                 start_line=5; start_column=10;
                                                 end_line=5; end_column=14;
                                                 law_headings=[]}])))
    | Eoption.ESome arg -> arg in
  {Stdlib__1.when__1 = when__1}

let test (_: Test_in.t) : Test.t =
  let a: Stdlib__1.t =
    (let result : Stdlib__1.t =
       (stdlib
          ({Stdlib_in.val_in =
              (match (Eoption.ESome (integer_of_string "99"))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/name_resolution/good/keywords.catala_en";
                                                            start_line=18; start_column=14;
                                                            end_line=18; end_column=19;
                                                            law_headings=
                                                            []}])))
               | Eoption.ESome arg -> arg)}))
    in
    (let result__1 : Stdlib__1.t =
       ({Stdlib__1.when__1 = (result.Stdlib__1.when__1)})
    in
    ( if true then result__1 else result__1))) in
  let val__1: date =
    match (Eoption.ESome (a.Stdlib__1.when__1))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/name_resolution/good/keywords.catala_en";
                                                 start_line=15; start_column=10;
                                                 end_line=15; end_column=13;
                                                 law_headings=[]}])))
    | Eoption.ESome arg -> arg in
  {Test.val__1 = val__1}


let entry_scopes = [
  "Test";
]

let commands =
  List.map (fun c ->
      if List.mem c entry_scopes then c else (
        print_endline "Specify scopes from the following list (or no argument for running them all):";
        List.iter (fun n -> print_endline ("  - " ^ n)) entry_scopes;
        exit 1
      ))
    (List.tl (Array.to_list Sys.argv))

let commands = if commands = [] then entry_scopes else commands

let () = if List.mem "Test" commands then (
  ignore (test ());
  print_endline "Scope Test executed successfully."
)
```
