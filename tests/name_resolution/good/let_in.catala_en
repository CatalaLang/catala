## Article

```catala
#[test] declaration scope S:
  context output a content A
  context output b content B

declaration structure A:
   data x content decimal
   data y content B

declaration structure B:
   data y content boolean
   data z content decimal

scope S:
   definition b equals let b equals 42 in B { -- y: true -- z: decimal of b}
   definition a equals
     let b equals
       if b.y
       then B { -- y: false -- z: -1.0 }
       else B { -- y: true  -- z: -2.0 }
     in
     let a equals 2.0 * b.z in
     A { -- x: a -- y : b }
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala test-scope S
┌─[RESULT]─ S ─
│ a = A { -- x: -2.0 -- y: B { -- y: false -- z: -1.0 } }
│ b = B { -- y: true -- z: 42.0 }
└─
```

## Check scope of let-in vs scope variable

```catala
#[test] declaration scope S2:
   x scope S
   output y content integer

scope S2:
  definition y equals
    let x equals 0 in
    x + 1
```

```catala-test-cli
$ catala test-scope S2
┌─[WARNING]─
│
│  Unused variable: x does not contribute to computing any of scope S2
│  outputs. Did you forget something?
│
├─➤ tests/name_resolution/good/let_in.catala_en:52.4-52.5:
│    │
│ 52 │    x scope S
│    │    ‾
└─ Check scope of let-in vs scope variable
┌─[RESULT]─ S2 ─
│ y = 1
└─
```
