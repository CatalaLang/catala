This test attemts to stress the renaming engine, and trigger naming conflicts in
the backends.


```catala
declaration structure Assert_in:
  data assert content integer

declaration structure Assert__1:
  data assert content integer

declaration assert content integer depends on assert__1 content integer
  equals assert__1

declaration closure_assert content (Assert_in, Assert__1)
  equals (Assert_in { -- assert: 99 }, Assert__1 { -- assert: 199 })

declaration scope Assert:
  output assert condition

scope Assert:
  definition assert equals
  let assert equals (x+1) for x among [0] in false
```

```catala-test-inline
$ catala dcalc
let Assert : Assert_in → Assert =
  λ (Assert_in: Assert_in) →
  let assert : bool =
    error_empty
      ⟨ ⟨ ⟨true
           ⊢ ⟨let assert : list of integer =
                map (λ (x: integer) → x + 1) [0]
              in
              false⟩⟩
        | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨false⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  { Assert assert = assert; }
in
let assert : integer → integer = λ (assert__1: integer) → assert__1 in
let closure_assert : (Assert_in, Assert__1) =
  ({ Assert_in assert = 99; }, { Assert__1 assert = 199; })
in
Assert
```


With `--closure-conversion`, a new toplevel definition `closure_assert` is
hoisted from scope `Assert`. However, a declaration by this name already exists,
and it should not be renamed because of the internal code, since it is part of
the exported idents when compiling this as a module:

(it's ok to rename toplevel definition, but the renaming should be fully
determined by the interface of the module: it cannot depend on the fact that the
code hoists a closure or not)

```catala-test-inline
$ catala lcalc --closure-conversion
type Eoption = | ENone of unit | ESome of any

type Assert_in = { assert: integer; }
type Assert__1 = { assert: integer; }
type Assert_in__1 = {  }
type Assert__2 = { assert: bool; }

let topval closure_assert : (closure_env, integer) → integer =
  λ (env: closure_env) (x: integer) →
  let env__1 : () = from_closure_env env in
  
  ((x + 1))

let scope assert (assert_in: Assert_in__1): Assert__2 {assert: bool} =
  let set assert : bool =
    match
      (match
         (ESome
            (let assert : list of integer =
               map (let assert : (closure_env, integer) → integer =
                      closure_assert
                    in
                    (assert, to_closure_env ()))
                 [0]
             in
             false))
       with
       | ENone → ESome false
       | ESome x → ESome x)
    with
    | ENone → error NoValue
    | ESome arg → arg
  in
  return { Assert__2 assert = assert; }

let topval assert__1 : integer → integer =
  λ (assert__1: integer) →
  assert__1

let topval closure_assert__1 :
  (Assert_in {assert: integer}, Assert__1 {assert: integer}) =
  ({ Assert_in assert = 99; }, { Assert__1 assert = 199; })

```


```catala-test-inline
$ catala ocaml --closure-conversion
(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module Assert_in = struct
  type t = {assert__1: integer}
end

module Assert__1 = struct
  type t = {assert__1: integer}
end

module Assert__2 = struct
  type t = {assert__1: bool}
end

module Assert_in__1 = struct
  type t = unit
end


let closure_assert : Obj.t -> integer -> integer =
  fun (env: Obj.t) (x: integer) -> (let _ : unit = (o_fromclosureenv env)
    in
    ((o_add_int_int x (integer_of_string "1"))))

let assert__1 (_: Assert_in__1.t) : Assert__2.t =
  let assert__1: bool =
    match
      (match
         (Eoption.ESome
            (let _ : integer array =
               (o_map
                  (let assert__1 : Obj.t -> integer -> integer =
                     closure_assert in
                  (assert__1, (o_toclosureenv ())))
                  ([|(integer_of_string "0")|])) in
            false))
       with
       | Eoption.ENone _ -> (Eoption.ESome false)
       | Eoption.ESome x -> (Eoption.ESome x))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/name_resolution/good/conflicts.catala_en";
                                                 start_line=19; start_column=10;
                                                 end_line=19; end_column=16;
                                                 law_headings=[]}])))
    | Eoption.ESome arg -> arg in
  {Assert__2.assert__1 = assert__1}

let assert__2 : integer -> integer =
  fun (assert__2: integer) -> assert__2

let closure_assert__1 : (Assert_in.t * Assert__1.t) =
  (({Assert_in.assert__1 = (integer_of_string "99")}),
    ({Assert__1.assert__1 = (integer_of_string "199")}))


let entry_scopes = [
  "Assert";
]

let commands =
  List.map (fun c ->
      if List.mem c entry_scopes then c else (
        print_endline "Specify scopes from the following list (or no argument for running them all):";
        List.iter (fun n -> print_endline ("  - " ^ n)) entry_scopes;
        exit 1
      ))
    (List.tl (Array.to_list Sys.argv))

let commands = if commands = [] then entry_scopes else commands

let () = if List.mem "Assert" commands then (
  ignore (assert__1 ());
  print_endline "Scope Assert executed successfully."
)
```

```catala-test-inline
$ catala test-scope Assert
┌─[RESULT]─
│ assert = false
└─
```
