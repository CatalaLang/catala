## Test basic toplevel values defs

```catala
declaration glob1 content decimal equals 44.12

declaration scope S:
  output a content decimal
  output b content A

declaration structure A:
   data y content boolean
   data z content decimal

declaration glob2 content A equals
    A { --y: glob1 >= 30. --z: 123. * 17. }

scope S:
   definition a equals glob1 * glob1
   definition b equals glob2
```



```catala-test-inline
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-inline
$ catala test-scope S
┌─[RESULT]─
│ a = 1,946.574,4
│ b = A { -- y: true -- z: 2,091.0 }
└─
```

## Test toplevel function defs

```catala
declaration glob3 content decimal
    depends on x content money
    equals decimal of x + 10.

declaration scope S2:
  output a content decimal

scope S2:
   definition a equals glob3 of $44 + 100.
```

```catala-test-inline
$ catala test-scope S2
┌─[RESULT]─
│ a = 154.0
└─
```

## Test function def with two args

```catala
declaration glob4 content decimal
    depends on x content money, y content decimal
    equals decimal of x * y + 10.

declaration scope S3:
  output a content decimal

scope S3:
   definition a equals 50. + glob4 of $44, 55.
```

```catala-test-inline
$ catala test-scope S3
┌─[RESULT]─
│ a = 2,480.0
└─
```

## Test inline defs in toplevel defs

(can't define inline functions yet)

```catala
declaration glob5 content decimal equals
    let x equals decimal of 2 * 3. in
    let y equals 1000. in
    x * y

declaration scope S4:
  output a content decimal

scope S4:
   definition a equals glob5 + 1.
```

```catala-test-inline
$ catala test-scope S4
┌─[RESULT]─
│ a = 6,001.0
└─
```

```catala-test-inline
$ catala scalc
let glob1_1 = 44.12

let glob3_1 (x_2: money) = return to_rat x_2 + 10.

let glob4_2 (x_3: money) (y_4: decimal) = return to_rat x_3 * y_4 + 10.

let glob5_aux_3 =
  decl x_6 : decimal;
  x_6 = to_rat 2 * 3.;
  decl y_7 : decimal;
  y_7 = 1000.;
  return x_6 * y_7

let glob5_5 = glob5_aux_3 ()

let glob2_8 = A {"y": glob1_1 >= 30., "z": 123. * 17.}

let S2_4 (S2_in_9: S2_in) =
  decl temp_a_11 : decimal;
  decl temp_a_12 : option decimal;
  decl temp_a_13 : option decimal;
  switch handle_exceptions []:
  | ENone __14 →
    if true:
      temp_a_13 = ESome glob3_1 ¤44.00 + 100.
    else:
      temp_a_13 = ENone ()
  | ESome x_15 →
    temp_a_13 = ESome x_15;
  switch handle_exceptions [temp_a_13]:
  | ENone __16 →
    if false:
      temp_a_12 = ENone ()
    else:
      temp_a_12 = ENone ()
  | ESome x_17 →
    temp_a_12 = ESome x_17;
  switch temp_a_12:
  | ENone __18 →
    fatal NoValue
  | ESome arg_19 →
    temp_a_11 = arg_19;
  decl a_10 : decimal;
  a_10 = temp_a_11;
  return S2 {"a": a_10}

let S3_5 (S3_in_20: S3_in) =
  decl temp_a_22 : decimal;
  decl temp_a_23 : option decimal;
  decl temp_a_24 : option decimal;
  switch handle_exceptions []:
  | ENone __25 →
    if true:
      temp_a_24 = ESome 50. + glob4_2 ¤44.00 55.
    else:
      temp_a_24 = ENone ()
  | ESome x_26 →
    temp_a_24 = ESome x_26;
  switch handle_exceptions [temp_a_24]:
  | ENone __27 →
    if false:
      temp_a_23 = ENone ()
    else:
      temp_a_23 = ENone ()
  | ESome x_28 →
    temp_a_23 = ESome x_28;
  switch temp_a_23:
  | ENone __29 →
    fatal NoValue
  | ESome arg_30 →
    temp_a_22 = arg_30;
  decl a_21 : decimal;
  a_21 = temp_a_22;
  return S3 {"a": a_21}

let S4_6 (S4_in_31: S4_in) =
  decl temp_a_33 : decimal;
  decl temp_a_34 : option decimal;
  decl temp_a_35 : option decimal;
  switch handle_exceptions []:
  | ENone __36 →
    if true:
      temp_a_35 = ESome glob5_5 + 1.
    else:
      temp_a_35 = ENone ()
  | ESome x_37 →
    temp_a_35 = ESome x_37;
  switch handle_exceptions [temp_a_35]:
  | ENone __38 →
    if false:
      temp_a_34 = ENone ()
    else:
      temp_a_34 = ENone ()
  | ESome x_39 →
    temp_a_34 = ESome x_39;
  switch temp_a_34:
  | ENone __40 →
    fatal NoValue
  | ESome arg_41 →
    temp_a_33 = arg_41;
  decl a_32 : decimal;
  a_32 = temp_a_33;
  return S4 {"a": a_32}

let S_7 (S_in_42: S_in) =
  decl temp_a_54 : decimal;
  decl temp_a_55 : option decimal;
  decl temp_a_56 : option decimal;
  switch handle_exceptions []:
  | ENone __57 →
    if true:
      temp_a_56 = ESome glob1_1 * glob1_1
    else:
      temp_a_56 = ENone ()
  | ESome x_58 →
    temp_a_56 = ESome x_58;
  switch handle_exceptions [temp_a_56]:
  | ENone __59 →
    if false:
      temp_a_55 = ENone ()
    else:
      temp_a_55 = ENone ()
  | ESome x_60 →
    temp_a_55 = ESome x_60;
  switch temp_a_55:
  | ENone __61 →
    fatal NoValue
  | ESome arg_62 →
    temp_a_54 = arg_62;
  decl a_43 : decimal;
  a_43 = temp_a_54;
  decl temp_b_45 : A {y: bool; z: decimal};
  decl temp_b_46 : option A {y: bool; z: decimal};
  decl temp_b_47 : option A {y: bool; z: decimal};
  switch handle_exceptions []:
  | ENone __48 →
    if true:
      temp_b_47 = ESome glob2_8
    else:
      temp_b_47 = ENone ()
  | ESome x_49 →
    temp_b_47 = ESome x_49;
  switch handle_exceptions [temp_b_47]:
  | ENone __50 →
    if false:
      temp_b_46 = ENone ()
    else:
      temp_b_46 = ENone ()
  | ESome x_51 →
    temp_b_46 = ESome x_51;
  switch temp_b_46:
  | ENone __52 →
    fatal NoValue
  | ESome arg_53 →
    temp_b_45 = arg_53;
  decl b_44 : A {y: bool; z: decimal};
  b_44 = temp_b_45;
  return S {"a": a_43, "b": b_44}
```

```catala-test-inline
$ catala python
# This file has been generated by the Catala compiler, do not edit!

from catala.runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum

class A:
    def __init__(self, y: bool, z: Decimal) -> None:
        self.y = y
        self.z = z

    def __eq__(self, other: object) -> bool:
        if isinstance(other, A):
            return (self.y == other.y and self.z == other.z)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "A(y={},z={})".format(self.y, self.z)

class S2:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2(a={})".format(self.a)

class S3:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3(a={})".format(self.a)

class S4:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4(a={})".format(self.a)

class S:
    def __init__(self, a: Decimal, b: A) -> None:
        self.a = a
        self.b = b

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S):
            return (self.a == other.a and self.b == other.b)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S(a={},b={})".format(self.a, self.b)

class SIn:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SIn):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SIn()".format()

class S2In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2In()".format()

class S3In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3In()".format()

class S4In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4In()".format()


glob1 = (decimal_of_string("44.12"))

def glob3(x:Money):
    return (decimal_of_money(x) + decimal_of_string("10."))

def glob4(x_1:Money, y:Decimal):
    return ((decimal_of_money(x_1) * y) + decimal_of_string("10."))

def glob5_aux():
    x_2 = (decimal_of_integer(integer_of_string("2")) *
        decimal_of_string("3."))
    y_1 = decimal_of_string("1000.")
    return (x_2 * y_1)

glob5 = (glob5_aux())

glob2 = (
    A(y = (glob1 >=
    decimal_of_string("30.")),
    z = (decimal_of_string("123.") *
    decimal_of_string("17.")))
)

def s2(s2_in:S2In):
    perhaps_none_arg = handle_exceptions([], [])
    if perhaps_none_arg is None:
        if True:
            temp_a = (glob3(money_of_cents_string("4400")) +
                decimal_of_string("100."))
        else:
            temp_a = None
    else:
        x_3 = perhaps_none_arg
        temp_a = x_3
    perhaps_none_arg_1 = handle_exceptions(
                             [SourcePosition(
                                  filename="tests/name_resolution/good/toplevel_defs.catala_en",
                                  start_line=53, start_column=24,
                                  end_line=53, end_column=43,
                                  law_headings=["Test toplevel function defs"]
                              )],
                             [temp_a]
                         )
    if perhaps_none_arg_1 is None:
        if False:
            temp_a_1 = None
        else:
            temp_a_1 = None
    else:
        x_4 = perhaps_none_arg_1
        temp_a_1 = x_4
    perhaps_none_arg_2 = temp_a_1
    if perhaps_none_arg_2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=50, start_column=10,
                          end_line=50, end_column=11,
                          law_headings=["Test toplevel function defs"]))
    else:
        arg = perhaps_none_arg_2
        temp_a_2 = arg
    a = temp_a_2
    return S2(a = a)

def s3(s3_in:S3In):
    perhaps_none_arg_3 = handle_exceptions([], [])
    if perhaps_none_arg_3 is None:
        if True:
            temp_a_3 = (decimal_of_string("50.") +
                glob4(money_of_cents_string("4400"),
                      decimal_of_string("55.")))
        else:
            temp_a_3 = None
    else:
        x_5 = perhaps_none_arg_3
        temp_a_3 = x_5
    perhaps_none_arg_4 = handle_exceptions(
                             [SourcePosition(
                                  filename="tests/name_resolution/good/toplevel_defs.catala_en",
                                  start_line=74, start_column=24,
                                  end_line=74, end_column=47,
                                  law_headings=["Test function def with two args"]
                              )],
                             [temp_a_3]
                         )
    if perhaps_none_arg_4 is None:
        if False:
            temp_a_4 = None
        else:
            temp_a_4 = None
    else:
        x_6 = perhaps_none_arg_4
        temp_a_4 = x_6
    perhaps_none_arg_5 = temp_a_4
    if perhaps_none_arg_5 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=71, start_column=10,
                          end_line=71, end_column=11,
                          law_headings=["Test function def with two args"]))
    else:
        arg_1 = perhaps_none_arg_5
        temp_a_5 = arg_1
    a_1 = temp_a_5
    return S3(a = a_1)

def s4(s4_in:S4In):
    perhaps_none_arg_6 = handle_exceptions([], [])
    if perhaps_none_arg_6 is None:
        if True:
            temp_a_6 = (glob5 + decimal_of_string("1."))
        else:
            temp_a_6 = None
    else:
        x_7 = perhaps_none_arg_6
        temp_a_6 = x_7
    perhaps_none_arg_7 = handle_exceptions(
                             [SourcePosition(
                                  filename="tests/name_resolution/good/toplevel_defs.catala_en",
                                  start_line=98, start_column=24,
                                  end_line=98, end_column=34,
                                  law_headings=["Test inline defs in toplevel defs"]
                              )],
                             [temp_a_6]
                         )
    if perhaps_none_arg_7 is None:
        if False:
            temp_a_7 = None
        else:
            temp_a_7 = None
    else:
        x_8 = perhaps_none_arg_7
        temp_a_7 = x_8
    perhaps_none_arg_8 = temp_a_7
    if perhaps_none_arg_8 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=95, start_column=10,
                          end_line=95, end_column=11,
                          law_headings=["Test inline defs in toplevel defs"]))
    else:
        arg_2 = perhaps_none_arg_8
        temp_a_8 = arg_2
    a_2 = temp_a_8
    return S4(a = a_2)

def s(s_in:SIn):
    perhaps_none_arg_9 = handle_exceptions([], [])
    if perhaps_none_arg_9 is None:
        if True:
            temp_a_9 = (glob1 * glob1)
        else:
            temp_a_9 = None
    else:
        x_9 = perhaps_none_arg_9
        temp_a_9 = x_9
    perhaps_none_arg_10 = handle_exceptions(
                              [SourcePosition(
                                   filename="tests/name_resolution/good/toplevel_defs.catala_en",
                                   start_line=18, start_column=24,
                                   end_line=18, end_column=37,
                                   law_headings=["Test basic toplevel values defs"]
                               )],
                              [temp_a_9]
                          )
    if perhaps_none_arg_10 is None:
        if False:
            temp_a_10 = None
        else:
            temp_a_10 = None
    else:
        x_10 = perhaps_none_arg_10
        temp_a_10 = x_10
    perhaps_none_arg_11 = temp_a_10
    if perhaps_none_arg_11 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=7, start_column=10,
                          end_line=7, end_column=11,
                          law_headings=["Test basic toplevel values defs"]))
    else:
        arg_3 = perhaps_none_arg_11
        temp_a_11 = arg_3
    a_3 = temp_a_11
    perhaps_none_arg_12 = handle_exceptions([], [])
    if perhaps_none_arg_12 is None:
        if True:
            temp_b = glob2
        else:
            temp_b = None
    else:
        x_11 = perhaps_none_arg_12
        temp_b = x_11
    perhaps_none_arg_13 = handle_exceptions(
                              [SourcePosition(
                                   filename="tests/name_resolution/good/toplevel_defs.catala_en",
                                   start_line=19, start_column=24,
                                   end_line=19, end_column=29,
                                   law_headings=["Test basic toplevel values defs"]
                               )],
                              [temp_b]
                          )
    if perhaps_none_arg_13 is None:
        if False:
            temp_b_1 = None
        else:
            temp_b_1 = None
    else:
        x_12 = perhaps_none_arg_13
        temp_b_1 = x_12
    perhaps_none_arg_14 = temp_b_1
    if perhaps_none_arg_14 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=8, start_column=10,
                          end_line=8, end_column=11,
                          law_headings=["Test basic toplevel values defs"]))
    else:
        arg_4 = perhaps_none_arg_14
        temp_b_2 = arg_4
    b = temp_b_2
    return S(a = a_3, b = b)
```
