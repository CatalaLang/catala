## Test basic toplevel values defs

```catala
declaration glob1 content decimal equals 44.12

#[test] declaration scope S:
  output a content decimal
  output b content A

declaration structure A:
   data y content boolean
   data z content decimal

declaration glob2 content A equals
    A { --y: glob1 >= 30.0 --z: 123.0 * 17.0 }

scope S:
   definition a equals glob1 * glob1
   definition b equals glob2
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala test-scope S
┌─[RESULT]─ S ─
│ a = 1,946.574,4
│ b = A { -- y: true -- z: 2,091.0 }
└─
```

## Test toplevel function defs

```catala
declaration glob3 content decimal
    depends on x content money
    equals decimal of x + 10.0

#[test] declaration scope S2:
  output a content decimal

scope S2:
   definition a equals glob3 of $44 + 100.0
```

```catala-test-cli
$ catala test-scope S2
┌─[RESULT]─ S2 ─
│ a = 154.0
└─
```

## Test function def with two args

```catala
declaration glob4 content decimal
    depends on x content money, y content decimal
    equals decimal of x * y + 10.0

#[test] declaration scope S3:
  output a content decimal

scope S3:
   definition a equals 50.0 + glob4 of $44, 55.0
```

```catala-test-cli
$ catala test-scope S3
┌─[RESULT]─ S3 ─
│ a = 2,480.0
└─
```

## Test inline defs in toplevel defs

(can't define inline functions yet)

```catala
declaration glob5 content decimal equals
    let x equals decimal of 2 * 3.0 in
    let y equals 1000.0 in
    x * y

#[test] declaration scope S4:
  output a content decimal

scope S4:
   definition a equals glob5 + 1.0
```

```catala-test-cli
$ catala test-scope S4
┌─[RESULT]─ S4 ─
│ a = 6,001.0
└─
```

```catala-test-cli
$ catala scalc
module stdlib_en = Stdlib_en
module date_en = Date_en
module date_internal = Date_internal
module period_en = Period_en
module period_internal = Period_internal
module money_en = Money_en
module integer_en = Integer_en
module decimal_en = Decimal_en
module list_en = List_en
module list_internal = List_internal
let glob1 = 44.12

let glob3 (x: money) = return to_rat x + 10.

let glob4 (x: money) (y: decimal) = return to_rat x * y + 10.

let glob5_init =
  decl x : decimal;
  x = to_rat 2 * 3.;
  decl y : decimal;
  y = 1000.;
  return x * y

let glob5 = glob5_init ()

let glob2 = A {"y": glob1 >= 30., "z": 123. * 17.}

let s2 (s2_in: #[test] S2_in) =
  decl a : decimal;
  init pos : SourcePosition = <toplevel_defs:53.24-44>;
  init a__1 : option (decimal, code_location) =
    Present (glob3 ¤44.00 + 100., pos);
  switch a__1:
  | Absent _ →
    init pos__1 : SourcePosition = <toplevel_defs:50.10-11>;
    fatal NoValue
  | Present arg →
    a = arg."0";
  return S2 {"a": a}

let s3 (s3_in: #[test] S3_in) =
  decl a : decimal;
  init pos : SourcePosition = <toplevel_defs:74.24-49>;
  init a__1 : option (decimal, code_location) =
    Present (50. + glob4 ¤44.00 55., pos);
  switch a__1:
  | Absent _ →
    init pos__1 : SourcePosition = <toplevel_defs:71.10-11>;
    fatal NoValue
  | Present arg →
    a = arg."0";
  return S3 {"a": a}

let s4 (s4_in: #[test] S4_in) =
  decl a : decimal;
  init pos : SourcePosition = <toplevel_defs:98.24-35>;
  init a__1 : option (decimal, code_location) = Present (glob5 + 1., pos);
  switch a__1:
  | Absent _ →
    init pos__1 : SourcePosition = <toplevel_defs:95.10-11>;
    fatal NoValue
  | Present arg →
    a = arg."0";
  return S4 {"a": a}

let s (s_in: #[test] S_in) =
  decl a : decimal;
  init pos : SourcePosition = <toplevel_defs:18.24-37>;
  init a__1 : option (decimal, code_location) = Present (glob1 * glob1, pos);
  switch a__1:
  | Absent _ →
    init pos__1 : SourcePosition = <toplevel_defs:7.10-11>;
    fatal NoValue
  | Present arg →
    a = arg."0";
  decl b : A;
  init pos__1 : SourcePosition = <toplevel_defs:19.24-29>;
  init b__1 : option (A, code_location) = Present (glob2, pos__1);
  switch b__1:
  | Absent _ →
    init pos__2 : SourcePosition = <toplevel_defs:8.10-11>;
    fatal NoValue
  | Present arg →
    b = arg."0";
  return S {"a": a, "b": b}
```

```catala-test-cli
$ catala python
# This file has been generated by the Catala compiler, do not edit!

from catala_runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum
from . import Stdlib_en as stdlib_en
from . import Date_en as date_en
from . import Period_en as period_en
from . import Money_en as money_en
from . import Integer_en as integer_en
from . import Decimal_en as decimal_en
from . import List_en as list_en

class A:
    def __init__(self, y: bool, z: Decimal) -> None:
        self.y = y
        self.z = z

    def __eq__(self, other: object) -> bool:
        if isinstance(other, A):
            return (self.y == other.y and self.z == other.z)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "A(y={},z={})".format(self.y, self.z)

class S2:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2(a={})".format(self.a)

class S3:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3(a={})".format(self.a)

class S4:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4(a={})".format(self.a)

class S:
    def __init__(self, a: Decimal, b: A) -> None:
        self.a = a
        self.b = b

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S):
            return (self.a == other.a and self.b == other.b)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S(a={},b={})".format(self.a, self.b)

class SIn:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SIn):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SIn()".format()

class S2In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2In()".format()

class S3In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3In()".format()

class S4In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4In()".format()


glob1 = (decimal_of_string("1103/25"))

def glob3(x:Money):
    return (decimal_of_money(x) + decimal_of_string("10"))

def glob4(x:Money, y:Decimal):
    return ((decimal_of_money(x) * y) + decimal_of_string("10"))

def glob5_init():
    x = ((decimal_of_integer(integer_of_string("2")) *
        decimal_of_string("3")))
    y = (decimal_of_string("1000"))
    return (x * y)

glob5 = (glob5_init())

glob2 = (
    A(y = (glob1 >=
    decimal_of_string("30")),
    z = (decimal_of_string("123") *
    decimal_of_string("17")))
)

def s2(s2_in:S2In):
    pos = (SourcePosition(
               filename="tests/name_resolution/good/toplevel_defs.catala_en",
               start_line=53, start_column=24, end_line=53, end_column=44,
               law_headings=["Test toplevel function defs"]))
    a__1 = (Option(((glob3(money_of_cents_string("4400")) +
        decimal_of_string("100")),
        pos)))
    if a__1.value is not None:
        a = (a__1.value[0])
    else:
        pos__1 = (SourcePosition(
                      filename="tests/name_resolution/good/toplevel_defs.catala_en",
                      start_line=50, start_column=10,
                      end_line=50, end_column=11,
                      law_headings=["Test toplevel function defs"]))
        raise NoValue(pos__1)
    return S2(a = a)

def s3(s3_in:S3In):
    pos = (SourcePosition(
               filename="tests/name_resolution/good/toplevel_defs.catala_en",
               start_line=74, start_column=24, end_line=74, end_column=49,
               law_headings=["Test function def with two args"]))
    a__1 = (Option(((decimal_of_string("50") +
        glob4(money_of_cents_string("4400"), decimal_of_string("55"))),
        pos)))
    if a__1.value is not None:
        a = (a__1.value[0])
    else:
        pos__1 = (SourcePosition(
                      filename="tests/name_resolution/good/toplevel_defs.catala_en",
                      start_line=71, start_column=10,
                      end_line=71, end_column=11,
                      law_headings=["Test function def with two args"]))
        raise NoValue(pos__1)
    return S3(a = a)

def s4(s4_in:S4In):
    pos = (SourcePosition(
               filename="tests/name_resolution/good/toplevel_defs.catala_en",
               start_line=98, start_column=24, end_line=98, end_column=35,
               law_headings=["Test inline defs in toplevel defs"]))
    a__1 = (Option(((glob5 + decimal_of_string("1")), pos)))
    if a__1.value is not None:
        a = (a__1.value[0])
    else:
        pos__1 = (SourcePosition(
                      filename="tests/name_resolution/good/toplevel_defs.catala_en",
                      start_line=95, start_column=10,
                      end_line=95, end_column=11,
                      law_headings=["Test inline defs in toplevel defs"]))
        raise NoValue(pos__1)
    return S4(a = a)

def s(s_in:SIn):
    pos = (SourcePosition(
               filename="tests/name_resolution/good/toplevel_defs.catala_en",
               start_line=18, start_column=24, end_line=18, end_column=37,
               law_headings=["Test basic toplevel values defs"]))
    a__1 = (Option(((glob1 * glob1), pos)))
    if a__1.value is not None:
        a = (a__1.value[0])
    else:
        pos__1 = (SourcePosition(
                      filename="tests/name_resolution/good/toplevel_defs.catala_en",
                      start_line=7, start_column=10,
                      end_line=7, end_column=11,
                      law_headings=["Test basic toplevel values defs"]))
        raise NoValue(pos__1)
    pos__1 = (SourcePosition(
                  filename="tests/name_resolution/good/toplevel_defs.catala_en",
                  start_line=19, start_column=24, end_line=19, end_column=29,
                  law_headings=["Test basic toplevel values defs"]))
    b__1 = (Option((glob2, pos__1)))
    if b__1.value is not None:
        b = (b__1.value[0])
    else:
        pos__2 = (SourcePosition(
                      filename="tests/name_resolution/good/toplevel_defs.catala_en",
                      start_line=8, start_column=10,
                      end_line=8, end_column=11,
                      law_headings=["Test basic toplevel values defs"]))
        raise NoValue(pos__2)
    return S(a = a, b = b)

# Automatic Catala tests
if __name__ == "__main__":
  s2_test = (s2(S2In()))
  print("\x1b[32m[RESULT]\x1b[m Scope S2 executed successfully.")
  s3_test = (s3(S3In()))
  print("\x1b[32m[RESULT]\x1b[m Scope S3 executed successfully.")
  s4_test = (s4(S4In()))
  print("\x1b[32m[RESULT]\x1b[m Scope S4 executed successfully.")
  s_test = (s(SIn()))
  print("\x1b[32m[RESULT]\x1b[m Scope S executed successfully.")
```
