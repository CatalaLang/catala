## Test basic toplevel values defs

```catala
declaration glob1 content decimal equals 44.12

declaration scope S:
  output a content decimal
  output b content A

declaration structure A:
   data y content boolean
   data z content decimal

declaration glob2 content A equals
    A { --y: glob1 >= 30. --z: 123. * 17. }

scope S:
   definition a equals glob1 * glob1
   definition b equals glob2
```



```catala-test-inline
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-inline
$ catala test-scope S
┌─[RESULT]─
│ a = 1,946.574,4
│ b = A { -- y: true -- z: 2,091.0 }
└─
```

## Test toplevel function defs

```catala
declaration glob3 content decimal
    depends on x content money
    equals decimal of x + 10.

declaration scope S2:
  output a content decimal

scope S2:
   definition a equals glob3 of $44 + 100.
```

```catala-test-inline
$ catala test-scope S2
┌─[RESULT]─
│ a = 154.0
└─
```

## Test function def with two args

```catala
declaration glob4 content decimal
    depends on x content money, y content decimal
    equals decimal of x * y + 10.

declaration scope S3:
  output a content decimal

scope S3:
   definition a equals 50. + glob4 of $44, 55.
```

```catala-test-inline
$ catala test-scope S3
┌─[RESULT]─
│ a = 2,480.0
└─
```

## Test inline defs in toplevel defs

(can't define inline functions yet)

```catala
declaration glob5 content decimal equals
    let x equals decimal of 2 * 3. in
    let y equals 1000. in
    x * y

declaration scope S4:
  output a content decimal

scope S4:
   definition a equals glob5 + 1.
```

```catala-test-inline
$ catala test-scope S4
┌─[RESULT]─
│ a = 6,001.0
└─
```

```catala-test-inline
$ catala scalc
let glob1_2 = 44.12

let glob3_2 (x_3: money) = return to_rat x_3 + 10.

let glob4_3 (x_4: money) (y_5: decimal) = return to_rat x_4 * y_5 + 10.

let glob5_aux_4 =
  decl x_7 : decimal;
  x_7 = to_rat 2 * 3.;
  decl y_8 : decimal;
  y_8 = 1000.;
  return x_7 * y_8

let glob5_6 = glob5_aux_4 ()

let glob2_9 = A {"y": glob1_2 >= 30., "z": 123. * 17.}

let S2_5 (S2_in_10: S2_in) =
  decl temp_a_12 : decimal;
  decl temp_a_13 : eoption decimal;
  decl temp_a_14 : eoption decimal;
  switch handle_exceptions []:
  | ENone __15 →
    if true:
      temp_a_14 = ESome glob3_2 ¤44.00 + 100.
      else:
        temp_a_14 = ENone ()
  | ESome x_16 →
    temp_a_14 = ESome x_16;
  switch handle_exceptions [temp_a_14]:
  | ENone __17 →
    if false:
      temp_a_13 = ENone ()
      else:
        temp_a_13 = ENone ()
  | ESome x_18 →
    temp_a_13 = ESome x_18;
  switch temp_a_13:
  | ENone __19 →
    fatal NoValue
  | ESome arg_20 →
    temp_a_12 = arg_20;
  decl a_11 : decimal;
  a_11 = temp_a_12;
  return S2 {"a": a_11}

let S3_6 (S3_in_21: S3_in) =
  decl temp_a_23 : decimal;
  decl temp_a_24 : eoption decimal;
  decl temp_a_25 : eoption decimal;
  switch handle_exceptions []:
  | ENone __26 →
    if true:
      temp_a_25 = ESome 50. + glob4_3 ¤44.00 55.
      else:
        temp_a_25 = ENone ()
  | ESome x_27 →
    temp_a_25 = ESome x_27;
  switch handle_exceptions [temp_a_25]:
  | ENone __28 →
    if false:
      temp_a_24 = ENone ()
      else:
        temp_a_24 = ENone ()
  | ESome x_29 →
    temp_a_24 = ESome x_29;
  switch temp_a_24:
  | ENone __30 →
    fatal NoValue
  | ESome arg_31 →
    temp_a_23 = arg_31;
  decl a_22 : decimal;
  a_22 = temp_a_23;
  return S3 {"a": a_22}

let S4_7 (S4_in_32: S4_in) =
  decl temp_a_34 : decimal;
  decl temp_a_35 : eoption decimal;
  decl temp_a_36 : eoption decimal;
  switch handle_exceptions []:
  | ENone __37 →
    if true:
      temp_a_36 = ESome glob5_6 + 1.
      else:
        temp_a_36 = ENone ()
  | ESome x_38 →
    temp_a_36 = ESome x_38;
  switch handle_exceptions [temp_a_36]:
  | ENone __39 →
    if false:
      temp_a_35 = ENone ()
      else:
        temp_a_35 = ENone ()
  | ESome x_40 →
    temp_a_35 = ESome x_40;
  switch temp_a_35:
  | ENone __41 →
    fatal NoValue
  | ESome arg_42 →
    temp_a_34 = arg_42;
  decl a_33 : decimal;
  a_33 = temp_a_34;
  return S4 {"a": a_33}

let S_8 (S_in_43: S_in) =
  decl temp_a_55 : decimal;
  decl temp_a_56 : eoption decimal;
  decl temp_a_57 : eoption decimal;
  switch handle_exceptions []:
  | ENone __58 →
    if true:
      temp_a_57 = ESome glob1_2 * glob1_2
      else:
        temp_a_57 = ENone ()
  | ESome x_59 →
    temp_a_57 = ESome x_59;
  switch handle_exceptions [temp_a_57]:
  | ENone __60 →
    if false:
      temp_a_56 = ENone ()
      else:
        temp_a_56 = ENone ()
  | ESome x_61 →
    temp_a_56 = ESome x_61;
  switch temp_a_56:
  | ENone __62 →
    fatal NoValue
  | ESome arg_63 →
    temp_a_55 = arg_63;
  decl a_44 : decimal;
  a_44 = temp_a_55;
  decl temp_b_46 : A {y: bool; z: decimal};
  decl temp_b_47 : eoption A {y: bool; z: decimal};
  decl temp_b_48 : eoption A {y: bool; z: decimal};
  switch handle_exceptions []:
  | ENone __49 →
    if true:
      temp_b_48 = ESome glob2_9
      else:
        temp_b_48 = ENone ()
  | ESome x_50 →
    temp_b_48 = ESome x_50;
  switch handle_exceptions [temp_b_48]:
  | ENone __51 →
    if false:
      temp_b_47 = ENone ()
      else:
        temp_b_47 = ENone ()
  | ESome x_52 →
    temp_b_47 = ESome x_52;
  switch temp_b_47:
  | ENone __53 →
    fatal NoValue
  | ESome arg_54 →
    temp_b_46 = arg_54;
  decl b_45 : A {y: bool; z: decimal};
  b_45 = temp_b_46;
  return S {"a": a_44, "b": b_45}
```

```catala-test-inline
$ catala python
# This file has been generated by the Catala compiler, do not edit!

from catala.runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum

class A:
    def __init__(self, y: bool, z: Decimal) -> None:
        self.y = y
        self.z = z

    def __eq__(self, other: object) -> bool:
        if isinstance(other, A):
            return (self.y == other.y and self.z == other.z)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "A(y={},z={})".format(self.y, self.z)

class S2:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2(a={})".format(self.a)

class S3:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3(a={})".format(self.a)

class S4:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4(a={})".format(self.a)

class S:
    def __init__(self, a: Decimal, b: A) -> None:
        self.a = a
        self.b = b

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S):
            return (self.a == other.a and self.b == other.b)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S(a={},b={})".format(self.a, self.b)

class SIn:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SIn):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SIn()".format()

class S2In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2In()".format()

class S3In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3In()".format()

class S4In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4In()".format()


glob1 = (decimal_of_string("44.12"))

def glob3(x:Money):
    return (decimal_of_money(x) + decimal_of_string("10."))

def glob4(x_1:Money, y:Decimal):
    return ((decimal_of_money(x_1) * y) + decimal_of_string("10."))

def glob5_aux():
    x_2 = (decimal_of_integer(integer_of_string("2")) *
        decimal_of_string("3."))
    y_1 = decimal_of_string("1000.")
    return (x_2 * y_1)

glob5 = (glob5_aux())

glob2 = (
    A(y = (glob1 >=
    decimal_of_string("30.")),
    z = (decimal_of_string("123.") *
    decimal_of_string("17.")))
    )

def s2(s2_in:S2In):
    perhaps_none_arg = handle_exceptions([])
    if perhaps_none_arg is None:
        if True:
            temp_a = (glob3(money_of_cents_string("4400")) +
                decimal_of_string("100."))
        else:
            temp_a = None
    else:
        x_3 = perhaps_none_arg
        temp_a = x_3
    perhaps_none_arg_1 = handle_exceptions([temp_a])
    if perhaps_none_arg_1 is None:
        if False:
            temp_a_1 = None
        else:
            temp_a_1 = None
    else:
        x_4 = perhaps_none_arg_1
        temp_a_1 = x_4
    perhaps_none_arg_2 = temp_a_1
    if perhaps_none_arg_2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=50, start_column=10,
                          end_line=50, end_column=11,
                          law_headings=["Test toplevel function defs"]))
    else:
        arg = perhaps_none_arg_2
        temp_a_2 = arg
    a = temp_a_2
    return S2(a = a)

def s3(s3_in:S3In):
    perhaps_none_arg_3 = handle_exceptions([])
    if perhaps_none_arg_3 is None:
        if True:
            temp_a_3 = (decimal_of_string("50.") +
                glob4(money_of_cents_string("4400"),
                      decimal_of_string("55.")))
        else:
            temp_a_3 = None
    else:
        x_5 = perhaps_none_arg_3
        temp_a_3 = x_5
    perhaps_none_arg_4 = handle_exceptions([temp_a_3])
    if perhaps_none_arg_4 is None:
        if False:
            temp_a_4 = None
        else:
            temp_a_4 = None
    else:
        x_6 = perhaps_none_arg_4
        temp_a_4 = x_6
    perhaps_none_arg_5 = temp_a_4
    if perhaps_none_arg_5 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=71, start_column=10,
                          end_line=71, end_column=11,
                          law_headings=["Test function def with two args"]))
    else:
        arg_1 = perhaps_none_arg_5
        temp_a_5 = arg_1
    a_1 = temp_a_5
    return S3(a = a_1)

def s4(s4_in:S4In):
    perhaps_none_arg_6 = handle_exceptions([])
    if perhaps_none_arg_6 is None:
        if True:
            temp_a_6 = (glob5 + decimal_of_string("1."))
        else:
            temp_a_6 = None
    else:
        x_7 = perhaps_none_arg_6
        temp_a_6 = x_7
    perhaps_none_arg_7 = handle_exceptions([temp_a_6])
    if perhaps_none_arg_7 is None:
        if False:
            temp_a_7 = None
        else:
            temp_a_7 = None
    else:
        x_8 = perhaps_none_arg_7
        temp_a_7 = x_8
    perhaps_none_arg_8 = temp_a_7
    if perhaps_none_arg_8 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=95, start_column=10,
                          end_line=95, end_column=11,
                          law_headings=["Test inline defs in toplevel defs"]))
    else:
        arg_2 = perhaps_none_arg_8
        temp_a_8 = arg_2
    a_2 = temp_a_8
    return S4(a = a_2)

def s(s_in:SIn):
    perhaps_none_arg_9 = handle_exceptions([])
    if perhaps_none_arg_9 is None:
        if True:
            temp_a_9 = (glob1 * glob1)
        else:
            temp_a_9 = None
    else:
        x_9 = perhaps_none_arg_9
        temp_a_9 = x_9
    perhaps_none_arg_10 = handle_exceptions([temp_a_9])
    if perhaps_none_arg_10 is None:
        if False:
            temp_a_10 = None
        else:
            temp_a_10 = None
    else:
        x_10 = perhaps_none_arg_10
        temp_a_10 = x_10
    perhaps_none_arg_11 = temp_a_10
    if perhaps_none_arg_11 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=7, start_column=10,
                          end_line=7, end_column=11,
                          law_headings=["Test basic toplevel values defs"]))
    else:
        arg_3 = perhaps_none_arg_11
        temp_a_11 = arg_3
    a_3 = temp_a_11
    perhaps_none_arg_12 = handle_exceptions([])
    if perhaps_none_arg_12 is None:
        if True:
            temp_b = glob2
        else:
            temp_b = None
    else:
        x_11 = perhaps_none_arg_12
        temp_b = x_11
    perhaps_none_arg_13 = handle_exceptions([temp_b])
    if perhaps_none_arg_13 is None:
        if False:
            temp_b_1 = None
        else:
            temp_b_1 = None
    else:
        x_12 = perhaps_none_arg_13
        temp_b_1 = x_12
    perhaps_none_arg_14 = temp_b_1
    if perhaps_none_arg_14 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=8, start_column=10,
                          end_line=8, end_column=11,
                          law_headings=["Test basic toplevel values defs"]))
    else:
        arg_4 = perhaps_none_arg_14
        temp_b_2 = arg_4
    b = temp_b_2
    return S(a = a_3, b = b)
```
