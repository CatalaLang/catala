## Test basic toplevel values defs

```catala
declaration glob1 content decimal equals 44.12

declaration scope S:
  output a content decimal
  output b content A

declaration structure A:
   data y content boolean
   data z content decimal

declaration glob2 content A equals
    A { --y: glob1 >= 30. --z: 123. * 17. }

scope S:
   definition a equals glob1 * glob1
   definition b equals glob2
```



```catala-test-inline
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-inline
$ catala test-scope S
┌─[RESULT]─
│ a = 1,946.574,4
│ b = A { -- y: true -- z: 2,091.0 }
└─
```

## Test toplevel function defs

```catala
declaration glob3 content decimal
    depends on x content money
    equals decimal of x + 10.

declaration scope S2:
  output a content decimal

scope S2:
   definition a equals glob3 of $44 + 100.
```

```catala-test-inline
$ catala test-scope S2
┌─[RESULT]─
│ a = 154.0
└─
```

## Test function def with two args

```catala
declaration glob4 content decimal
    depends on x content money, y content decimal
    equals decimal of x * y + 10.

declaration scope S3:
  output a content decimal

scope S3:
   definition a equals 50. + glob4 of $44, 55.
```

```catala-test-inline
$ catala test-scope S3
┌─[RESULT]─
│ a = 2,480.0
└─
```

## Test inline defs in toplevel defs

(can't define inline functions yet)

```catala
declaration glob5 content decimal equals
    let x equals decimal of 2 * 3. in
    let y equals 1000. in
    x * y

declaration scope S4:
  output a content decimal

scope S4:
   definition a equals glob5 + 1.
```

```catala-test-inline
$ catala test-scope S4
┌─[RESULT]─
│ a = 6,001.0
└─
```

```catala-test-inline
$ catala scalc
let glob1 = 44.12

let glob3 (x: money) = return to_rat x + 10.

let glob4 (x: money) (y: decimal) = return to_rat x * y + 10.

let glob5_init =
  decl x : decimal;
  x = to_rat 2 * 3.;
  decl y : decimal;
  y = 1000.;
  return x * y

let glob5 = glob5_init ()

let glob2 = A {"y": glob1 >= 30., "z": 123. * 17.}

let S2 (S2_in: S2_in) =
  decl a1 : decimal;
  a2 : option decimal = ESome glob3 ¤44.00 + 100.;
  switch a2:
  | ENone _ →
    fatal NoValue
  | ESome arg →
    a1 = arg;
  decl a : decimal;
  a = a1;
  return S2 {"a": a}

let S3 (S3_in: S3_in) =
  decl a1 : decimal;
  a2 : option decimal = ESome 50. + glob4 ¤44.00 55.;
  switch a2:
  | ENone _ →
    fatal NoValue
  | ESome arg →
    a1 = arg;
  decl a : decimal;
  a = a1;
  return S3 {"a": a}

let S4 (S4_in: S4_in) =
  decl a1 : decimal;
  a2 : option decimal = ESome glob5 + 1.;
  switch a2:
  | ENone _ →
    fatal NoValue
  | ESome arg →
    a1 = arg;
  decl a : decimal;
  a = a1;
  return S4 {"a": a}

let S (S_in: S_in) =
  decl a1 : decimal;
  a2 : option decimal = ESome glob1 * glob1;
  switch a2:
  | ENone _ →
    fatal NoValue
  | ESome arg →
    a1 = arg;
  decl a : decimal;
  a = a1;
  decl b1 : A {y: bool; z: decimal};
  b2 : option A {y: bool; z: decimal} = ESome glob2;
  switch b2:
  | ENone _ →
    fatal NoValue
  | ESome arg →
    b1 = arg;
  decl b : A {y: bool; z: decimal};
  b = b1;
  return S {"a": a, "b": b}
```

```catala-test-inline
$ catala python
# This file has been generated by the Catala compiler, do not edit!

from catala.runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum

class A:
    def __init__(self, y: bool, z: Decimal) -> None:
        self.y = y
        self.z = z

    def __eq__(self, other: object) -> bool:
        if isinstance(other, A):
            return (self.y == other.y and self.z == other.z)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "A(y={},z={})".format(self.y, self.z)

class S2:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2(a={})".format(self.a)

class S3:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3(a={})".format(self.a)

class S4:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4(a={})".format(self.a)

class S:
    def __init__(self, a: Decimal, b: A) -> None:
        self.a = a
        self.b = b

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S):
            return (self.a == other.a and self.b == other.b)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S(a={},b={})".format(self.a, self.b)

class SIn:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SIn):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SIn()".format()

class S2In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2In()".format()

class S3In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3In()".format()

class S4In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4In()".format()


glob1 = (decimal_of_string("44.12"))

def glob3(x:Money):
    return (decimal_of_money(x) + decimal_of_string("10."))

def glob4(x:Money, y:Decimal):
    return ((decimal_of_money(x) * y) + decimal_of_string("10."))

def glob5_init():
    x = ((decimal_of_integer(integer_of_string("2")) *
        decimal_of_string("3.")))
    y = (decimal_of_string("1000."))
    return (x * y)

glob5 = (glob5_init())

glob6 = (
    A(y = (glob1 >=
    decimal_of_string("30.")),
    z = (decimal_of_string("123.") *
    decimal_of_string("17.")))
)

def s2(s2_in:S2In):
    a2 = ((glob3(money_of_cents_string("4400")) + decimal_of_string("100.")))
    if a2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=50, start_column=10,
                          end_line=50, end_column=11,
                          law_headings=["Test toplevel function defs"]))
    else:
        arg = a2
        a1 = (arg)
    a = (a1)
    return S2(a = a)

def s3(s3_in:S3In):
    a2 = ((decimal_of_string("50.") +
        glob4(money_of_cents_string("4400"), decimal_of_string("55."))))
    if a2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=71, start_column=10,
                          end_line=71, end_column=11,
                          law_headings=["Test function def with two args"]))
    else:
        arg = a2
        a1 = (arg)
    a = (a1)
    return S3(a = a)

def s4(s4_in:S4In):
    a2 = ((glob5 + decimal_of_string("1.")))
    if a2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=95, start_column=10,
                          end_line=95, end_column=11,
                          law_headings=["Test inline defs in toplevel defs"]))
    else:
        arg = a2
        a1 = (arg)
    a = (a1)
    return S4(a = a)

def s5(s_in:SIn):
    a2 = ((glob1 * glob1))
    if a2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=7, start_column=10,
                          end_line=7, end_column=11,
                          law_headings=["Test basic toplevel values defs"]))
    else:
        arg = a2
        a1 = (arg)
    a = (a1)
    b2 = (glob6)
    if b2 is None:
        raise NoValue(SourcePosition(
                          filename="tests/name_resolution/good/toplevel_defs.catala_en",
                          start_line=8, start_column=10,
                          end_line=8, end_column=11,
                          law_headings=["Test basic toplevel values defs"]))
    else:
        arg = b2
        b1 = (arg)
    b = (b1)
    return S(a = a, b = b)
```
