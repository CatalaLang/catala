## Article

> Module Let_in2

```catala
#[test] declaration scope S:
  context output a content boolean

scope S:
   definition a equals
    let a equals false in
    let a equals a or true in
    a
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala test-scope S
┌─[RESULT]─ S ─
│ a = true
└─
```

```catala-test-cli
$ catala ocaml
(** This file has been generated by the Catala compiler, do not edit! *)

[@@@ocaml.warning "-4-26-27-32-33-34-37-41-42-69"]

open Catala_runtime


let () =
  match Catala_runtime.check_module "Stdlib_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Stdlib_en, it may need recompiling"
module Stdlib_en = Stdlib_en
let () =
  match Catala_runtime.check_module "Date_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Date_en, it may need recompiling"
module Date_en = Date_en
let () =
  match Catala_runtime.check_module "Period_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Period_en, it may need recompiling"
module Period_en = Period_en
let () =
  match Catala_runtime.check_module "Money_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Money_en, it may need recompiling"
module Money_en = Money_en
let () =
  match Catala_runtime.check_module "Integer_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Integer_en, it may need recompiling"
module Integer_en = Integer_en
let () =
  match Catala_runtime.check_module "Decimal_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Decimal_en, it may need recompiling"
module Decimal_en = Decimal_en

module S = struct
  type t = {a: bool}
end

module S_in = struct
  type t = {a_in: ((bool * code_location)) Optional.t}
end


(* Scope S *)
let s : S_in.t -> S.t = fun s_in ->
  let a: ((bool * code_location)) Optional.t = s_in.S_in.a_in in
  let a__1: bool =
    match
      (match a
       with
       | Optional.Absent _ ->
           (Optional.Present
              ((match
                  (Optional.Present
                     ((let a__2 : bool = false in
                       (let a__3 : bool = (a__2 || true) in a__3)),
                       ({filename="tests/name_resolution/good/let_in2.catala_en";
                         start_line=11; start_column=5;
                         end_line=13; end_column=6; law_headings=["Article"]})))
                with
                | Optional.Absent _ -> (raise
                    (Error (NoValue, [{filename="tests/name_resolution/good/let_in2.catala_en";
                                       start_line=7; start_column=18;
                                       end_line=7; end_column=19;
                                       law_headings=["Article"]}])))
                | Optional.Present arg -> (let x, _ = arg in x)),
                ({filename="tests/name_resolution/good/let_in2.catala_en";
                  start_line=7; start_column=18; end_line=7; end_column=19;
                  law_headings=["Article"]})))
       | Optional.Present x -> (Optional.Present x))
    with
    | Optional.Absent _ -> (raise
        (Error (NoValue, [{filename="tests/name_resolution/good/let_in2.catala_en";
                           start_line=7; start_column=18;
                           end_line=7; end_column=19;
                           law_headings=["Article"]}])))
    | Optional.Present arg -> (let x, _ = arg in x) in
  {S.a = a__1}

let () =
  Catala_runtime.register_module "Let_in2"
    [ "S", Obj.repr s ]
    "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
```

```catala
#[test] declaration scope Stest:
  output s scope S
```
