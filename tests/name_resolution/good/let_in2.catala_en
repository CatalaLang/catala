## Article

> Module Let_in2

```catala
declaration scope S:
  context output a content boolean

scope S:
   definition a equals
    let a equals false in
    let a equals a or true in
    a
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] All invariant checks passed
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala test-scope S
[RESULT] Computation successful! Results:
[RESULT] a = true
```

```catala-test-inline
$ catala ocaml

(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module S = struct
  type t = {a: bool}
end

module S_in = struct
  type t = {a_in: unit -> bool}
end


let s (s_in: S_in.t) : S.t =
  let a_: unit -> bool = s_in.S_in.a_in in
  let a_: bool =
    try
      (handle_default
         {filename="tests/name_resolution/good/let_in2.catala_en";
          start_line=7; start_column=18; end_line=7; end_column=19;
          law_headings=["Article"]} ([|(fun (_: unit) -> a_ ())|])
         (fun (_: unit) -> true)
         (fun (_: unit) ->
            try
              (handle_default
                 {filename="tests/name_resolution/good/let_in2.catala_en";
                  start_line=7; start_column=18; end_line=7; end_column=19;
                  law_headings=["Article"]}
                 ([|(fun (_: unit) ->
                       handle_default
                         {filename="tests/name_resolution/good/let_in2.catala_en";
                          start_line=7; start_column=18;
                          end_line=7; end_column=19;
                          law_headings=["Article"]} ([||])
                         (fun (_: unit) -> true)
                         (fun (_: unit) -> (let a_ : bool = false
                            in
                            (let a_ : bool = (o_or a_ true) in
                            a_))))|]) (fun (_: unit) -> false)
                 (fun (_: unit) -> raise Empty))
            with
            Empty -> (raise
              (Runtime_ocaml.Runtime.Error (NoValue, {filename="tests/name_resolution/good/let_in2.catala_en";
                                                      start_line=7; start_column=18;
                                                      end_line=7; end_column=19;
                                                      law_headings=["Article"]})))))
    with
    Empty -> (raise
      (Runtime_ocaml.Runtime.Error (NoValue, {filename="tests/name_resolution/good/let_in2.catala_en";
                                              start_line=7; start_column=18;
                                              end_line=7; end_column=19;
                                              law_headings=["Article"]}))) in
  {S.a = a_}

let () =
  Runtime_ocaml.Runtime.register_module "Let_in2"
    [ "S", Obj.repr s ]
    "todo-module-hash"
```
