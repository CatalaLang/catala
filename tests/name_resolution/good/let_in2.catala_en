## Article

> Module Let_in2

```catala
declaration scope S:
  context output a content boolean

scope S:
   definition a equals
    let a equals false in
    let a equals a or true in
    a
```



```catala-test-inline
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-inline
$ catala test-scope S
┌─[RESULT]─
│ a = true
└─
```

```catala-test-inline
$ catala ocaml
(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module S = struct
  type t = {a: bool}
end

module S_in = struct
  type t = {a_in: unit -> (bool) Eoption.t}
end


let s (s_in: S_in.t) : S.t =
  let a: unit -> (bool) Eoption.t = s_in.S_in.a_in in
  let a1: bool =
    match
      (match (a ())
       with
       | Eoption.ENone _ ->
           (Eoption.ESome
              (match
                 (Eoption.ESome (let a1 : bool = false
                    in
                    (let a2 : bool = (o_or a1 true) in
                    a2)))
               with
               | Eoption.ENone _1 -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/name_resolution/good/let_in2.catala_en";
                                                            start_line=7; start_column=18;
                                                            end_line=7; end_column=19;
                                                            law_headings=
                                                            ["Article"]}])))
               | Eoption.ESome arg -> arg))
       | Eoption.ESome x -> (Eoption.ESome x))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/name_resolution/good/let_in2.catala_en";
                                                 start_line=7; start_column=18;
                                                 end_line=7; end_column=19;
                                                 law_headings=["Article"]}])))
    | Eoption.ESome arg -> arg in
  {S.a = a1}

let () =
  Runtime_ocaml.Runtime.register_module "Let_in2"
    [ "S", Obj.repr s ]
    "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
```
