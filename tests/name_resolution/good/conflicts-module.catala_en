> Module Conflicts-module

```catala-metadata
declaration scope Closure_scøppe:
  output scoppe condition

declaration scope Closure_scoppe__1:
  output scoppe condition
```

```catala-test-cli
$ catala ocaml --closure-conversion -O
(** This file has been generated by the Catala compiler, do not edit! *)

open Catala_runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


let () =
  match Catala_runtime.check_module "Stdlib_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Stdlib_en, it may need recompiling"
module Stdlib_en = Stdlib_en
let () =
  match Catala_runtime.check_module "Date_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Date_en, it may need recompiling"
module Date_en = Date_en

module Closure_scoppe = struct
  type t = {scoppe: bool}
end

module Closure_scoppe__1 = struct
  type t = {scoppe: bool}
end

module Closure_scoppe_in = struct
  type t = unit
end

module Closure_scoppe__1_in = struct
  type t = unit
end


(* Scope Closure_scøppe *)
let closure_scoppe : Closure_scoppe_in.t -> Closure_scoppe.t = fun _ ->
  let scoppe: bool = false in
  {Closure_scoppe.scoppe = scoppe}

(* Scope Closure_scoppe__1 *)
let closure_scoppe__1 : Closure_scoppe__1_in.t -> Closure_scoppe__1.t =
  fun _ ->
  let scoppe: bool = false in
  {Closure_scoppe__1.scoppe = scoppe}

let () =
  Catala_runtime.register_module "Conflicts-module"
    [ "Closure_sc\195\184ppe",
        Obj.repr (let closure_scoppe__2 :
                    Obj.t -> Closure_scoppe_in.t -> Closure_scoppe.t =
                    (fun (_: Obj.t) (x0: Closure_scoppe_in.t) ->
                       closure_scoppe x0)
                 in
                 (closure_scoppe__2, (o_toclosureenv ())));
      "Closure_scoppe__1",
        Obj.repr (let closure_scoppe__2 :
                    Obj.t -> Closure_scoppe__1_in.t -> Closure_scoppe__1.t =
                    (fun (_: Obj.t) (x0: Closure_scoppe__1_in.t) ->
                       closure_scoppe__1 x0)
                 in
                 (closure_scoppe__2, (o_toclosureenv ()))) ]
    "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
```


```catala
scope Closure_scøppe:
  rule scoppe under condition for all x among [ 5; 6; 7 ] we have x > 2
  consequence fulfilled
```

Here we crafted the rule so that a closure will be lifted with a name that
clashes with the scope names ; but such clashes could also happen from other
definitions of private scopes or toplevel definitions.

The addition of this rule should *not* lead to a change in the names of the
symbols that will be exported: the final `register_module` should be the same
below and above (otherwise, users of the module would end up calling the wrong
function!)


```catala-test-cli
$ catala ocaml --closure-conversion -O
(** This file has been generated by the Catala compiler, do not edit! *)

open Catala_runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


let () =
  match Catala_runtime.check_module "Stdlib_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Stdlib_en, it may need recompiling"
module Stdlib_en = Stdlib_en
let () =
  match Catala_runtime.check_module "Date_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Date_en, it may need recompiling"
module Date_en = Date_en

module Closure_scoppe = struct
  type t = {scoppe: bool}
end

module Closure_scoppe__1 = struct
  type t = {scoppe: bool}
end

module Closure_scoppe_in = struct
  type t = unit
end

module Closure_scoppe__1_in = struct
  type t = unit
end


(* Toplevel def closure_scoppe *)
let closure_scoppe__2 : Obj.t -> bool -> integer -> bool =
  fun (_: Obj.t) (acc: bool) (x: integer) ->
    acc && (o_gt_int_int x (integer_of_string "2"))

(* Scope Closure_scøppe *)
let closure_scoppe : Closure_scoppe_in.t -> Closure_scoppe.t = fun _ ->
  let scoppe: bool =
     if
      (o_fold (closure_scoppe__2, (o_toclosureenv ())) true
         ([|(integer_of_string "5"); (integer_of_string "6");
            (integer_of_string "7")|])) then
      (let x, _
        = (true,
            ({filename="tests/name_resolution/good/conflicts-module.catala_en";
              start_line=84; start_column=14; end_line=84; end_column=24;
              law_headings=[]})) in x) else
      (let x, _
        = (false,
            ({filename="tests/name_resolution/good/conflicts-module.catala_en";
              start_line=5; start_column=10; end_line=5; end_column=16;
              law_headings=[]})) in x) in
  {Closure_scoppe.scoppe = scoppe}

(* Scope Closure_scoppe__1 *)
let closure_scoppe__1 : Closure_scoppe__1_in.t -> Closure_scoppe__1.t =
  fun _ ->
  let scoppe: bool = false in
  {Closure_scoppe__1.scoppe = scoppe}

let () =
  Catala_runtime.register_module "Conflicts-module"
    [ "Closure_sc\195\184ppe",
        Obj.repr (let closure_scoppe__3 :
                    Obj.t -> Closure_scoppe_in.t -> Closure_scoppe.t =
                    (fun (_: Obj.t) (x0: Closure_scoppe_in.t) ->
                       closure_scoppe x0)
                 in
                 (closure_scoppe__3, (o_toclosureenv ())));
      "Closure_scoppe__1",
        Obj.repr (let closure_scoppe__3 :
                    Obj.t -> Closure_scoppe__1_in.t -> Closure_scoppe__1.t =
                    (fun (_: Obj.t) (x0: Closure_scoppe__1_in.t) ->
                       closure_scoppe__1 x0)
                 in
                 (closure_scoppe__3, (o_toclosureenv ()))) ]
    "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
```
