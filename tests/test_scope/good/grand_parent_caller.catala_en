## Article

```catala
declaration scope A:
  context output x content integer

declaration scope B:
  a scope A
  context output y1 content integer
  context output y2 content integer

declaration scope C:
  b scope B
  context output z1 content integer
  context output z2 content integer


scope A:
  definition x equals 0

scope B:
  definition a.x equals y1
  definition y1 equals 1
  definition y2 equals a.x

scope C:
  definition b.y1 equals z1
  definition z1 equals 2
  definition z2 equals b.y2
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [126/126]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [7/7]
[RESULT] Invariant no_return_a_function checked. result: [3/3]
[RESULT] Invariant no_partial_evaluation checked. result: [7/7]
[RESULT] Invariant default_no_arrow checked. result: [19/19]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] x = 0
```

```catala-test-inline
$ catala Interpret -s B
[RESULT] Computation successful! Results:
[RESULT] y1 = 1
[RESULT] y2 = 1
```

```catala-test-inline
$ catala Interpret -s C
[RESULT] Computation successful! Results:
[RESULT] z1 = 2
[RESULT] z2 = 2
```
```catala-test-inline
$ catala Interpret_Lcalc -s A --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] x = 0
```
```catala-test-inline
$ catala Interpret_Lcalc -s B --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] y1 = 1
[RESULT] y2 = 1
```
```catala-test-inline
$ catala Interpret_Lcalc -s C --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] z1 = 2
[RESULT] z2 = 2
```
