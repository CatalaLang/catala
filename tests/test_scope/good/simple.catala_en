## Test

```catala
declaration scope Foo:
  output bar content integer

scope Foo:
  definition bar equals 0
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [10/10]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [2/2]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Lcalc -s Foo
let scope Foo (Foo_in: Foo_in): Foo {bar: integer} =
  let set bar : integer =
    try
      handle_default
        [
          λ (_: unit) →
          handle_default [] (λ (_1: unit) → true) (λ (_1: unit) → 0)
        ]
        (λ (_: unit) → false)
        (λ (_: unit) → raise EmptyError)
    with EmptyError -> raise NoValueProvided
  in
  return { Foo bar = bar; }
```
