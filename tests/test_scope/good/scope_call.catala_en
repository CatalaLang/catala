```catala
declaration scope SubFoo:
  input x content integer
  input y content integer
  output z1 content integer
  output z2 content integer

declaration scope Foo:
  output example content integer

scope SubFoo:
  definition z1 equals x + y
  definition z2 equals x - y

scope Foo:
  definition example equals
    if true or false then
      let results_foo equals output of SubFoo with { -- x: 1 -- y: 2 } in
      results_foo.z1 + 1 * (output of SubFoo with { -- x: 10 -- y: 20 }).z2
    else 0
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [90/90]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [12/12]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [5/5]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [12/12]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [6/6]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala interpret -s Foo
[RESULT] Computation successful! Results:
[RESULT] example = -7
```
