## Test

```catala
declaration scope Foo2:
  output bar content integer
```



```catala-test-inline
$ catala Typecheck --check_invariants
[WARNING] In scope "Foo2", the variable "bar" is declared but never defined; did you forget something?

┌─⯈ tests/test_scope/good/nothing.catala_en:5.10-5.13:
└─┐
5 │   output bar content integer
  │          ‾‾‾
  └─ Test
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [6/6]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [1/1]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Scalc -s Foo2 -O -t
[WARNING] In scope "Foo2", the variable "bar" is declared but never defined; did you forget something?

┌─⯈ tests/test_scope/good/nothing.catala_en:5.10-5.13:
└─┐
5 │   output bar content integer
  │          ‾‾‾
  └─ Test
let Foo2_3 (Foo2_in_2: Foo2_in) =
  decl temp_bar_4 : any;
  temp_bar_4 = dead_value_1;
  raise NoValueProvided;
  decl bar_3 : integer;
  bar_3 = temp_bar_4;
  return Foo2 {"bar": bar_3}

```
