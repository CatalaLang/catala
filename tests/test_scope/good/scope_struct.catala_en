```catala
declaration scope SubFoo:
  input x content integer
  input y content integer
  output z1 content integer
  output z2 content integer

declaration scope Foo:
  output example content SubFoo

scope SubFoo:
  definition z1 equals x + y
  definition z2 equals x - y

scope Foo:
  definition example equals
      let results_foo equals output of SubFoo with { -- x: 1 -- y: 2 } in
      SubFoo {
        -- z1: results_foo.z1 + 1
        -- z2: results_foo.z2 + 1
      }
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [65/65]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [4/4]
[RESULT] Invariant no_return_a_function checked. result: [3/3]
[RESULT] Invariant no_partial_evaluation checked. result: [4/4]
[RESULT] Invariant default_no_arrow checked. result: [6/6]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala interpret -s Foo
[RESULT] Computation successful! Results:
[RESULT] example = SubFoo { -- z1: 4 -- z2: 0 }
```
