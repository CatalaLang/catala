```catala
declaration scope HousingComputation:
  output f content integer depends on x content integer
  output result content integer

scope HousingComputation:
  definition f of x equals (output of RentComputation).f of x
  definition result equals f of 1

declaration scope RentComputation:
  internal g content integer depends on x content integer
  output f content integer depends on x content integer

scope RentComputation:
  definition g of x equals x + 1
  definition f of x equals g of (x + 1)
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [69/69]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [9/9]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [6/6]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [9/9]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [8/8]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -t -s HousingComputation --debug
[DEBUG] = INIT =
[DEBUG] = SURFACE =
[DEBUG] Parsing "tests/test_scope/good/scope_call3.catala_en"
[DEBUG] = DESUGARED =
[DEBUG] Name resolution...
[DEBUG] Desugaring...
[DEBUG] Disambiguating...
[DEBUG] Linting...
[DEBUG] = SCOPELANG =
[DEBUG] = DCALC =
[DEBUG] Typechecking...
[DEBUG] Translating to default calculus...
[DEBUG] Typechecking again...
[DEBUG] Starting interpretation...
[LOG] ≔  HousingComputation.f: λ (x_90: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨(let result_91 : RentComputation = (#{→ RentComputation.direct} (λ (RentComputation_in_92: RentComputation_in) → let g_93 : integer → integer = #{≔ RentComputation.g} (λ (x1_94: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨x1_94 +! 1⟩⟩ | false ⊢ ∅ ⟩) in let f_95 : integer → integer = #{≔ RentComputation.f} (λ (x1_96: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨#{← RentComputation.g} #{≔ RentComputation.g.output} (#{→ RentComputation.g} g_93) #{≔ RentComputation.g.input0} (x1_96 +! 1)⟩⟩ | false ⊢ ∅ ⟩) in { RentComputation f = f_95; })) #{≔ RentComputation.direct.input} {RentComputation_in} in let result1_97 : RentComputation = { RentComputation f = λ (param0_98: integer) → #{← RentComputation.f} #{≔ RentComputation.f.output} (#{→ RentComputation.f} result_91.f) #{≔ RentComputation.f.input0} param0_98; } in #{← RentComputation.direct} #{≔ RentComputation.direct.output} if #{☛ RentComputation.direct.output} true then result1_97 else result1_97).f x_90⟩⟩ | false ⊢ ∅ ⟩
[LOG] ☛ Definition applied:
      ┌─⯈ tests/test_scope/good/scope_call3.catala_en:8.14-8.20:
      └─┐
      8 │   definition result equals f of 1
        │              ‾‾‾‾‾‾
[LOG] →  HousingComputation.f
[LOG]   ≔  HousingComputation.f.input0: 1
[LOG]   ☛ Definition applied:
        ┌─⯈ tests/test_scope/good/scope_call3.catala_en:7.14-7.15:
        └─┐
        7 │   definition f of x equals (output of RentComputation).f of x
          │              ‾
[LOG]   →  RentComputation.direct
[LOG]     ≔  RentComputation.direct.input: {RentComputation_in}
[LOG]     ≔  RentComputation.g: λ (x_99: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨x_99 +! 1⟩⟩ | false ⊢ ∅ ⟩
[LOG]     ≔  RentComputation.f: λ (x_100: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨#{← RentComputation.g} #{≔ RentComputation.g.output} (#{→ RentComputation.g} (λ (x1_101: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨x1_101 +! 1⟩⟩ | false ⊢ ∅ ⟩)) #{≔ RentComputation.g.input0} (x_100 +! 1)⟩⟩ | false ⊢ ∅ ⟩
[LOG]     ☛ Definition applied:
          ┌─⯈ tests/test_scope/good/scope_call3.catala_en:7.29-7.54:
          └─┐
          7 │   definition f of x equals (output of RentComputation).f of x
            │                             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
[LOG]     ≔  RentComputation.direct.output: { RentComputation f = λ (param0_102: integer) → #{← RentComputation.f} #{≔ RentComputation.f.output} (#{→ RentComputation.f} { RentComputation f = λ (x_103: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨#{← RentComputation.g} #{≔ RentComputation.g.output} (#{→ RentComputation.g} (λ (x1_104: integer) → error_empty ⟨ ⟨#{☛ } true ⊢ ⟨x1_104 +! 1⟩⟩ | false ⊢ ∅ ⟩)) #{≔ RentComputation.g.input0} (x_103 +! 1)⟩⟩ | false ⊢ ∅ ⟩; }.f) #{≔ RentComputation.f.input0} param0_102; }
[LOG]   ←  RentComputation.direct
[LOG]   →  RentComputation.f
[LOG]     ≔  RentComputation.f.input0: 1
[LOG]     ☛ Definition applied:
          ┌─⯈ tests/test_scope/good/scope_call3.catala_en:16.14-16.15:
          └──┐
          16 │   definition f of x equals g of (x + 1)
             │              ‾
[LOG]     →  RentComputation.g
[LOG]       ≔  RentComputation.g.input0: 2
[LOG]       ☛ Definition applied:
            ┌─⯈ tests/test_scope/good/scope_call3.catala_en:15.14-15.15:
            └──┐
            15 │   definition g of x equals x + 1
               │              ‾
[LOG]       ≔  RentComputation.g.output: 3
[LOG]     ←  RentComputation.g
[LOG]     ≔  RentComputation.f.output: 3
[LOG]   ←  RentComputation.f
[LOG]   ≔  HousingComputation.f.output: 3
[LOG] ←  HousingComputation.f
[LOG] ≔  HousingComputation.result: 3
[DEBUG] End of interpretation
[RESULT] Computation successful! Results:
[RESULT]
f = λ (x: integer) →
  error_empty
    ⟨ ⟨true
       ⊢ ⟨(let result : RentComputation =
             (λ (RentComputation_in: RentComputation_in) →
              let g : integer → integer =
                λ (x1: integer) →
                error_empty ⟨ ⟨true ⊢ ⟨x1 + 1⟩⟩ | false ⊢ ∅ ⟩
              in
              let f : integer → integer =
                λ (x1: integer) →
                error_empty ⟨ ⟨true ⊢ ⟨g (x1 + 1)⟩⟩ | false ⊢ ∅ ⟩
              in
              { RentComputation f = f; })
               {RentComputation_in}
           in
           let result1 : RentComputation =
             { RentComputation f = λ (param0: integer) → result.f param0; }
           in
           if true then result1 else result1).
            f
            x⟩⟩
    | false ⊢ ∅ ⟩
[RESULT] result = 3
```
