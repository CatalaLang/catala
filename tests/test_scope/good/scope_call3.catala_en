```catala
declaration scope HousingComputation:
  output f content integer depends on x content integer
  output result content integer

scope HousingComputation:
  definition f of x equals (output of RentComputation).f of x
  definition result equals f of 1

declaration scope RentComputation:
  internal g content integer depends on x content integer
  output f content integer depends on x content integer

scope RentComputation:
  definition g of x equals x + 1
  definition f of x equals g of (x + 1)
```

```catala-test-inline
$ catala Interpret -t -s HousingComputation --debug
[DEBUG] - INIT -
[DEBUG] - SURFACE -
[DEBUG] Parsing scope_call3.catala_en
[DEBUG] - DESUGARED -
[DEBUG] Name resolution...
[DEBUG] Desugaring...
[DEBUG] Disambiguating...
[DEBUG] Linting...
[DEBUG] - SCOPELANG -
[DEBUG] - DCALC -
[DEBUG] Typechecking...
[DEBUG] Translating to default calculus...
[DEBUG] Typechecking again...
[DEBUG] Starting interpretation...
[LOG] ≔  HousingComputation.f: <function>
[LOG] ☛ Definition applied:
      ┌─⯈ scope_call3.catala_en:8.14-8.20:
      └─┐
      8 │   definition result equals f of 1
        │              ‾‾‾‾‾‾
[LOG] →  HousingComputation.f
[LOG]   ≔  HousingComputation.f.input0: 1
[LOG]   ☛ Definition applied:
        ┌─⯈ scope_call3.catala_en:7.14-7.15:
        └─┐
        7 │   definition f of x equals (output of RentComputation).f of x
          │              ‾
[LOG]   →  RentComputation.direct
[LOG]     ≔  RentComputation.direct.input: {RentComputation_in}
[LOG]     ≔  RentComputation.g: <function>
[LOG]     ≔  RentComputation.f: <function>
[LOG]     ☛ Definition applied:
          ┌─⯈ scope_call3.catala_en:7.29-7.54:
          └─┐
          7 │   definition f of x equals (output of RentComputation).f of x
            │                             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
[LOG]     ≔  RentComputation.direct.output: { RentComputation f = <function>; }
[LOG]   ←  RentComputation.direct
[LOG]   →  RentComputation.f
[LOG]     ≔  RentComputation.f.input0: 1
[LOG]     ☛ Definition applied:
          ┌─⯈ scope_call3.catala_en:16.14-16.15:
          └──┐
          16 │   definition f of x equals g of (x + 1)
             │              ‾
[LOG]     →  RentComputation.g
[LOG]       ≔  RentComputation.g.input0: 2
[LOG]       ☛ Definition applied:
            ┌─⯈ scope_call3.catala_en:15.14-15.15:
            └──┐
            15 │   definition g of x equals x + 1
               │              ‾
[LOG]       ≔  RentComputation.g.output: 3
[LOG]     ←  RentComputation.g
[LOG]     ≔  RentComputation.f.output: 3
[LOG]   ←  RentComputation.f
[LOG]   ≔  HousingComputation.f.output: 3
[LOG] ←  HousingComputation.f
[LOG] ≔  HousingComputation.result: 3
[DEBUG] End of interpretation
[RESULT] Computation successful! Results:
[RESULT]
f = λ (x: integer) →
  error_empty
    ⟨true
     ⊢ (let result : RentComputation =
          (λ (RentComputation_in: RentComputation_in) →
           let g : integer → integer =
             λ (x1: integer) →
             error_empty ⟨true ⊢ x1 + 1⟩
           in
           let f : integer → integer =
             λ (x1: integer) →
             error_empty ⟨true ⊢ g (x1 + 1)⟩
           in
           { RentComputation f = f; })
            {RentComputation_in}
        in
        let result1 : RentComputation =
          { RentComputation f = λ (param0: integer) → result.f param0; }
        in
        if true then result1 else result1).
         f
         x⟩
[RESULT] result = 3
```
