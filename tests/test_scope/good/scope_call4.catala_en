```catala
declaration scope HousingComputation:
  output f1 content integer depends on (x content integer)
  output f2 content integer depends on (x content integer)
  output result content integer

scope HousingComputation:
  definition f1 of x equals (output of RentComputation).f1 of x
  definition f2 of x equals (output of RentComputation).f2 of x
  definition result equals f1 of 1
  definition result equals f2 of 1

declaration scope RentComputation:
  internal g content integer depends on (x content integer)
  output f1 content integer depends on (x content integer)
  output f2 content integer depends on (x content integer)

scope RentComputation:
  definition g of x equals x + 1
  definition f1 of x equals g of (x + 1)
  definition f2 of x equals g of (x + 1)
```




```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [129/129]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [19/19]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [13/13]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [19/19]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [13/13]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s RentComputation --debug
[DEBUG] = INIT =
[DEBUG] = SURFACE =
[DEBUG] Parsing "tests/test_scope/good/scope_call4.catala_en"
[DEBUG] = DESUGARED =
[DEBUG] Name resolution...
[DEBUG] Desugaring...
[DEBUG] Disambiguating...
[DEBUG] Linting...
[DEBUG] = SCOPELANG =
[DEBUG] = DCALC =
[DEBUG] Typechecking...
[DEBUG] Translating to default calculus...
[DEBUG] Typechecking again...
[DEBUG] Starting interpretation...
[DEBUG] End of interpretation
[RESULT] Computation successful! Results:
[RESULT]
f1 = λ (x: integer) →
  error_empty
    ⟨ ⟨true
       ⊢ ⟨let x1 : integer = x + 1 in
          error_empty ⟨ ⟨true ⊢ ⟨x1 + 1⟩⟩ | false ⊢ ∅ ⟩⟩⟩
    | false ⊢ ∅ ⟩
[RESULT]
f2 = λ (x: integer) →
  error_empty
    ⟨ ⟨true
       ⊢ ⟨let x1 : integer = x + 1 in
          error_empty ⟨ ⟨true ⊢ ⟨x1 + 1⟩⟩ | false ⊢ ∅ ⟩⟩⟩
    | false ⊢ ∅ ⟩
```

```catala-test-inline
$ catala Interpret_Lcalc -s RentComputation --avoid_exceptions --optimize --debug
[DEBUG] = INIT =
[DEBUG] = SURFACE =
[DEBUG] Parsing "tests/test_scope/good/scope_call4.catala_en"
[DEBUG] = DESUGARED =
[DEBUG] Name resolution...
[DEBUG] Desugaring...
[DEBUG] Disambiguating...
[DEBUG] Linting...
[DEBUG] = SCOPELANG =
[DEBUG] = DCALC =
[DEBUG] Typechecking...
[DEBUG] Translating to default calculus...
[DEBUG] Optimizing default calculus...
[DEBUG] Typechecking again...
[DEBUG] = LCALC =
[DEBUG] Optimizing lambda calculus...
[DEBUG] Starting interpretation...
[DEBUG] End of interpretation
[RESULT] Computation successful! Results:
[RESULT]
f1 = λ (x: integer) →
  match
    (handle_default_opt
       []
       (λ (_: unit) → true)
       (λ (_: unit) →
        ESome
          let x1 : integer = x + 1 in
          match
            (handle_default_opt
               []
               (λ (_1: unit) → true)
               (λ (_1: unit) → ESome (x1 + 1)))
          with
          | ENone _1 → raise NoValueProvided
          | ESome arg → arg))
  with
  | ENone _ → raise NoValueProvided
  | ESome arg → arg
[RESULT]
f2 = λ (x: integer) →
  match
    (handle_default_opt
       []
       (λ (_: unit) → true)
       (λ (_: unit) →
        ESome
          let x1 : integer = x + 1 in
          match
            (handle_default_opt
               []
               (λ (_1: unit) → true)
               (λ (_1: unit) → ESome (x1 + 1)))
          with
          | ENone _1 → raise NoValueProvided
          | ESome arg → arg))
  with
  | ENone _ → raise NoValueProvided
  | ESome arg → arg
```
