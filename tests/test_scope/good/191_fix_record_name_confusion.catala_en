## Article

```catala
declaration scope ScopeA:
  output a content boolean

declaration scope ScopeB:
  output a content boolean
  scopeA scope ScopeA

scope ScopeA:
  definition a equals true

scope ScopeB:
  definition a equals scopeA.a
```

```catala-test-inline
$ catala OCaml -O

(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module ScopeA = struct
  type t = {a: bool}
end

module ScopeB = struct
  type t = {a: bool}
end

module ScopeA_in = struct
  type t = unit
end

module ScopeB_in = struct
  type t = unit
end



let scope_a (scope_a_in: ScopeA_in.t) : ScopeA.t =
  let a_: bool = try true with
    EmptyError -> (raise (NoValueProvided
      {filename = "tests/test_scope/good/191_fix_record_name_confusion.catala_en";
        start_line=5; start_column=10; end_line=5; end_column=11;
        law_headings=["Article"]})) in
  {ScopeA.a = a_}

let scope_b (scope_b_in: ScopeB_in.t) : ScopeB.t =
  let result_: ScopeA.t = scope_a (()) in
  let scope_a_dot_a_: bool = result_.ScopeA.a in
  let a_: bool = try scope_a_dot_a_ with
    EmptyError -> (raise (NoValueProvided
      {filename = "tests/test_scope/good/191_fix_record_name_confusion.catala_en";
        start_line=8; start_column=10; end_line=8; end_column=11;
        law_headings=["Article"]})) in
  {ScopeB.a = a_}
```
