## Article

```catala
declaration scope S:
  context output a content boolean

scope S:
   definition a equals
    let a equals false in
    let a equals a or true in
    a
```

```catala-test-inline
$ catala Interpret -s S
[RESULT] Computation successful! Results:
[RESULT] a = true
```

```catala-test-inline
$ catala Interpret_Lcalc -s S --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] a = ESome true
```

```catala-test-inline
$ catala ocaml

(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module S = struct
  type t = {a: bool}
end

module S_in = struct
  type t = {a_in: unit -> bool}
end



let s (s_in: S_in.t) : S.t =
  let a_: unit -> bool = s_in.S_in.a_in in
  let a_: bool =
    try
      (handle_default
         {filename = ""; start_line=0; start_column=1;
           end_line=0; end_column=1; law_headings=[]}
         ([|(fun (_: unit) -> a_ ())|]) (fun (_: unit) -> true)
         (fun (_: unit) ->
            handle_default
              {filename = ""; start_line=0; start_column=1;
                end_line=0; end_column=1; law_headings=[]} ([||])
              (fun (_: unit) -> true)
              (fun (_: unit) -> (let a_ : bool = false
                 in
                 (let a_ : bool = (o_or a_ true) in
                 a_)))))
    with
    EmptyError -> (raise (NoValueProvided
      {filename = "let_in2.catala_en";
        start_line=5; start_column=18; end_line=5; end_column=19;
        law_headings=["Article"]})) in
  {S.a = a_}
```
