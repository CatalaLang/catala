## Article

```catala
declaration scope S:
  context output a content A
  context output b content B

declaration structure A:
   data x content decimal
   data y content B

declaration structure B:
   data y content boolean
   data z content decimal

scope S:
   definition b equals let b equals 42 in B { -- y: true -- z: decimal of b}
   definition a equals
     let b equals
       if b.y
       then B { -- y: false -- z: -1. }
       else B { -- y: true  -- z: -2. }
     in
     let a equals 2. * b.z in
     A { -- x: a -- y : b }
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [64/64]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [7/7]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [3/3]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [7/7]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [6/6]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s S
[RESULT] Computation successful! Results:
[RESULT] a = A { -- x: -2.0 -- y: B { -- y: false -- z: -1.0 } }
[RESULT] b = B { -- y: true -- z: 42.0 }
```

## Check scope of let-in vs scope variable

```catala
declaration scope S2:
   x scope S
   output y content integer

scope S2:
  definition y equals
    let x equals 0 in
    x + 1
```

```catala-test-inline
$ catala Interpret -s S2
[RESULT] Computation successful! Results:
[RESULT] y = 1
```
```catala-test-inline
$ catala Interpret_Lcalc -s S --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] a = A { -- x: -2.0 -- y: B { -- y: false -- z: -1.0 } }
[RESULT] b = B { -- y: true -- z: 42.0 }
```
```catala-test-inline
$ catala Interpret_Lcalc -s S2 --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] y = 1
```
