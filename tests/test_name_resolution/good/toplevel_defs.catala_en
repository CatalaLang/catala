## Test basic toplevel values defs

```catala
declaration glob1 content decimal equals 44.12

declaration scope S:
  output a content decimal
  output b content A

declaration structure A:
   data y content boolean
   data z content decimal

declaration glob2 content A equals
    A { --y: glob1 >= 30. --z: 123. * 17. }

scope S:
   definition a equals glob1 * glob1
   definition b equals glob2
```

```catala-test-inline
$ catala Interpret -s S
[RESULT] Computation successful! Results:
[RESULT] a = 1,946.574,4
[RESULT] b = A { -- y: true -- z: 2,091.0 }
```

## Test toplevel function defs

```catala
declaration glob3 content decimal
    depends on x content money
    equals decimal of x + 10.

declaration scope S2:
  output a content decimal

scope S2:
   definition a equals glob3 of $44 + 100.
```

```catala-test-inline
$ catala Interpret -s S2
[RESULT] Computation successful! Results:
[RESULT] a = 154.0
```

## Test function def with two args

```catala
declaration glob4 content decimal
    depends on x content money, y content decimal
    equals decimal of x * y + 10.

declaration scope S3:
  output a content decimal

scope S3:
   definition a equals 50. + glob4 of $44, 55.
```

```catala-test-inline
$ catala Interpret -s S3
[RESULT] Computation successful! Results:
[RESULT] a = 2,480.0
```

## Test inline defs in toplevel defs

(can't define inline functions yet)

```catala
declaration glob5 content decimal equals
    let x equals decimal of 2 * 3. in
    let y equals 1000. in
    x * y

declaration scope S4:
  output a content decimal

scope S4:
   definition a equals glob5 + 1.
```

```catala-test-inline
$ catala Interpret -s S4
[RESULT] Computation successful! Results:
[RESULT] a = 6,001.0
```

```catala-test-inline
$ catala scalc
let glob1_2 = 44.12

let glob3_3 (x_3: money) = return to_rat x_3 + 10.

let glob4_4 (x_4: money) (y_5: decimal) = return to_rat x_4 * y_5 + 10.

let glob5_aux_5 =
  decl glob5_7 : any;
  let glob5_7 (x_8 : decimal) =
    decl y_9 : decimal;
    y_9 = 1000.;
    return x_8 * y_9;
  return glob5_7 to_rat 2 * 3.

let glob5_6 = glob5_aux_5 ()

let glob2_10 = A {"y": glob1_2 >= 30., "z": 123. * 17.}

let S2_6 (S2_in_11: S2_in) =
  decl temp_a_13 : any;
  try:
    decl temp_a_16 : any;
    let temp_a_16 (__17 : unit) =
      return glob3_3 ¤44.00 + 100.;
    decl temp_a_14 : any;
    let temp_a_14 (__15 : unit) =
      return true;
    temp_a_13 = handle_default [] temp_a_14 temp_a_16
  with EmptyError:
    temp_a_13 = dead_value_1;
    raise NoValueProvided;
  decl a_12 : decimal;
  a_12 = temp_a_13;
  return S2 {"a": a_12}

let S3_7 (S3_in_18: S3_in) =
  decl temp_a_20 : any;
  try:
    decl temp_a_23 : any;
    let temp_a_23 (__24 : unit) =
      return 50. + glob4_4 ¤44.00 55.;
    decl temp_a_21 : any;
    let temp_a_21 (__22 : unit) =
      return true;
    temp_a_20 = handle_default [] temp_a_21 temp_a_23
  with EmptyError:
    temp_a_20 = dead_value_1;
    raise NoValueProvided;
  decl a_19 : decimal;
  a_19 = temp_a_20;
  return S3 {"a": a_19}

let S4_8 (S4_in_25: S4_in) =
  decl temp_a_27 : any;
  try:
    decl temp_a_30 : any;
    let temp_a_30 (__31 : unit) =
      return glob5_6 + 1.;
    decl temp_a_28 : any;
    let temp_a_28 (__29 : unit) =
      return true;
    temp_a_27 = handle_default [] temp_a_28 temp_a_30
  with EmptyError:
    temp_a_27 = dead_value_1;
    raise NoValueProvided;
  decl a_26 : decimal;
  a_26 = temp_a_27;
  return S4 {"a": a_26}

let S_9 (S_in_32: S_in) =
  decl temp_a_40 : any;
  try:
    decl temp_a_43 : any;
    let temp_a_43 (__44 : unit) =
      return glob1_2 * glob1_2;
    decl temp_a_41 : any;
    let temp_a_41 (__42 : unit) =
      return true;
    temp_a_40 = handle_default [] temp_a_41 temp_a_43
  with EmptyError:
    temp_a_40 = dead_value_1;
    raise NoValueProvided;
  decl a_33 : decimal;
  a_33 = temp_a_40;
  decl temp_b_35 : any;
  try:
    decl temp_b_38 : any;
    let temp_b_38 (__39 : unit) =
      return glob2_10;
    decl temp_b_36 : any;
    let temp_b_36 (__37 : unit) =
      return true;
    temp_b_35 = handle_default [] temp_b_36 temp_b_38
  with EmptyError:
    temp_b_35 = dead_value_1;
    raise NoValueProvided;
  decl b_34 : A {y: bool; z: decimal};
  b_34 = temp_b_35;
  return S {"a": a_33, "b": b_34}
```

```catala-test-inline
$ catala python
# This file has been generated by the Catala compiler, do not edit!

from catala.runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum

class A:
    def __init__(self, y: bool, z: Decimal) -> None:
        self.y = y
        self.z = z

    def __eq__(self, other: object) -> bool:
        if isinstance(other, A):
            return (self.y == other.y and self.z == other.z)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "A(y={},z={})".format(self.y, self.z)

class S2:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2(a={})".format(self.a)

class S3:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3(a={})".format(self.a)

class S4:
    def __init__(self, a: Decimal) -> None:
        self.a = a

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4):
            return (self.a == other.a)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4(a={})".format(self.a)

class S:
    def __init__(self, a: Decimal, b: A) -> None:
        self.a = a
        self.b = b

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S):
            return (self.a == other.a and self.b == other.b)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S(a={},b={})".format(self.a, self.b)

class SIn:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SIn):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SIn()".format()

class S2In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S2In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S2In()".format()

class S3In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S3In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S3In()".format()

class S4In:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, S4In):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "S4In()".format()



glob1 = (decimal_of_string("44.12"))

def glob3(x:Money):
    return (decimal_of_money(x) + decimal_of_string("10."))

def glob4(x_1:Money, y:Decimal):
    return ((decimal_of_money(x_1) * y) + decimal_of_string("10."))

def glob5_aux():
    def glob5(x_2:Decimal):
        y_1 = decimal_of_string("1000.")
        return (x_2 * y_1)
    return glob5((decimal_of_integer(integer_of_string("2")) *
                 decimal_of_string("3.")))

glob5_1 = (glob5_aux())

glob2 = (
    A(y = (glob1 >=
    decimal_of_string("30.")),
    z = (decimal_of_string("123.") *
    decimal_of_string("17.")))
    )

def s2(s2_in:S2In):
    try:
        def temp_a(_:Unit):
            return (glob3(money_of_cents_string("4400")) +
                decimal_of_string("100."))
        def temp_a_1(_:Unit):
            return True
        temp_a_2 = handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_a_1, temp_a)
    except EmptyError:
        temp_a_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="toplevel_defs.catala_en",
                                             start_line=37, start_column=10,
                                             end_line=37, end_column=11,
                                             law_headings=["Test toplevel function defs"]))
    a = temp_a_2
    return S2(a = a)

def s3(s3_in:S3In):
    try:
        def temp_a_3(_:Unit):
            return (decimal_of_string("50.") +
                glob4(money_of_cents_string("4400"),
                      decimal_of_string("55.")))
        def temp_a_4(_:Unit):
            return True
        temp_a_5 = handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_a_4, temp_a_3)
    except EmptyError:
        temp_a_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="toplevel_defs.catala_en",
                                             start_line=57, start_column=10,
                                             end_line=57, end_column=11,
                                             law_headings=["Test function def with two args"]))
    a_1 = temp_a_5
    return S3(a = a_1)

def s4(s4_in:S4In):
    try:
        def temp_a_6(_:Unit):
            return (glob5_1 + decimal_of_string("1."))
        def temp_a_7(_:Unit):
            return True
        temp_a_8 = handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_a_7, temp_a_6)
    except EmptyError:
        temp_a_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="toplevel_defs.catala_en",
                                             start_line=80, start_column=10,
                                             end_line=80, end_column=11,
                                             law_headings=["Test inline defs in toplevel defs"]))
    a_2 = temp_a_8
    return S4(a = a_2)

def s(s_in:SIn):
    try:
        def temp_a_9(_:Unit):
            return (glob1 * glob1)
        def temp_a_10(_:Unit):
            return True
        temp_a_11 = handle_default(SourcePosition(filename="", start_line=0,
                                   start_column=1, end_line=0, end_column=1,
                                   law_headings=[]), [], temp_a_10, temp_a_9)
    except EmptyError:
        temp_a_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="toplevel_defs.catala_en",
                                             start_line=7, start_column=10,
                                             end_line=7, end_column=11,
                                             law_headings=["Test basic toplevel values defs"]))
    a_3 = temp_a_11
    try:
        def temp_b(_:Unit):
            return glob2
        def temp_b_1(_:Unit):
            return True
        temp_b_2 = handle_default(SourcePosition(filename="", start_line=0,
                                  start_column=1, end_line=0, end_column=1,
                                  law_headings=[]), [], temp_b_1, temp_b)
    except EmptyError:
        temp_b_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="toplevel_defs.catala_en",
                                             start_line=8, start_column=10,
                                             end_line=8, end_column=11,
                                             law_headings=["Test basic toplevel values defs"]))
    b = temp_b_2
    return S(a = a_3, b = b)
```
```catala-test-inline
$ catala Interpret_Lcalc -s S --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] a = ESome 1,946.574,4
[RESULT] b = ESome A { -- y: ESome true -- z: ESome 2,091.0 }
```
```catala-test-inline
$ catala Interpret_Lcalc -s S2 --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] a = ESome 154.0
```
```catala-test-inline
$ catala Interpret_Lcalc -s S3 --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] a = ESome 2,480.0
```
```catala-test-inline
$ catala Interpret_Lcalc -s S4 --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] a = ESome 6,001.0
```
