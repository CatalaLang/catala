## Test

```catala
declaration scope A:
  internal a content integer
  output b content integer
  input c content integer
  input output d content integer
  context e content integer
  context output f content integer


scope A:
  definition a equals 0
  definition b equals a + 1
  definition e equals b + c + d + 1
  definition f equals e + 1
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [68/68]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [2/2]
[RESULT] Invariant no_return_a_function checked. result: [0/0]
[RESULT] Invariant no_partial_evaluation checked. result: [2/2]
[RESULT] Invariant default_no_arrow checked. result: [10/10]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Dcalc -s A
let scope A
  (A_in:
     A_in {
       c_in: integer;
       d_in: integer;
       e_in: unit → ⟨integer⟩;
       f_in: unit → ⟨integer⟩
     })
  : A {b: integer; d: integer; f: integer}
  =
  let get c : integer = A_in.c_in in
  let get d : integer = A_in.d_in in
  let get e : unit → ⟨integer⟩ = A_in.e_in in
  let get f : unit → ⟨integer⟩ = A_in.f_in in
  let set a : integer = error_empty ⟨ ⟨true ⊢ ⟨0⟩⟩ | false ⊢ ∅ ⟩ in
  let set b : integer = error_empty ⟨ ⟨true ⊢ ⟨a + 1⟩⟩ | false ⊢ ∅ ⟩ in
  let set e : integer =
    error_empty
      ⟨ e ()
      | true ⊢ ⟨error_empty ⟨ ⟨true ⊢ ⟨b + c + d + 1⟩⟩ | false ⊢ ∅ ⟩⟩ ⟩
  in
  let set f : integer =
    error_empty
      ⟨ f () | true ⊢ ⟨error_empty ⟨ ⟨true ⊢ ⟨e + 1⟩⟩ | false ⊢ ∅ ⟩⟩ ⟩
  in
  return { A b = b; d = d; f = f; }
```

```catala-test-inline
$ catala Typecheck
[RESULT] Typechecking successful!
```
