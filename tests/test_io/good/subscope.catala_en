## Test

```catala
declaration scope A:
  context a content integer
  input b content integer
  output c content integer
  internal d content integer

declaration scope B:
  a scope A

scope A:
  definition a equals 0
  definition c equals b + d
  definition d equals 1 + a

scope B:
  definition a.b equals 2
  assertion a.c = 1
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [63/63]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [2/2]
[RESULT] Invariant no_return_a_function checked. result: [1/1]
[RESULT] Invariant no_partial_evaluation checked. result: [2/2]
[RESULT] Invariant default_no_arrow checked. result: [9/9]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Dcalc -s B
let scope B (B_in: B_in): B =
  let sub_set a.a : unit → ⟨integer⟩ = λ (_: unit) → ∅ in
  let sub_set a.b : integer = error_empty ⟨ ⟨true ⊢ ⟨2⟩⟩ | false ⊢ ∅ ⟩ in
  let call result : A {c: integer} = A { A_in a_in = a.a; b_in = a.b; } in
  let sub_get a.c : integer = result.c in
  let assert _ : unit = assert ((a.c = 1)) in
  return {B}
```

```catala-test-inline
$ catala Typecheck
[RESULT] Typechecking successful!
```
