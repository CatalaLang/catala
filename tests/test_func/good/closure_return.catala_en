## Article

```catala
declaration scope S:
  output f content integer depends on y content integer
  input x content boolean

scope S:
  definition f of y equals if x then y else - y
```

```catala-test-inline
$ catala Lcalc --avoid_exceptions -O --closure_conversion


type S_in = { x_in: bool; }

type S = { f: ((closure_env, integer) → integer * closure_env); }
 
let topval closure_f : (closure_env, integer) → integer =
  λ (env: closure_env) (y: integer) →
  match
    (handle_default_opt
       []
       (λ (_: unit) → true)
       (λ (_: unit) → ESome if (from_closure_env env).0 then y else - y))
  with
  | ENone _ → raise NoValueProvided
  | ESome arg → arg 
let scope S
  (S_in: S_in {x_in: bool})
  : S {f: ((closure_env, integer) → integer * closure_env)}
  =
  let get x : bool = S_in.x_in in
  let set f : ((closure_env, integer) → integer * closure_env) =
    (closure_f, to_closure_env (x))
  in
  return { S f = f; } 

```
