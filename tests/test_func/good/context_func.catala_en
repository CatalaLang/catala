## Test

```catala
declaration scope A:
  context output f content integer depends on x content integer

declaration scope B:
  input b content boolean
  a scope A

scope A:
  definition f of x equals x + 1

scope B:
  definition a.f of x under condition b and x > 0 consequence equals x - 1
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [45/45]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [2/2]
[RESULT] Invariant no_return_a_function checked. result: [2/2]
[RESULT] Invariant no_partial_evaluation checked. result: [2/2]
[RESULT] Invariant default_no_arrow checked. result: [5/5]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Scopelang -s B
let scope B (b: bool|input) =
  let a.f : integer → ⟨integer⟩ = λ (x: integer) →
    ⟨ ⟨b && x > 0 ⊢ ⟨x - 1⟩⟩ | false ⊢ ∅ ⟩;
  call A[a]
```

```catala-test-inline
$ catala Dcalc -s A
let scope A
  (A_in: A_in {f_in: integer → ⟨integer⟩})
  : A {f: integer → integer}
  =
  let get f : integer → ⟨integer⟩ = A_in.f_in in
  let set f : integer → integer =
    λ (x: integer) →
    error_empty
      ⟨ f x | true ⊢ ⟨error_empty ⟨ ⟨true ⊢ ⟨x + 1⟩⟩ | false ⊢ ∅ ⟩⟩ ⟩
  in
  return { A f = f; }
```

```catala-test-inline
$ catala Dcalc -s B
let scope B (B_in: B_in {b_in: bool}): B =
  let get b : bool = B_in.b_in in
  let sub_set a.f : integer → ⟨integer⟩ =
    λ (x: integer) →
    ⟨ ⟨b && x > 0 ⊢ ⟨x - 1⟩⟩ | false ⊢ ∅ ⟩
  in
  let call result : A {f: integer → integer} = A { A_in f_in = a.f; } in
  let sub_get a.f : integer → integer = result.f in
  return {B}
```
