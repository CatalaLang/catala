
# Article

```catala
declaration scope S:
   input x content collection integer
   output y content integer

scope S:
  definition y equals
    potential_max among x such that potential_max is minimum or if collection empty then -1
```

```catala-test-inline
$ catala Lcalc -s S --avoid_exceptions -O --closure_conversion
let scope S
  (S_in: S_in {x_in: eoption collection eoption integer})
  : S {y: eoption integer}
  =
  let get x : eoption collection eoption integer = S_in.x_in in
  let set y : eoption integer =
    ESome
      match
        (handle_default_opt
           [  ]
           (λ (_: unit) → ESome true)
           (λ (_: unit) →
            match x with
            | ENone _1 → ENone _1
            | ESome y_2 →
              reduce
                (λ (f: eoption integer) (init: eoption integer) →
                 match init with
                 | ENone _1 → ENone _1
                 | ESome y_3 →
                   match f with
                   | ENone _1 → ENone _1
                   | ESome y_0 →
                     let potential_max_1 : integer = y_0 in
                     let potential_max_2 : integer = y_3 in
                     if potential_max_1 < potential_max_2 then
                       ESome potential_max_1
                     else ESome potential_max_2)
                ESome -1
                y_2))
        with
      | ENone _ → raise NoValueProvided
      | ESome y → y
  in
  return { S y = y; }
```

The next test of closure conversion should give the same results, it checks that
`--avoid_exceptions` and `-O` are correctly implied by `--closure_conversion`
The detection of closures that should not be converted because they are arguments
to reduce or other special operators relies on pattern matching the special
operator and its EAbs argument. However without exceptions on, because the
--avoid_exceptions pass is not optimized and produces more options than needed,
the closures that are arguments to special operators are let-binded with an
option. This let-binding is reduced by partial evaluation, which is why the test
with optimizations on passes.

```catala-test-inline
$ catala Lcalc -s S --closure_conversion
let scope S
  (S_in: S_in {x_in: eoption collection eoption integer})
  : S {y: eoption integer}
  =
  let get x : eoption collection eoption integer = S_in.x_in in
  let set y : eoption integer =
    ESome
      match
        (handle_default_opt
           [ handle_default_opt
               [  ]
               (λ (_: unit) → ESome true)
               (λ (_: unit) →
                match x with
                | ENone _1 → ENone _1
                | ESome y_2 →
                  reduce
                    (λ (f: eoption integer) (init: eoption integer) →
                     match init with
                     | ENone _1 → ENone _1
                     | ESome y_3 →
                       match f with
                       | ENone _1 → ENone _1
                       | ESome y_0 →
                         let potential_max_1 : integer = y_0 in
                         let potential_max_2 : integer = y_3 in
                         if potential_max_1 < potential_max_2 then
                           ESome potential_max_1
                         else ESome potential_max_2)
                    ESome -1
                    y_2) ]
           (λ (_: unit) → ESome false)
           (λ (_: unit) → ENone ()))
        with
      | ENone _ → raise NoValueProvided
      | ESome y → y
  in
  return { S y = y; }
```
