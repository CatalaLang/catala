## Article

```catala
declaration scope S:
  internal f content integer depends on y content integer
  input x content boolean
  output z content integer

scope S:
  definition f of y equals if x then y else - y
  definition z equals f of -1
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [28/28]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [2/2]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [2/2]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [4/4]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Lcalc --avoid-exceptions -O --closure-conversion


type S_in = { x_in: bool; }

type S = { z: integer; }
 
let topval closure_f : (closure_env, integer) → integer =
  λ (env: closure_env) (y: integer) →
  if (from_closure_env env).0 then y else - y 
let scope S (S_in: S_in {x_in: bool}): S {z: integer} =
  let get x : bool = S_in.x_in in
  let set f : ((closure_env, integer) → integer * closure_env) =
    (closure_f, to_closure_env (x))
  in
  let set z : integer = f.0 f.1 -1 in
  return { S z = z; } 

```
