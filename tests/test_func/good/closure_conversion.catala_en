## Article

```catala
declaration scope S:
  internal f content integer depends on y content integer
  input x content boolean
  output z content integer

scope S:
  definition f of y equals if x then y else - y
  definition z equals f of -1
```

```catala-test-inline
$ catala Lcalc --avoid_exceptions -O --closure_conversion
type eoption =  | ENone of unit  | ESome of any 

type S_in = { x_in: eoption bool; }

type S = { z: eoption integer; }
 
let topval closure_f : (closure_env, integer) → eoption any =
  λ (env: closure_env) (y: integer) →
  ESome
    match
      (handle_default_opt
         [  ]
         (λ (_: unit) → ESome true)
         (λ (_: unit) →
          match (from_closure_env env).0 with
          | ENone _1 → ENone _1
          | ESome x → if x then ESome y else ESome - y))
      with
    | ENone _ → raise NoValueProvided
    | ESome f → f 
let scope S (S_in: S_in {x_in: eoption bool}): S {z: eoption integer} =
  let get x : eoption bool = S_in.x_in in
  let set f : eoption ((closure_env, integer) → eoption any * closure_env)
      =
    ESome (closure_f, to_closure_env (x))
  in
  let set z : eoption integer =
    ESome
      match
        (handle_default_opt
           [  ]
           (λ (_: unit) → ESome true)
           (λ (_: unit) →
            match f with
            | ENone _1 → ENone _1
            | ESome f →
              let code_and_env :
                  ((closure_env, integer) → eoption any * closure_env) =
                f
              in
              code_and_env.0 code_and_env.1 -1))
        with
      | ENone _ → raise NoValueProvided
      | ESome z → z
  in
  return { S z = z; } 

```
