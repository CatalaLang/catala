## Article

```catala
declaration scope S:
  output f content integer depends on y content integer
  input x content boolean

declaration scope T:
  s scope S
  output y content integer

scope S:
  definition f of y equals if x then y else - y

scope T:
  definition s.x equals false
  definition y equals s.f of 2
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [43/43]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [2/2]
[RESULT] Invariant no_return_a_function checked. result: [1/1]
[RESULT] Invariant no_partial_evaluation checked. result: [2/2]
[RESULT] Invariant default_no_arrow checked. result: [6/6]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Lcalc -s T --avoid-exceptions -O --closure-conversion
let scope T (T_in: T_in): T {y: integer} =
  let sub_set s.x : bool = false in
  let call result : S {f: ((closure_env, integer) → integer * closure_env)}
      =
    S { S_in x_in = s.x; }
  in
  let sub_get s.f : ((closure_env, integer) → integer * closure_env) =
    result.f
  in
  let set y : integer = s.f.0 s.f.1 2 in
  return { T y = y; }
```

```catala-test-inline
$ catala Interpret_lcalc -s T --avoid-exceptions -O --closure-conversion
[RESULT] Computation successful! Results:
[RESULT] y = -2
```
