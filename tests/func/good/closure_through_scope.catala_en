## Article

```catala
declaration scope S:
  output f content integer depends on y content integer
  input x content boolean

#[test] declaration scope T:
  s scope S
  output y content integer

scope S:
  definition f of y equals if x then y else - y

scope T:
  definition s.x equals false
  definition y equals s.f of 2
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala Lcalc -s T -O --closure-conversion
let scope T (t_in: #[test] T_in): #[test] T {y: integer} =
  let set s__1 : S {f: ((closure_env, integer) → integer, closure_env)} =
    let result : S = s { S_in x_in = false; } in
    { S f = (closure_s, to_closure_env (result)); }
  in
  let set y : integer =
    let code_and_env : ((closure_env, integer) → integer, closure_env) =
      s__1.f
    in
    code_and_env.0 code_and_env.1 2
  in
  return { T y = y; }
```

```catala-test-cli
$ catala Interpret --lcalc -s T -O --closure-conversion
┌─[RESULT]─ T ─
│ y = -2
└─
```
