
# Article

```catala
declaration scope S:
   input x content list of integer
   output y content integer

scope S:
  definition y equals
    content of potential_max among x such that potential_max is minimum or if list empty then -1
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

Note: in the following test, a closure is passed as argument to the `reduce`
operator. This is temporary, and because `--keep-special-ops` is disabled: the
non-monomorphised C backend in its current state comes with a runtime featuring
functional operators that directly take closures as arguments. It's closer to
lambda-calculus and a first step to make it work, clearly we'll turn that flag
back on and translate to loops at some point.

```catala-test-cli
$ catala Lcalc -s S -O --closure-conversion
let scope S (s_in: S_in): S =
  let get x : list of integer = s_in.x_in in
  let set y : integer =
    (reduce
       (closure_y__2, to_closure_env ())
       (closure_y__1, to_closure_env ())
       map (closure_y, to_closure_env ()) x).0
  in
  return { S y = y; }
```

The next test of closure conversion should give the same results, it checks that
`-O` is correctly implied by `--closure-conversion`
The detection of closures that should not be converted because they are arguments
to reduce or other special operators relies on pattern matching the special
operator and its EAbs argument. However without exceptions on, because the
lcalc translation pass is not optimized and produces more options than needed,
the closures that are arguments to special operators are let-bound with an
option. This let-binding is reduced by partial evaluation, which is why the test
with optimizations on passes.

```catala-test-cli
$ catala Lcalc -s S --closure-conversion
let scope S (s_in: S_in): S =
  let get x : list of integer = s_in.x_in in
  let set y : integer =
    match
      (ESome
         ((let weights : list of (integer, integer) =
             map (let y__1 : (closure_env, integer) → (integer, integer) =
                    closure_y
                  in
                  (y__1, to_closure_env ()))
               x
           in
           reduce
             let y__1 :
                 (closure_env, (integer, integer), (integer, integer)) →
                   (integer, integer) =
               closure_y__2
             in
             (y__1, to_closure_env ())
             let y__1 : (closure_env, unit) → (integer, integer) =
               closure_y__1
             in
             (y__1, to_closure_env ())
             weights).0, <closure_conversion_reduce:11.5-97>))
    with
    | ENone → error NoValue
    | ESome arg → arg.0
  in
  return { S y = y; }
```
