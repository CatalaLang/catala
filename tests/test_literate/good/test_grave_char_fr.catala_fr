## Law text should be able to contain grave accent '`'.

This is a block of law text containing `.
This allows to:

* use `Markdown` code block inside `Catala` files,

* _escape_ special characters such as `#` or `>`,

* use Fenced Code Blocks:

```ocaml
let () = print_endline "Hello world!"
```

```catala
déclaration champ d'application A:
  contexte résultat literate_parsing_is_ok contenu booléen

champ  d'application A:
  définition literate_parsing_is_ok égal à vrai
```

Even after `Catala` code block:

```c
int main(void) { return 0; }
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [19/19]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [3/3]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = vrai
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = vrai
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = vrai
```
