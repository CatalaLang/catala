## Law text should be able to contain grave accent '`'.

This is a block of law text containing `.
This allows to:

* use `Markdown` code block inside `Catala` files,

* _escape_ special characters such as `#` or `>`,

* use Fenced Code Blocks:

```ocaml
let () = print_endline "Hello world!"
```

```catala
declaration scope A:
  context output literate_parsing_is_ok content boolean

scope A:
  definition literate_parsing_is_ok equals true
```

Even after `Catala` code block:

```c
int main(void) { return 0; }
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [19/19]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [1/1]
[RESULT] Invariant no_return_a_function checked. result: [0/0]
[RESULT] Invariant no_partial_evaluation checked. result: [1/1]
[RESULT] Invariant default_no_arrow checked. result: [3/3]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = true
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = true
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = true
```
```catala-test-inline
$ catala Interpret_Lcalc -s A --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = true
```
```catala-test-inline
$ catala Interpret_Lcalc -s A --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = true
```
```catala-test-inline
$ catala Interpret_Lcalc -s A --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] literate_parsing_is_ok = true
```
