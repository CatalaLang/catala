## Test

```catala
declaration scope A:
  context output foo content integer
    state bar
    state baz
    state fizz

declaration scope B:
  output foofoo content integer
    state bar
    state baz
  b scope A
  output foofoofoo content integer


scope A:
  definition foo state bar equals 1

  definition foo state baz equals foo + 1

  definition foo state fizz equals foo + 1


scope B:
  definition foofoo state bar equals 3
  definition foofoo state baz equals foofoo + 1
  definition b.foo equals foofoo
  definition foofoofoo equals b.foo
```



```catala-test-inline
$ catala Typecheck --check-invariants
[RESULT] Invariant typing_defaults checked. result: [82/82]
[RESULT] Invariant match_inversion checked. result: [0/0]
[RESULT] Invariant app_inversion checked. result: [2/2]
[RESULT] Invariant no_return_a_function checked. result: [1/1]
[RESULT] Invariant no_partial_evaluation checked. result: [2/2]
[RESULT] Invariant default_no_arrow checked. result: [15/15]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Scopelang -s A
let scope A (foo_bar: ⟨integer⟩|context) (foo_baz: integer|internal)
  (foo_fizz: integer|internal|output) =
  let foo_bar : integer = reentrant or by default
    error_empty ⟨ ⟨true ⊢ ⟨1⟩⟩ | false ⊢ ∅ ⟩;
  let foo_baz : integer =
    error_empty ⟨ ⟨true ⊢ ⟨foo_bar + 1⟩⟩ | false ⊢ ∅ ⟩;
  let foo_fizz : integer =
    error_empty ⟨ ⟨true ⊢ ⟨foo_baz + 1⟩⟩ | false ⊢ ∅ ⟩
```

```catala-test-inline
$ catala Interpret -s B
[RESULT] Computation successful! Results:
[RESULT] foofoo = 4
[RESULT] foofoofoo = 6
```
```catala-test-inline
$ catala Interpret_Lcalc -s B --avoid-exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] foofoo = 4
[RESULT] foofoofoo = 6
```
