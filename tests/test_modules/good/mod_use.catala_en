# Test modules + inclusions 2

> Using Mod_def

```catala
declaration scope T2:
  t1 scope Mod_def.S
#  input i content Enum1
  output o1 content Mod_def.Enum1
  output o2 content Mod_def.Enum1
  output o3 content money
  output o4 content decimal

scope T2:
  definition o1 equals No
  definition o2 equals t1.e1
  definition o3 equals t1.sr
  definition o4 equals Mod_def.half of 10
  assertion (Mod_def.Str1 { -- fld1: No -- fld2: 1 }).fld1 = No
  assertion o1 = Mod_def.Enum1.No
  assertion o2 = Maybe
  assertion o3 = $1000
  assertion o4 = 5.0
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [79/79]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [7/7]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [7/7]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [8/8]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala interpret -s T2
[RESULT] Computation successful! Results:
[RESULT] o1 = No ()
[RESULT] o2 = Maybe ()
[RESULT] o3 = $1,000.00
[RESULT] o4 = 5.0
```
