> Using Mod_def
> Using Mod_middle

Somehow there is a bug when multiple modules are declared in this order, so this
test completes mod_use2

```catala
declaration scope T:
  t1 scope Mod_middle.S
#  input i content Enum1
  output o1 content Mod_def.S
  output o2 content money
  output o3 content money

scope T:
  definition t1.x equals 3
  definition o1 equals t1.o1
  definition o2 equals t1.o2
  definition o3 equals t1.o3
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [49/49]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [8/8]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala interpret -s T
[RESULT] Computation successful! Results:
[RESULT] o1 = Mod_def.S { -- sr: $1,000.00 -- e1: Maybe () }
[RESULT] o2 = $2,500.00
[RESULT] o3 = $132.00
```
