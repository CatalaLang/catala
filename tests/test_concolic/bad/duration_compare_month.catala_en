## Article

```catala
declaration scope A:
  input d content duration
  internal diff content duration
  output o content integer

scope A:
    definition diff equals |2024-02-16| - |2024-01-16|
    definition o equals -1
    exception definition o
        under condition d<=diff
        consequence equals 0

declaration scope TestA:
    output o content integer

scope TestA:
    definition o equals (output of A with {-- d: 1 month}).o
```

The concolic interpreter finishes without finding any crash...

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [10 days]
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [32 days]
[RESULT] Output of scope after evaluation:
[RESULT] . o = -1
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

...but the input `[0 years, 1 months, 0 days]`, that cannot be generated by Z3
for now, does crash the scope.
Maybe this warrants a concolic interpreter warning?

```catala-test-inline
$ catala Interpret -s TestA
[ERROR]
Cannot compare together durations that cannot be converted to a precise number of days

┌─⯈ tests/test_concolic/bad/duration_compare_month.catala_en:13.25-13.26:
└──┐
13 │         under condition d<=diff
   │                         ‾
   └─ Article

┌─⯈ tests/test_concolic/bad/duration_compare_month.catala_en:13.28-13.32:
└──┐
13 │         under condition d<=diff
   │                            ‾‾‾‾
   └─ Article
#return code 123#
```

```catala-test-inline
$ catala DCalc -s A
let scope A (A_in: A_in {d_in: duration}): A {o: integer} =
  let get d : duration = A_in.d_in in
  let set diff : duration =
    error_empty ⟨ ⟨true ⊢ ⟨2024-02-16 - 2024-01-16⟩⟩ | false ⊢ ∅ ⟩
  in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨d <= diff ⊢ ⟨0⟩⟩ | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨-1⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

