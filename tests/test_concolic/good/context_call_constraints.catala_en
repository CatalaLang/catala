## Article

```catala
declaration scope A:
    context output x content integer
    output o content integer

scope A:
    definition x equals 30
    definition o equals 1
    exception definition o under condition x<0 consequence equals 2
    exception definition o under condition x=30 consequence equals 3

declaration scope B:
    a scope A
    input i content integer
    input x content integer
    output o content integer

scope B:
    definition a.x equals x
    exception definition a.x under condition i = 1 consequence equals x+1
    definition o equals a.o
```

Note how `a.x` is defined as a thunked default and not a default of several
thunks. This tests makes sure that the constraints generated by this default
are not forgotten even though they are executed in the called scope and not the
caller.

```catala-test-inline
$ catala DCalc -s B
let scope B (B_in: B_in {i_in: integer; x_in: integer}): B {o: integer} =
  let get i : integer = B_in.i_in in
  let get x : integer = B_in.x_in in
  let set a : A {x: integer; o: integer} =
    let result : A =
      A
        { A_in
          x_in =
            λ () →
            ⟨ ⟨ ⟨i = 1 ⊢ ⟨x + 1⟩⟩ | false ⊢ ∅ ⟩
            | true ⊢ ⟨ ⟨true ⊢ ⟨x⟩⟩ | false ⊢ ∅ ⟩ ⟩;
        }
    in
    let result1 : A = { A x = result.x; o = result.o; } in
    if true then result1 else result1
  in
  let set o : integer = error_empty ⟨ ⟨true ⊢ ⟨a.o⟩⟩ | false ⊢ ∅ ⟩ in
  return { B o = o; }
```

```catala-test-inline
$ catala Concolic -s B
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . i_in = 42
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . i_in = 0
[RESULT] . x_in = 30
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . i_in = 0
[RESULT] . x_in = -1
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . i_in = 1
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . i_in = 1
[RESULT] . x_in = 29
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . i_in = 1
[RESULT] . x_in = -2
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

