
## Article

```catala
declaration scope A:
    context output x content integer
    output o content integer

scope A:
    definition x equals 30
    definition o equals 1
    exception definition o under condition x<0 consequence equals 2
    exception definition o under condition x=30 consequence equals 3

declaration scope B:
    a scope A
    input x content integer
    output o content integer

scope B:
    definition a.x equals x
    definition o equals a.o
```

```catala-test-inline
$ catala DCalc -s A
let scope A
  (A_in: A_in {x_in: unit → ⟨integer⟩})
  : A {x: integer; o: integer}
  =
  let get x : unit → ⟨integer⟩ = A_in.x_in in
  let set x : integer =
    error_empty
      ⟨ x () | true ⊢ ⟨error_empty ⟨ ⟨true ⊢ ⟨30⟩⟩ | false ⊢ ∅ ⟩⟩ ⟩
  in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨x < 0 ⊢ ⟨2⟩⟩, ⟨x = 30 ⊢ ⟨3⟩⟩ | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨1⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A x = x; o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = <function>
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] . x = 42
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = <function>
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] . x = -1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = <function>
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] . x = 30
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = <function>
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] . x = 30
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

```catala-test-inline
$ catala DCalc -s B
let scope B (B_in: B_in {x_in: integer}): B {o: integer} =
  let get x : integer = B_in.x_in in
NOTE how this call is thunking a whole default, so we have to make sure that the constraints generated by that default are caught
Also TODO make a test for when the call is itself from a context variable?
  let sub_set a.x : unit → ⟨integer⟩ =
    λ (_: unit) →
    ⟨ ⟨true ⊢ ⟨x⟩⟩ | false ⊢ ∅ ⟩
  in
  let call result : A {x: integer; o: integer} = A { A_in x_in = a.x; } in
  let sub_get a.x : integer = result.x in
  let sub_get a.o : integer = result.o in
  let set o : integer = error_empty ⟨ ⟨true ⊢ ⟨a.o⟩⟩ | false ⊢ ∅ ⟩ in
  return { B o = o; }
```

```catala-test-inline
$ catala Concolic -s B
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = -1
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 30
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

