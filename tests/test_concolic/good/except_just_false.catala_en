## Article

```catala
declaration scope A:
    input x content integer
    output o content integer

scope A:
    definition o under condition x=-1 consequence equals 0
    exception definition o under condition x=42 consequence equals 1
    exception definition o under condition x=2 consequence equals 2
    exception definition o under condition x=3 consequence equals 3
```

```catala-test-inline
$ catala DCalc -s A
let scope A (A_in: A_in {x_in: integer}): A {o: integer} =
  let get x : integer = A_in.x_in in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨x = 42 ⊢ ⟨1⟩⟩, ⟨x = 2 ⊢ ⟨2⟩⟩, ⟨x = 3 ⊢ ⟨3⟩⟩ | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨x = -1 ⊢ ⟨0⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 43
[RESULT] Output of scope after evaluation:
[RESULT] Found error ↯Empty↯
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = -1
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 2
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 3
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

