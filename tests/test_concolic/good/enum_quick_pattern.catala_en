## Article

```catala
declaration enumeration E:
  -- E1 content integer
  -- E2

declaration scope A:
  input x content E
  output o content integer

scope A:
  definition o equals 0
  exception definition o
    under condition x with pattern E1 of i and i>=3
    consequence equals 1
  exception definition o
    under condition x with pattern E2
    consequence equals 2
```

```catala-test-inline
$ catala DCalc -s A
let scope A (A_in: A_in {x_in: E[E1: integer | E2: unit]}): A {o: integer} =
  let get x : E[E1: integer | E2: unit] = A_in.x_in in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨match x with
           | E1 i → (i >= 3)
           | E2 _ → false ⊢ ⟨1⟩⟩,
          ⟨match x with
           | E1 _ → false
           | E2 _ → true ⊢ ⟨2⟩⟩
        | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨0⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```
```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = E1 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = E1 0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = E2 ()
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

