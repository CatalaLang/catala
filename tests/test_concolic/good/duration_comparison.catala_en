## Article

```catala
declaration scope A:
  input d content duration
  output o content integer

scope A:
    definition o equals -1 # never reached
    exception definition o
        under condition d<=(-15 day)
        consequence equals 0
    exception definition o
        under condition d>(-15 day) and d<(0 day)
        consequence equals 1
    exception definition o
        under condition d=0 day
        consequence equals 2
    exception definition o
        under condition d>0 day and d<15 day
        consequence equals 3
    exception definition o
        under condition d>=15 day
        consequence equals 4
```

```catala-test-inline
$ catala DCalc -s A
let scope A (A_in: A_in {d_in: duration}): A {o: integer} =
  let get d : duration = A_in.d_in in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨d <= [0 years, 0 months, -15 days] ⊢ ⟨0⟩⟩,
          ⟨d > [0 years, 0 months, -15 days]
           && d < [0 years, 0 months, 0 days]
           ⊢ ⟨1⟩⟩, ⟨d = [0 years, 0 months, 0 days] ⊢ ⟨2⟩⟩,
          ⟨d > [0 years, 0 months, 0 days]
           && d < [0 years, 0 months, 15 days]
           ⊢ ⟨3⟩⟩, ⟨d >= [0 years, 0 months, 15 days] ⊢ ⟨4⟩⟩
        | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨-1⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [10 days]
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [0 day]
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [-1 day]
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [-15 days]
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . d_in = [15 days]
[RESULT] Output of scope after evaluation:
[RESULT] . o = 4
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

