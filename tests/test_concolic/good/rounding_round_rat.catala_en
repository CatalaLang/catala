Test that the rounding scheme for `round of` deciimal is the same in Z3 and OCaml.

```catala
declaration scope A:
    input x content decimal
    output o content integer

scope A:
    exception definition o under condition (x = round of -1.5)
        consequence equals 0
    exception definition o under condition (x = round of -1.1 and x = round of -0.5)
        consequence equals 1
    exception definition o under condition (x = round of -0.1
                                            and x = round of -0.0
                                            and x = round of 0.1)
        consequence equals 2
    exception definition o under condition (x = round of 0.5 and x = round of 1.1)
        consequence equals 3
    exception definition o under condition (x = round of 1.5)
        consequence equals 4

    definition o equals -1
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 42.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = -1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = -2.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = -1.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 0.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 1.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 2.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 4
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

