## Article

```catala
declaration scope A:
  input x content decimal
  input y content decimal
  input z content decimal
  input t content decimal
  output o content decimal

scope A:
  exception definition o under condition not ((x -. y +. z <. -. t) and (x >. y)) or ((z <=. t) xor (x >=. z))
  consequence equals 0.
  definition o equals -1.
```

```catala-test-inline
$ catala DCalc -s A
let scope A
  (A_in: A_in {x_in: decimal; y_in: decimal; z_in: decimal; t_in: decimal})
  : A {o: decimal}
  =
  let get x : decimal = A_in.x_in in
  let get y : decimal = A_in.y_in in
  let get z : decimal = A_in.z_in in
  let get t : decimal = A_in.t_in in
  let set o : decimal =
    error_empty
      ⟨ ⟨ ⟨(~ (x - y + z < - t && x > y)) || (z <= t xor x >= z) ⊢ ⟨0.⟩⟩
        | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨-1.⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . t_in = 42.0
[RESULT] . x_in = 42.0
[RESULT] . y_in = 42.0
[RESULT] . z_in = 42.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0.0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . t_in = -0.5
[RESULT] . x_in = -0.25
[RESULT] . y_in = -0.5
[RESULT] . z_in = 0.0
[RESULT] Output of scope after evaluation:
[RESULT] . o = -1.0
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```


