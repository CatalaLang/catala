## Article

```catala
declaration enumeration E:
  -- Case1 content integer
  -- Case2
  -- Case3
```

```catala
declaration scope A:
  input x content E
  output o content integer

scope A:
  definition o equals match x with pattern
    -- Case2 : 42
    -- anything : 31
```

```catala
declaration scope B:
  input x content E
  output o content integer

scope B:
  definition o equals match x with pattern
    -- Case2 : 42
    -- Case1 of i : i
    -- anything : 31
```

Note that at the DCalc level, `anything` is already "desugared" into an
exhaustive list of constructors, so I don't think I can catch it right now.

```catala-test-inline
$ catala DCalc -s A
let scope A
  (A_in: A_in {x_in: E[Case1: integer | Case2: unit | Case3: unit]})
  : A {o: integer}
  =
  let get x : E[Case1: integer | Case2: unit | Case3: unit] = A_in.x_in in
  let set o : integer =
    error_empty
      ⟨ ⟨true ⊢ ⟨match x with
                 | Case1 _ → 31
                 | Case2 _ → 42
                 | Case3 _ → 31⟩⟩
      | false ⊢ ∅ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = Case1 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 31
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = Case2 ()
[RESULT] Output of scope after evaluation:
[RESULT] . o = 42
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = Case3 ()
[RESULT] Output of scope after evaluation:
[RESULT] . o = 31
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

```catala-test-inline
$ catala DCalc -s B
let scope B
  (B_in: B_in {x_in: E[Case1: integer | Case2: unit | Case3: unit]})
  : B {o: integer}
  =
  let get x : E[Case1: integer | Case2: unit | Case3: unit] = B_in.x_in in
  let set o : integer =
    error_empty
      ⟨ ⟨true ⊢ ⟨match x with
                 | Case1 i → i
                 | Case2 _ → 42
                 | Case3 _ → 31⟩⟩
      | false ⊢ ∅ ⟩
  in
  return { B o = o; }
```

```catala-test-inline
$ catala Concolic -s B
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = Case1 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 42
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = Case2 ()
[RESULT] Output of scope after evaluation:
[RESULT] . o = 42
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = Case3 ()
[RESULT] Output of scope after evaluation:
[RESULT] . o = 31
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```
