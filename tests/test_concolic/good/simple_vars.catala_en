## Article

```catala
declaration scope A:
  input b content boolean
  input x content integer
  output o content integer

scope A:
  definition o equals 12
  exception definition o under condition b consequence equals x
```

```catala-test-inline
$ catala DCalc -s A
let scope A (A_in: A_in {b_in: bool; x_in: integer}): A {o: integer} =
  let get b : bool = A_in.b_in in
  let get x : integer = A_in.x_in in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨b ⊢ ⟨x⟩⟩ | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨12⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . b_in = true
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 42
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . b_in = false
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 12
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

