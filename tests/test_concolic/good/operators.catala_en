## Article

```catala
declaration scope A:
  input x content integer
  input y content integer
  input z content integer
  input t content integer
  output o content integer

scope A:
  exception definition o under condition not ((x*y+z < -t) and (x > y)) or ((z <= t) xor (x >= z))
  consequence equals 0
  definition o equals -1
```

```catala-test-inline
$ catala DCalc -s A
let scope A
  (A_in: A_in {x_in: integer; y_in: integer; z_in: integer; t_in: integer})
  : A {o: integer}
  =
  let get x : integer = A_in.x_in in
  let get y : integer = A_in.y_in in
  let get z : integer = A_in.z_in in
  let get t : integer = A_in.t_in in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨(~ (x * y + z < - t && x > y)) || (z <= t xor x >= z) ⊢ ⟨0⟩⟩
        | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨-1⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . t_in = 42
[RESULT] . x_in = 42
[RESULT] . y_in = 42
[RESULT] . z_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . t_in = 1
[RESULT] . x_in = 7
[RESULT] . y_in = 0
[RESULT] . z_in = -4
[RESULT] Output of scope after evaluation:
[RESULT] . o = -1
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

