## Article

```catala
declaration scope A:
    input x content integer
    output o content integer

scope A:
    label l0
    definition o equals 0

    label l1_0
    exception l0 definition o under condition x=1 consequence equals 1
    label l1_1
    exception l0 definition o under condition x>1 consequence equals 2

    label l2
    exception l1_1 definition o under condition x=30 consequence equals 3
```

```catala-test-inline
$ catala DCalc -s A
let scope A (A_in: A_in {x_in: integer}): A {o: integer} =
  let get x : integer = A_in.x_in in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨ ⟨x = 30 ⊢ ⟨3⟩⟩ | false ⊢ ∅ ⟩
        | true ⊢ ⟨ ⟨x > 1 ⊢ ⟨2⟩⟩ | false ⊢ ∅ ⟩ ⟩,
        ⟨ ⟨x = 1 ⊢ ⟨1⟩⟩ | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨0⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 0
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 1
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . x_in = 30
[RESULT] Output of scope after evaluation:
[RESULT] . o = 3
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

