## Article

```catala
declaration enumeration EnumA:
-- A1 content integer
-- A2 content boolean

declaration enumeration EnumB:
-- B1 content EnumA
-- B2

declaration scope A:
  input x content integer
  input a content EnumA
  input b content EnumB
  output o content integer

scope A:
    definition o equals -1
    exception definition o under condition b = B1 content a and a = A1 content x consequence equals 0
    exception definition o under condition b = B1 content (A2 content false) consequence equals 1
    exception definition o under condition b = B2 consequence equals 2
```

Note that this is also a test for units. They do not appear in the surface
language but through `B2`, which is encoded as `B2 ()`.

```catala-test-inline
$ catala DCalc -s A
let scope A
  (A_in:
     A_in {
       x_in: integer;
       a_in: EnumA[A1: integer | A2: bool];
       b_in: EnumB[B1: EnumA[A1: integer | A2: bool] | B2: unit]
     })
  : A {o: integer}
  =
  let get x : integer = A_in.x_in in
  let get a : EnumA[A1: integer | A2: bool] = A_in.a_in in
  let get b : EnumB[B1: EnumA[A1: integer | A2: bool] | B2: unit] =
    A_in.b_in
  in
  let set o : integer =
    error_empty
      ⟨ ⟨ ⟨b = B1 a && a = A1 x ⊢ ⟨0⟩⟩, ⟨b = B1 (A2 false) ⊢ ⟨1⟩⟩,
          ⟨b = B2 () ⊢ ⟨2⟩⟩
        | false ⊢ ∅ ⟩
      | true ⊢ ⟨ ⟨true ⊢ ⟨-1⟩⟩ | false ⊢ ∅ ⟩ ⟩
  in
  return { A o = o; }
```

```catala-test-inline
$ catala Concolic -s A
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . a_in = A1 42
[RESULT] . b_in = B1 A1 42
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 0
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . a_in = A1 2
[RESULT] . b_in = B1 A1 3
[RESULT] . x_in = 4
[RESULT] Output of scope after evaluation:
[RESULT] . o = -1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . a_in = A1 42
[RESULT] . b_in = B1 A2 false
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 1
[RESULT] 
[RESULT] Evaluating with inputs:
[RESULT] . a_in = A1 42
[RESULT] . b_in = B2 ()
[RESULT] . x_in = 42
[RESULT] Output of scope after evaluation:
[RESULT] . o = 2
[RESULT] 
[RESULT] Concolic interpreter done
[RESULT] Computation successful!
```

