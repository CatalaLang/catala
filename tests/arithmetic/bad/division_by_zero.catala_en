## `Division_by_zero` exception management

### with integers

```catala
declaration scope Int:
  output i content decimal

scope Int:
  definition i equals 1 / 0
```

### with decimals

```catala
declaration scope Dec:
  output i content decimal

scope Dec:
  definition i equals 1. / 0.
```

### with money

```catala
declaration scope Money:
  output i content decimal

scope Money:
  definition i equals $10.0 / $0.0
```


```catala-test-inline
$ catala Interpret -s Dec
[ERROR] Error during evaluation: division by zero.

┌─⯈ tests/arithmetic/bad/division_by_zero.catala_en:20.23-20.30:
└──┐
20 │   definition i equals 1. / 0.
   │                       ‾‾‾‾‾‾‾
   └┬ `Division_by_zero` exception management
    └─ with decimals
#return code 123#
```


Fixme: the following should give the same result as above, but the optimisation pass propagates the position surrounding the `ErrorOnEmpty` and loses the position of the actual division expression which was in the `cons` of the default term. Unfortunately this is non-trivial due to the bindlib boxing tricks.
```catala-test-inline
$ catala Interpret -O -s Dec
[ERROR] Error during evaluation: division by zero.

┌─⯈ tests/arithmetic/bad/division_by_zero.catala_en:17.10-17.11:
└──┐
17 │   output i content decimal
   │          ‾
   └┬ `Division_by_zero` exception management
    └─ with decimals
#return code 123#
```

```catala-test-inline
$ catala interpret -s Int
[ERROR] Error during evaluation: division by zero.

┌─⯈ tests/arithmetic/bad/division_by_zero.catala_en:10.23-10.28:
└──┐
10 │   definition i equals 1 / 0
   │                       ‾‾‾‾‾
   └┬ `Division_by_zero` exception management
    └─ with integers
#return code 123#
```

```catala-test-inline
$ catala Interpret -s Money
[ERROR] Error during evaluation: division by zero.

┌─⯈ tests/arithmetic/bad/division_by_zero.catala_en:30.23-30.35:
└──┐
30 │   definition i equals $10.0 / $0.0
   │                       ‾‾‾‾‾‾‾‾‾‾‾‾
   └┬ `Division_by_zero` exception management
    └─ with money
#return code 123#
```
