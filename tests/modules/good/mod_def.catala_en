# Test modules + inclusions 1

> Module Mod_def

```catala-metadata
declaration enumeration Enum1:
  -- Yes
  -- No
  -- Maybe

declaration structure Str1:
  data fld1 content Enum1
  data fld2 content integer

#[test] declaration scope S:
  output sr content money
  output e1 content Enum1

declaration half content decimal
  depends on x content integer
  equals x / 2

declaration maybe content Enum1
  depends on x content Enum1
```

```catala
scope S:
  definition sr equals $1,000
  definition e1 equals Maybe


declaration maybe content Enum1
  depends on x content Enum1
  equals Maybe
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala typecheck --disable-warnings
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala ocaml --disable-warnings
(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module Enum1 = struct
  type t = Yes of unit | No of unit | Maybe of unit
end

module S = struct
  type t = {sr: money; e1: Enum1.t}
end

module Str1 = struct
  type t = {fld1: Enum1.t; fld2: integer}
end

module S_in = struct
  type t = unit
end


(* Scope S *)
let s : S_in.t -> S.t = fun _ ->
  let sr: money =
    match
      (Eoption.ESome
         ((money_of_cents_string "100000"),
           ({filename="tests/modules/good/mod_def.catala_en";
             start_line=29; start_column=24; end_line=29; end_column=30;
             law_headings=["Test modules + inclusions 1"]})))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/modules/good/mod_def.catala_en";
                                                 start_line=16; start_column=10;
                                                 end_line=16; end_column=12;
                                                 law_headings=["Test modules + inclusions 1"]}])))
    | Eoption.ESome arg -> (let x, _ = arg in x) in
  let e1: Enum1.t =
    match
      (Eoption.ESome
         ((Enum1.Maybe ()),
           ({filename="tests/modules/good/mod_def.catala_en";
             start_line=30; start_column=24; end_line=30; end_column=29;
             law_headings=["Test modules + inclusions 1"]})))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="tests/modules/good/mod_def.catala_en";
                                                 start_line=17; start_column=10;
                                                 end_line=17; end_column=12;
                                                 law_headings=["Test modules + inclusions 1"]}])))
    | Eoption.ESome arg -> (let x, _ = arg in x) in
  {S.sr = sr; S.e1 = e1}

(* Toplevel def half *)
let half : integer -> decimal =
  fun (x: integer) ->
    o_div_int_int
      {filename="tests/modules/good/mod_def.catala_en";
       start_line=21; start_column=14; end_line=21; end_column=15;
       law_headings=["Test modules + inclusions 1"]} x (integer_of_string
      "2")

(* Toplevel def maybe *)
let maybe : Enum1.t -> Enum1.t =
  fun (_: Enum1.t) -> Enum1.Maybe ()

let () =
  Runtime_ocaml.Runtime.register_module "Mod_def"
    [ "S", Obj.repr s;
      "half", Obj.repr half;
      "maybe", Obj.repr maybe ]
    "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
```
