This test exposes a name clash between the scope function (`ScopeName,`
rewritten to `scope_name`) and the scope variable `scope_name`.

```catala
declaration scope SomeNâme:
  input i content integer
  output o content integer

scope SomeNâme:
  definition o equals i + 1

#[test]
declaration scope B:
  output some_nâme scope SomeNâme

scope B:
  definition some_nâme.i equals 1
```

```catala-test-cli
$ catala python
# This file has been generated by the Catala compiler, do not edit!

from catala_runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum
from . import Stdlib_en as stdlib_en
from . import Date_en as date_en
from . import Period_en as period_en

class SomeName:
    def __init__(self, o: Integer) -> None:
        self.o = o

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SomeName):
            return (self.o == other.o)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SomeName(o={})".format(self.o)

class B:
    def __init__(self, some_name: SomeName) -> None:
        self.some_name = some_name

    def __eq__(self, other: object) -> bool:
        if isinstance(other, B):
            return (self.some_name == other.some_name)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "B(some_name={})".format(self.some_name)

class BIn:
    def __init__(self, ) -> None:
        pass

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BIn):
            return (True)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "BIn()".format()

class SomeNameIn:
    def __init__(self, i_in: Integer) -> None:
        self.i_in = i_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SomeNameIn):
            return (self.i_in == other.i_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SomeNameIn(i_in={})".format(self.i_in)


def some_name(some_name_in:SomeNameIn):
    i = (some_name_in.i_in)
    pos = (SourcePosition(
               filename="tests/backends/python_name_clash.catala_en",
               start_line=10, start_column=23, end_line=10, end_column=28,
               law_headings=[]))
    o__1 = (((i + integer_of_string("1")), pos))
    if o__1 is None:
        pos__1 = (SourcePosition(
                      filename="tests/backends/python_name_clash.catala_en",
                      start_line=7, start_column=10,
                      end_line=7, end_column=11, law_headings=[]))
        raise NoValue(pos__1)
    else:
        o = (o__1[0])
    return SomeName(o = o)

def b(b_in:BIn):
    pos = (SourcePosition(
               filename="tests/backends/python_name_clash.catala_en",
               start_line=17, start_column=33, end_line=17, end_column=34,
               law_headings=[]))
    result__2 = ((integer_of_string("1"), pos))
    if result__2 is None:
        pos__1 = (SourcePosition(
                      filename="tests/backends/python_name_clash.catala_en",
                      start_line=17, start_column=14,
                      end_line=17, end_column=25, law_headings=[]))
        raise NoValue(pos__1)
    else:
        result__1 = (result__2[0])
    result = (some_name(SomeNameIn(i_in = result__1)))
    result__3 = (SomeName(o = result.o))
    if True:
        some_name__1 = (result__3)
    else:
        some_name__1 = (result__3)
    return B(some_name = some_name__1)

# Automatic Catala tests
if __name__ == "__main__":
  b_test = (b(BIn()))
  print("\x1b[32m[RESULT]\x1b[m Scope B executed successfully.")
```
The above should *not* show `some_name = temp_some_name`, but instead `some_name_1 = ...`
