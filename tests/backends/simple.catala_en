```catala
declaration structure Foo:
  data x content boolean
  data y content decimal

declaration enumeration Bar:
  -- No
  -- Yes content Foo

#[test]
declaration scope Baz:
  context a content Bar
  output b content decimal
  output c content list of decimal

scope Baz:
  definition a equals No

  definition b equals
    match a with pattern
    -- No: 0.0
    -- Yes content foo: foo.y + if foo.x then 1.0 else 0.0

  exception definition b under condition
    a with pattern No
  consequence equals 42.0

  definition c equals [b;b]
```


```catala-test-cli
$ catala c
/* This file has been generated by the Catala compiler, do not edit! */

#include <stdio.h>
#include <stdlib.h>
#include <catala_runtime.h>

#include <Stdlib_en.h>
#include <Date_en.h>
#include <Period_en.h>
#include <Money_en.h>

typedef struct Foo {
  CATALA_BOOL x;
  CATALA_DEC y;
} Foo;

typedef struct Baz {
  CATALA_DEC b;
  const CATALA_ARRAY(CATALA_DEC) c;
} Baz;

enum Bar__code {
  Bar__NO,
  Bar__YES
};

typedef struct Bar {
  enum Bar__code code;
  union {
    CATALA_UNIT Bar__NO;
    const Foo* Bar__YES;
  } payload;
} Bar;

typedef struct Baz_in {
  const CATALA_OPTION(CATALA_TUPLE(Bar*;CATALA_POSITION)) a_in;
} Baz_in;

const Baz* baz (const Baz_in* baz_in)
{
  const CATALA_OPTION(CATALA_TUPLE(Bar*;CATALA_POSITION)) a = baz_in->a_in;
  const Bar* a__1;
  const CATALA_OPTION(CATALA_TUPLE(Bar*;CATALA_POSITION)) a__2;
  CATALA_DEC b;
  const CATALA_OPTION(CATALA_TUPLE(CATALA_DEC;CATALA_POSITION)) b__1;
  const CATALA_OPTION(CATALA_TUPLE(CATALA_DEC;CATALA_POSITION)) b__2;
  CATALA_BOOL b__3;
  const CATALA_ARRAY(CATALA_DEC) c;
  CATALA_ARRAY(CATALA_DEC) const c__3 = catala_malloc(sizeof(catala_array));
  static const catala_code_position pos[1] =
    {{"tests/backends/simple.catala_en", 28, 23, 28, 28}};
  CATALA_TUPLE(CATALA_ARRAY(CATALA_DEC);CATALA_POSITION) const c__2 =
    catala_malloc(2 * sizeof(tuple_element*));
  const CATALA_OPTION(CATALA_TUPLE(CATALA_ARRAY(CATALA_DEC);CATALA_POSITION))
    c__1;
  Baz* const baz__1 = catala_malloc(sizeof(Baz));
  if (a->code == catala_option_some) {
    a__2 = catala_some(a->payload);
  } else {
    const Bar* a__4;
    Bar* const a__7 = catala_malloc(sizeof(Bar));
    static const catala_code_position pos[1] =
      {{"tests/backends/simple.catala_en", 17, 23, 17, 25}};
    CATALA_TUPLE(Bar*;CATALA_POSITION) const a__6 =
      catala_malloc(2 * sizeof(tuple_element*));
    const CATALA_OPTION(CATALA_TUPLE(Bar*;CATALA_POSITION)) a__5;
    static const catala_code_position pos__1[1] =
      {{"tests/backends/simple.catala_en", 12, 11, 12, 12}};
    CATALA_TUPLE(Bar*;CATALA_POSITION) const a__3 =
      catala_malloc(2 * sizeof(tuple_element*));
    a__7->code = Bar__NO;
    a__7->payload.Bar__NO = CATALA_UNITVAL;
    a__6[0].content = a__7;
    a__6[1].content = pos;
    a__5 = catala_some(a__6);
    if (a__5->code == catala_option_some) {
      a__4 = ((Bar*)(((CATALA_TUPLE(_))a__5->payload)[0].content));
    } else {
      static const catala_code_position pos__1[1] =
        {{"tests/backends/simple.catala_en", 12, 11, 12, 12}};
      catala_error(catala_no_value, pos__1, 1);
      abort();
    }
    a__3[0].content = a__4;
    a__3[1].content = pos__1;
    a__2 = catala_some(a__3);
  }
  if (a__2->code == catala_option_some) {
    a__1 = ((Bar*)(((CATALA_TUPLE(_))a__2->payload)[0].content));
  } else {
    static const catala_code_position pos[1] =
      {{"tests/backends/simple.catala_en", 12, 11, 12, 12}};
    catala_error(catala_no_value, pos, 1);
    abort();
  }
  switch (a__1->code) {
    case Bar__NO: {
      b__3 = CATALA_TRUE;
      break;
    }
    case Bar__YES: {
      b__3 = CATALA_FALSE;
      break;
    }
    default:
      abort();
  }
  if (b__3 == CATALA_TRUE) {
    static const catala_code_position pos[1] =
      {{"tests/backends/simple.catala_en", 26, 22, 26, 26}};
    CATALA_TUPLE(CATALA_DEC;CATALA_POSITION) const b__4 =
      catala_malloc(2 * sizeof(tuple_element*));
    b__4[0].content = catala_new_dec_str("42");
    b__4[1].content = pos;
    b__2 = catala_some(b__4);
  } else {
    b__2 = CATALA_NONE;
  }
  if (b__2->code == catala_option_some) {
    b__1 = catala_some(b__2->payload);
  } else {
    CATALA_DEC b__5;
    static const catala_code_position pos[1] =
      {{"tests/backends/simple.catala_en", 20, 5, 22, 59}};
    CATALA_TUPLE(CATALA_DEC;CATALA_POSITION) const b__4 =
      catala_malloc(2 * sizeof(tuple_element*));
    switch (a__1->code) {
      case Bar__NO: {
        b__5 = catala_new_dec_str("0");
        break;
      }
      case Bar__YES: {
        const Foo* foo = a__1->payload.Bar__YES;
        CATALA_DEC b__6;
        if (foo->x == CATALA_TRUE) {
          b__6 = catala_new_dec_str("1");
        } else {
          b__6 = catala_new_dec_str("0");
        }
        b__5 = o_add_rat_rat(foo->y, b__6);
        break;
      }
      default:
        abort();
    }
    b__4[0].content = b__5;
    b__4[1].content = pos;
    b__1 = catala_some(b__4);
  }
  if (b__1->code == catala_option_some) {
    b = ((CATALA_DEC)(((CATALA_TUPLE(_))b__1->payload)[0].content));
  } else {
    static const catala_code_position pos[1] =
      {{"tests/backends/simple.catala_en", 13, 10, 13, 11}};
    catala_error(catala_no_value, pos, 1);
    abort();
  }
  c__3->size = 2;
  c__3->elements = catala_malloc(2 * sizeof(void*));
  c__3->elements[0] = b;
  c__3->elements[1] = b;
  c__2[0].content = c__3;
  c__2[1].content = pos;
  c__1 = catala_some(c__2);
  if (c__1->code == catala_option_some) {
    c = ((CATALA_ARRAY(CATALA_DEC))(((CATALA_TUPLE(_))c__1->payload)[0].content));
  } else {
    static const catala_code_position pos__1[1] =
      {{"tests/backends/simple.catala_en", 14, 10, 14, 11}};
    catala_error(catala_no_value, pos__1, 1);
    abort();
  }
  baz__1->b = b;
  baz__1->c = c;
  return baz__1;
}

```
