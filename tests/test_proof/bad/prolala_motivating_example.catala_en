# ProLaLa 2022 Super Cash Bonus

Demo: https://asciinema.org/a/461790

## Eligibility

```catala-metadata
declaration scope Eligibility:
  internal is_student content boolean
  internal is_professor content boolean
  output is_eligible content boolean
  output is_eligible_correct condition

scope Eligibility:
  definition is_student equals true
  definition is_professor equals false
```

### Article 1

All students are eligible to the ProLaLa 2022 Super Cash Bonus.

```catala
scope Eligibility:
  definition is_eligible under condition is_student consequence equals true
```

### Article 2

Professors are not eligible to the ProLaLa 2022 Super Cash Bonus.

```catala
scope Eligibility:
  definition is_eligible under condition is_professor consequence equals false
```

### Correct solution for eligibility

These definitions appear sound but our static analysis reveal that they fail
both to be complete (there is always a definition that applies) and safe
(no two definitions apply at the same time). The correct intended behavior relies
on a default negative eligibility and an exception:

```catala
scope Eligibility:
  definition is_eligible_correct under condition is_student consequence equals true

  exception
  definition is_eligible_correct under condition is_professor consequence equals false
```

## Amount

```catala-metadata
declaration scope Amount:
  eligibility scope Eligibility
  internal is_student content boolean
  internal is_professor content boolean
  internal number_of_advisors content integer
  output amount content integer
  output correct_amount content integer

scope Amount:
  definition eligibility.is_student equals is_student
  definition eligibility.is_professor equals is_professor

scope Amount:
  definition is_student equals true
  definition is_professor equals false
  definition number_of_advisors equals 3
```

## Article 1

Eligible people that have 2 or less advisors will receive a ProLaLa 2022 Super Cash Bonus
of a hundred times the number of advisors.

```catala
scope Amount:
  definition amount under condition
    eligibility.is_eligible and
    (number_of_advisors <= 2)
  consequence equals
    100 * number_of_advisors
```

## Article 2

Eligible people that have more than 3 advisors will receive a ProLaLa 2022 Super Cash Bonus
of a 80 times the number of advisors.

```catala
scope Amount:
  definition amount under condition
    eligibility.is_eligible and
    number_of_advisors > 3
  consequence equals
    80 * number_of_advisors
```

### Correct solution for eligibility

These definitions appear sound but our static analysis reveal that they fail
to be complete (there is always a definition that applies).
The correct intended behavior relies on a default amount plus exceptions:

```catala
scope Amount:
  definition correct_amount equals 0

  exception definition correct_amount under condition
    eligibility.is_eligible and
    (number_of_advisors <= 2)
  consequence equals
    100 * number_of_advisors

  exception definition correct_amount under condition
    eligibility.is_eligible and
    number_of_advisors >= 3
  consequence equals
    80 * number_of_advisors
```

```catala-test-inline
$ catala Proof --disable_counterexamples 
[ERROR]
It is impossible to give a definition to a subscope variable not tagged as input or context.

Incriminated subscope:
┌─⯈ tests/test_proof/bad/prolala_motivating_example.catala_en:56.3-56.14:
└──┐
56 │   eligibility scope Eligibility
   │   ‾‾‾‾‾‾‾‾‾‾‾
   └┬ ProLaLa 2022 Super Cash Bonus
    └─ Amount

Incriminated variable:
┌─⯈ tests/test_proof/bad/prolala_motivating_example.catala_en:9.12-9.22:
└─┐
9 │   internal is_student content boolean
  │            ‾‾‾‾‾‾‾‾‾‾
  └┬ ProLaLa 2022 Super Cash Bonus
   └─ Eligibility

Incriminated subscope variable definition:
┌─⯈ tests/test_proof/bad/prolala_motivating_example.catala_en:64.3-64.36:
└──┐
64 │   definition eligibility.is_student equals is_student
   │   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
#return code 123#
```
