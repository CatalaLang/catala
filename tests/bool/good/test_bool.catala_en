## Article

```catala
#[test] declaration scope TestBool:
  context output foo content boolean
  context output bar content integer

scope TestBool:
  definition bar equals 1
  definition foo under condition bar >= 0 consequence equals true
  definition foo under condition bar < 0 consequence equals false
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala Dcalc 

#[test]
type TestBool_in = { foo_in: ⟨bool⟩; bar_in: ⟨integer⟩; }

#[test]
type TestBool = { foo: bool; bar: integer; }

#[test]
let scope TestBool (TestBool_in: TestBool_in): TestBool =
  let get foo : ⟨bool⟩ = TestBool_in.foo_in in
  let get bar : ⟨integer⟩ = TestBool_in.bar_in in
  let set bar : integer =
    error_empty ⟨ bar | true ⊢ ⟨error_empty ⟨ ⟨true ⊢ ⟨1⟩⟩ | false ⊢ ∅ ⟩⟩ ⟩
  in
  let set foo : bool =
    error_empty
      ⟨ foo
      | true
        ⊢ ⟨error_empty
             ⟨ ⟨bar >= 0 ⊢ ⟨true⟩⟩, ⟨bar < 0 ⊢ ⟨false⟩⟩ | false ⊢ ∅ ⟩⟩ ⟩
  in
  return { TestBool foo = foo; bar = bar; }

```

```catala-test-cli
$ catala test-scope TestBool
┌─[RESULT]─ TestBool ─
│ bar = 1
│ foo = true
└─
```

```catala-test-cli
$ catala Scopelang 

#[test]
type TestBool = { foo: bool; bar: integer; }


#[test]
let scope TestBool
    (foo: ⟨bool⟩|context|output)
    (bar: ⟨integer⟩|context|output)
  =
  let bar : integer = reentrant or by default error_empty ⟨ ⟨true ⊢ ⟨1⟩⟩ | false ⊢ ∅ ⟩;
  let foo : bool = reentrant or by default
    error_empty ⟨ ⟨bar >= 0 ⊢ ⟨true⟩⟩, ⟨bar < 0 ⊢ ⟨false⟩⟩ | false ⊢ ∅ ⟩
```
