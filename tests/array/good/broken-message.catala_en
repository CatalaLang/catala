## Article

```catala
declaration scope A:
  output x content list of money
  output y content list of decimal

scope A:
   definition x equals [$12; $13.50; $11; $100.1; $50.20]
   definition y equals [1.0; 2.0; 3.0; 4.0; 5.9]

declaration scope B:
  a scope A
  output reverse content list of money
  output ratios1 content (list of money, money)

scope B:
  definition reverse equals
    # Only this case was changed compared to `fold.catala_en`
    combine acc initially [$0] with
      (x ++ acc) for x among a.x
    #  ^ Error should be here (money, while expected list because of `++`)

  definition ratios1 equals
    combine (acc1, acc2) initially ([], $1) with
      (acc1 ++ [x + acc2], acc2 + x) for x among a.x
```

There was an error -- now fixed -- where the issue was pointed on `x+acc2` with
a confusing message.

This was diagnosed to be due to delayed error messages that got skipped.

```catala-test-inline
$ catala Typecheck --check-invariants
┌─[ERROR]─
│
│  Error during typechecking, incompatible types:
│  ─➤ money
│  ─➤ list of money
│
│ While typechecking the following expression:
├─➤ tests/array/good/broken-message.catala_en:21.8-21.9:
│    │
│ 21 │       (x ++ acc) for x among a.x
│    │        ‾
├─ Article
│
│ Type money is coming from:
├─➤ tests/array/good/broken-message.catala_en:5.28-5.33:
│   │
│ 5 │   output x content list of money
│   │                            ‾‾‾‾‾
├─ Article
│
│ Type list of money is coming from:
├─➤ tests/array/good/broken-message.catala_en:21.10-21.12:
│    │
│ 21 │       (x ++ acc) for x among a.x
│    │          ‾‾
└─ Article
#return code 123#
```
