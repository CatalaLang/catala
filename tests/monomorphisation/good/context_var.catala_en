## Testing monomorphisation on context variables

```catala
declaration scope TestXor:
  context output t content boolean

scope TestXor:
  definition t equals true
```

```catala-test-inline
$ catala lcalc --monomorphize-types
type option_1 = | None_1 of unit | Some_1 of tuple_1 {
                                               elt_0: bool;
                                               elt_1: source_position
                                             }

type TestXor_in = {
  t_in: option_1[None_1: unit | Some_1:
          tuple_1 {elt_0: bool; elt_1: source_position}];
}
type TestXor = { t: bool; }
type tuple_1 = { elt_0: bool; elt_1: source_position; }

let scope test_xor
  (test_xor_in:
     TestXor_in {
       t_in:
         option_1[None_1: unit | Some_1:
           tuple_1 {elt_0: bool; elt_1: source_position}]
     })
  : TestXor {t: bool}
  =
  let get t :
      option_1[None_1: unit | Some_1:
        tuple_1 {elt_0: bool; elt_1: source_position}] =
    test_xor_in.t_in
  in
  let set t__1 : bool =
    match
      (match t with
       | None_1 →
         Some_1
           { tuple_1
             elt_0 =
               match
                 (Some_1
                    { tuple_1 elt_0 = true; elt_1 = <context_var:8.23-27>; })
               with
               | None_1 → error NoValue
               | Some_1 arg → arg.elt_0;
             elt_1 = <context_var:5.18-19>;
           }
       | Some_1 x → Some_1 x)
    with
    | None_1 → error NoValue
    | Some_1 arg → arg.elt_0
  in
  return { TestXor t = t__1; }

```

```catala
declaration scope TestXor2:
  t scope TestXor
  output o content boolean

scope TestXor2:
  definition o equals t.t
```

```catala-test-inline
$ catala lcalc --monomorphize-types -s TestXor2
let scope TestXor2 (test_xor2_in: TestXor2_in): TestXor2 {o: bool} =
  let set t : TestXor {t: bool} =
    let result : TestXor = test_xor { TestXor_in t_in = None_1 (); } in
    let result__1 : TestXor = { TestXor t = result.t; } in
    if true then result__1 else result__1
  in
  let set o : bool =
    match
      (Some_1 { tuple_1 elt_0 = t.t; elt_1 = <context_var:69.23-26>; })
    with
    | None_1 → error NoValue
    | Some_1 arg → arg.elt_0
  in
  return { TestXor2 o = o; }
```

