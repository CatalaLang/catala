## Article

```catala
declaration structure S:
  data x content integer
  data y content boolean

declaration structure T:
  data a content S
  data b content S

declaration scope A:
  context output t content T

declaration scope B:
  context output t content T
  a scope A
  context output out content integer

scope A:
  definition t equals T {
    -- a : S {
      -- x : 0
      -- y : false
    }
    -- b : S {
      -- x : 1
      -- y : true
    }
  }

scope B:
  definition t equals a.t
  definition out equals if t.a.y then t.a.x else (if t.b.y then t.b.x else 42)
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [84/84]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [4/4]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [4/4]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [9/9]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT]
t = T { -- a: S { -- x: 0 -- y: false } -- b: S { -- x: 1 -- y: true } }
```

```catala-test-inline
$ catala Interpret -s B
[RESULT] Computation successful! Results:
[RESULT] out = 1
[RESULT]
t = T { -- a: S { -- x: 0 -- y: false } -- b: S { -- x: 1 -- y: true } }
```
```catala-test-inline
$ catala Interpret_Lcalc -s A --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT]
t = T { -- a: S { -- x: 0 -- y: false } -- b: S { -- x: 1 -- y: true } }
```
```catala-test-inline
$ catala Interpret_Lcalc -s B --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] out = 1
[RESULT]
t = T { -- a: S { -- x: 0 -- y: false } -- b: S { -- x: 1 -- y: true } }
```
