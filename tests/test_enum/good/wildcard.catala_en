## Unit testing for wildcard in patterns

```catala
declaration enumeration E:
  -- Case1 content integer
  -- Case2
  -- Case3
```

### Simple case

```catala
declaration scope Simple_case:
  context output x content E
  context output y content integer

scope Simple_case:
  definition x equals Case1 content 2
  definition y equals match x with pattern
    -- Case2 : 42
    -- anything : 31
```

### Simple case 2

```catala
declaration scope Simple_case_2:
  context output x content E
  context output y content integer

scope Simple_case_2:
  definition x equals Case3
  definition y equals match x with pattern
    -- Case2 : 42
    -- Case1 of i : i
    -- anything : 31
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [90/90]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [2/2]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [4/4]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [6/6]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [4/4]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [12/12]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s Simple_case_2
[RESULT] Computation successful! Results:
[RESULT] x = Case3 ()
[RESULT] y = 31
```

```catala-test-inline
$ catala Interpret -s Simple_case
[RESULT] Computation successful! Results:
[RESULT] x = Case1 2
[RESULT] y = 31
```
```catala-test-inline
$ catala Interpret_Lcalc -s Simple_case_2 --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] x = Case3 ()
[RESULT] y = 31
```
```catala-test-inline
$ catala Interpret_Lcalc -s Simple_case --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] x = Case1 2
[RESULT] y = 31
```
