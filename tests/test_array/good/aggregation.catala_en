## Article

```catala
declaration scope A:
   output x content collection money

scope A:
   definition x equals [$0; $4 + $5; $8 * 0.65]

declaration scope B:
   a scope A
   output max content money
   output min content money
   output y content money
   output z content integer

scope B:
   definition max equals maximum of (m * 2.0) for m among a.x
                         or if collection empty then $0
   definition min equals minimum of (m + $5) for m among a.x
                         or if collection empty then $20
   definition y equals sum money of (m + $1) for m among a.x
   definition z equals number of m among a.x such that m >= $8.95
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [121/121]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [18/18]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [7/7]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [18/18]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [10/10]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s A
[RESULT] Computation successful! Results:
[RESULT] x = [$0.00; $9.00; $5.20]
```

```catala-test-inline
$ catala Interpret -s B
[RESULT] Computation successful! Results:
[RESULT] max = $18.00
[RESULT] min = $5.00
[RESULT] y = $17.20
[RESULT] z = 1
```
```catala-test-inline
$ catala Interpret_Lcalc -s A --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] x = [$0.00; $9.00; $5.20]
```
```catala-test-inline
$ catala Interpret_Lcalc -s B --avoid_exceptions --optimize
[RESULT] Computation successful! Results:
[RESULT] max = $18.00
[RESULT] min = $5.00
[RESULT] y = $17.20
[RESULT] z = 1
```
