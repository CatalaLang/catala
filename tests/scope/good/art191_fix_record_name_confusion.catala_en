## Article

```catala
#[test] declaration scope ScopeA:
  output a content boolean

#[test] declaration scope ScopeB:
  output a content boolean
  scopeA scope ScopeA

scope ScopeA:
  definition a equals true

scope ScopeB:
  definition a equals scopeA.a
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala OCaml -O
(** This file has been generated by the Catala compiler, do not edit! *)

open Catala_runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


let () =
  match Catala_runtime.check_module "Stdlib_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Stdlib_en, it may need recompiling"
module Stdlib_en = Stdlib_en
let () =
  match Catala_runtime.check_module "Date_en" "CMX|XXXXXXXX|XXXXXXXX|XXXXXXXX"
    with
  | Ok () -> ()
  | Error h -> failwith "Hash mismatch for module Date_en, it may need recompiling"
module Date_en = Date_en

module ScopeA = struct
  type t = {a: bool}
end

module ScopeB = struct
  type t = {a: bool}
end

module ScopeA_in = struct
  type t = unit
end

module ScopeB_in = struct
  type t = unit
end


(* Scope ScopeA *)
let scope_a : ScopeA_in.t -> ScopeA.t = fun _ ->
  let a: bool = true in
  {ScopeA.a = a}

(* Scope ScopeB *)
let scope_b : ScopeB_in.t -> ScopeB.t = fun _ ->
  let scope_a__1: ScopeA.t =
    (let result : ScopeA.t = (scope_a (()))
    in
    ({ScopeA.a = (result.ScopeA.a)})) in
  let a: bool = scope_a__1.ScopeA.a in
  {ScopeB.a = a}
```
