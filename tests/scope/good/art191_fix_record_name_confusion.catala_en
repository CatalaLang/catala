## Article

```catala
#[test] declaration scope ScopeA:
  output a content boolean

#[test] declaration scope ScopeB:
  output a content boolean
  scopeA scope ScopeA

scope ScopeA:
  definition a equals true

scope ScopeB:
  definition a equals scopeA.a
```



```catala-test-cli
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-cli
$ catala OCaml -O
(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module ScopeA = struct
  type t = {a: bool}
end

module ScopeB = struct
  type t = {a: bool}
end

module ScopeA_in = struct
  type t = unit
end

module ScopeB_in = struct
  type t = unit
end


(* Scope ScopeA *)
let scope_a : ScopeA_in.t -> ScopeA.t = fun _ ->
  let a: bool = true in
  {ScopeA.a = a}

(* Scope ScopeB *)
let scope_b : ScopeB_in.t -> ScopeB.t = fun _ ->
  let scope_a__1: ScopeA.t = {ScopeA.a = ((scope_a (())).ScopeA.a)} in
  let a: bool = scope_a__1.ScopeA.a in
  {ScopeB.a = a}


let test_scopes = [
  "ScopeA";
  "ScopeB";
]

let commands =
  List.map (fun c ->
      if List.mem c test_scopes then c else (
        print_endline "Specify scopes from the following list (or no argument \
                       for running them all):";
        List.iter (fun n -> print_endline ("  - " ^ n)) test_scopes;
        exit 1
      ))
    (List.tl (Array.to_list Sys.argv))

let commands = if commands = [] then test_scopes else commands

let () = if List.mem "ScopeA" commands then (
  let _ = scope_a (()) in
  print_endline "\x1b[32m[RESULT]\x1b[m Scope ScopeA executed successfully."
)
let () = if List.mem "ScopeB" commands then (
  let _ = scope_b (()) in
  print_endline "\x1b[32m[RESULT]\x1b[m Scope ScopeB executed successfully."
)
```
