## Article

```catala
declaration scope ScopeA:
  output a content boolean

declaration scope ScopeB:
  output a content boolean
  scopeA scope ScopeA

scope ScopeA:
  definition a equals true

scope ScopeB:
  definition a equals scopeA.a
```



```catala-test-inline
$ catala Typecheck --check-invariants
┌─[RESULT]─
│ All invariant checks passed
└─
┌─[RESULT]─
│ Typechecking successful!
└─
```

```catala-test-inline
$ catala OCaml -O
(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]


module ScopeA = struct
  type t = {a: bool}
end

module ScopeB = struct
  type t = {a1: bool}
end

module ScopeAIn = struct
  type t = unit
end

module ScopeBIn = struct
  type t = unit
end


let scope_a (scope_a_in: ScopeAIn.t) : ScopeA.t =
  let a2: bool = true in
  {ScopeA.a = a2}

let scope_b (scope_b_in: ScopeBIn.t) : ScopeB.t =
  let scope_a1: ScopeA.t = {ScopeA.a = ((scope_a (())).ScopeA.a)} in
  let a2: bool = scope_a1.ScopeA.a in
  {ScopeB.a1 = a2}


let entry_scopes = [
  "ScopeA";
  "ScopeB";
]

let commands =
  List.map (fun c ->
      if List.mem c entry_scopes then c else (
        print_endline "Specify scopes from the following list (or no argument for running them all):";
        List.iter (fun n -> print_endline ("  - " ^ n)) entry_scopes;
        exit 1
      ))
    (List.tl (Array.to_list Sys.argv))

let commands = if commands = [] then entry_scopes else commands

let () = if List.mem "ScopeA" commands then (
  ignore (scope_a ());
  print_endline "Scope ScopeA executed successfully."
)
let () = if List.mem "ScopeB" commands then (
  ignore (scope_b ());
  print_endline "Scope ScopeB executed successfully."
)
```
