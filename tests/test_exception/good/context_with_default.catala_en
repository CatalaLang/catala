## Foo

```catala
declaration scope Foo:
  context output x condition

declaration scope Bar:
  foo scope Foo

scope Foo:
  rule x fulfilled

scope Bar:
  rule foo.x under condition 1 = 2 consequence fulfilled
  assertion foo.x
```



```catala-test-inline
$ catala Typecheck --check_invariants
[RESULT]
Invariant Dcalc__Invariants.invariant_typing_defaults
   checked. result: [48/48]
[RESULT]
Invariant Dcalc__Invariants.invariant_match_inversion
   checked. result: [0/0]
[RESULT]
Invariant Dcalc__Invariants.invariant_app_inversion
   checked. result: [3/3]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_return_a_function
   checked. result: [1/1]
[RESULT]
Invariant Dcalc__Invariants.invariant_no_partial_evaluation
   checked. result: [3/3]
[RESULT]
Invariant Dcalc__Invariants.invariant_default_no_arrow
   checked. result: [8/8]
[RESULT] Typechecking successful!
```

```catala-test-inline
$ catala Interpret -s Bar
[RESULT] Computation successful!
```
```catala-test-inline
$ catala Interpret_Lcalc -s Bar --avoid_exceptions --optimize
[RESULT] Computation successful!
```
