# This file has been generated by the Catala compiler, do not edit!

from catala.runtime import *
from typing import Any, List, Callable, Tuple
from enum import Enum


class TypeBailleur_Code(Enum):
    BailleurSocial = 0
    BailleurPrive = 1


class TypeBailleur:
    def __init__(self, code: TypeBailleur_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeBailleur):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TypePret_Code(Enum):
    D331_32 = 0
    D331_63_64 = 1
    D331_59_8 = 2
    D331_76_1 = 3
    Autre = 4


class TypePret:
    def __init__(self, code: TypePret_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypePret):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TitulairePret_Code(Enum):
    Demandeur = 0
    VendeurQuandDemandeurAContratLocationAccession = 1


class TitulairePret:
    def __init__(self, code: TitulairePret_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TitulairePret):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TypeTravauxLogementD83215_Code(Enum):
    TravauxPourAcquisitionD832_15_1 = 0
    TravauxSurLogementDejaAcquisD832_15_2 = 1
    PasDeTravaux = 2


class TypeTravauxLogementD83215:
    def __init__(self, code: TypeTravauxLogementD83215_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeTravauxLogementD83215):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TypeTravauxLogementR8425_Code(Enum):
    ObjectifDecenceLogement = 0
    PrevuDansListeR321_15 = 1
    AgrandirOuRendreHabitableD331_63 = 2
    PasDeTravaux = 3


class TypeTravauxLogementR8425:
    def __init__(self, code: TypeTravauxLogementR8425_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeTravauxLogementR8425):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class AmelioreParOccupant_Code(Enum):
    Oui = 0
    Non = 1


class AmelioreParOccupant:
    def __init__(self, code: AmelioreParOccupant_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AmelioreParOccupant):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class LimiteTranche_Code(Enum):
    Revenu = 0
    Infini = 1


class LimiteTranche:
    def __init__(self, code: LimiteTranche_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LimiteTranche):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class LimiteTrancheDecimal_Code(Enum):
    Revenu = 0
    Infini = 1


class LimiteTrancheDecimal:
    def __init__(self, code: LimiteTrancheDecimal_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LimiteTrancheDecimal):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PrestationRecue_Code(Enum):
    AllocationsFamiliales = 0
    ComplementFamilial = 1
    AllocationJeuneEnfant = 2
    AllocationSoutienFamilial = 3
    AllocationSoutienEnfantHandicape = 4
    AllocationAdulteHandicape = 5


class PrestationRecue:
    def __init__(self, code: PrestationRecue_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrestationRecue):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TypeContratTravail_Code(Enum):
    CDI = 0
    Autres = 1


class TypeContratTravail:
    def __init__(self, code: TypeContratTravail_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeContratTravail):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ParentOuAutre_Code(Enum):
    DemandeurOuConjointOuParentOuViaPartsSocietes = 0
    Autre = 1


class ParentOuAutre:
    def __init__(self, code: ParentOuAutre_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ParentOuAutre):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class SituationGardeAlternee_Code(Enum):
    PasDeGardeAlternee = 0
    GardeAlterneeCoefficientPriseEnCharge = 1


class SituationGardeAlternee:
    def __init__(self, code: SituationGardeAlternee_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationGardeAlternee):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Parente_Code(Enum):
    Ascendant = 0
    Descendant = 1
    CollateralDeuxiemeTroisiemeDegre = 2


class Parente:
    def __init__(self, code: Parente_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Parente):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class DateDeNaissanceOuMoisDeGrossesse_Code(Enum):
    DateDeNaissance = 0
    AvantPremierJourMoisCivilTroisiemeMoisDeGrossesse = 1
    ApresPremierJourMoisCivilTroisiemeMoisDeGrossesse = 2


class DateDeNaissanceOuMoisDeGrossesse:
    def __init__(self, code: DateDeNaissanceOuMoisDeGrossesse_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DateDeNaissanceOuMoisDeGrossesse):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Nationalite_Code(Enum):
    Francaise = 0
    Etrangere = 1


class Nationalite:
    def __init__(self, code: Nationalite_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Nationalite):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ZoneDHabitation_Code(Enum):
    Zone1 = 0
    Zone2 = 1
    Zone3 = 2


class ZoneDHabitation:
    def __init__(self, code: ZoneDHabitation_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ZoneDHabitation):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class CategorieCalculAPL_Code(Enum):
    Location = 0
    AccessionPropriete = 1
    LogementFoyer = 2


class CategorieCalculAPL:
    def __init__(self, code: CategorieCalculAPL_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CategorieCalculAPL):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PaiementLogementDistinctProfessionnel_Code(Enum):
    OuiAvecLoyerOuCharges = 0
    Non = 1


class PaiementLogementDistinctProfessionnel:
    def __init__(self, code: PaiementLogementDistinctProfessionnel_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PaiementLogementDistinctProfessionnel):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class VersementA_Code(Enum):
    Bailleur = 0
    Beneficiaire = 1
    EtablissementHabilite = 2


class VersementA:
    def __init__(self, code: VersementA_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VersementA):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class DepenseLogement_Code(Enum):
    TotalAnnuelEcheances = 0
    Mensualite = 1
    Loyer = 2


class DepenseLogement:
    def __init__(self, code: DepenseLogement_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DepenseLogement):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ModeOccupationImpaye_Code(Enum):
    ImpayeLoyer = 0
    ImpayePret = 1


class ModeOccupationImpaye:
    def __init__(self, code: ModeOccupationImpaye_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ModeOccupationImpaye):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class EligibiliteAllocationLogement_Code(Enum):
    PasEligible = 0
    AllocationLogementFamiliale = 1
    AllocationLogementSociale = 2


class EligibiliteAllocationLogement:
    def __init__(self, code: EligibiliteAllocationLogement_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAllocationLogement):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TypeAidesPersonnelleLogement_Code(Enum):
    AidePersonnaliseeLogement = 0
    AllocationLogementFamiliale = 1
    AllocationLogementSociale = 2


class TypeAidesPersonnelleLogement:
    def __init__(self, code: TypeAidesPersonnelleLogement_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeAidesPersonnelleLogement):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class SituationFamiliale_Code(Enum):
    Celibataire = 0
    Maries = 1
    Pacses = 2
    Concubins = 3
    CelibataireSepareDeFait = 4
    ConcubinageDontSepareDeFait = 5


class SituationFamiliale:
    def __init__(self, code: SituationFamiliale_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationFamiliale):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PriseEnCharge_Code(Enum):
    EffectiveEtPermanente = 0
    ResidenceAlterneeAllocataireUnique = 1
    ResidenceAlterneeAllocationsPartagee = 2


class PriseEnCharge:
    def __init__(self, code: PriseEnCharge_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PriseEnCharge):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TypeLogementFoyer_Code(Enum):
    LogementPersonnesAgeesOuHandicapees = 0
    ResidenceSociale = 1
    FoyerJeunesTrvailleursOuMigrantsConventionneL353_2Avant1995 = 2
    Autre = 3


class TypeLogementFoyer:
    def __init__(self, code: TypeLogementFoyer_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TypeLogementFoyer):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class CategorieEquivalenceLoyerAllocationLogementFoyer_Code(Enum):
    EtudiantLogeEnChambre = 0
    EtudiantLogeEnChambreRehabilitee = 1
    PersonnesAgeesSelon3DeD842_16 = 2
    AutresPersonnes = 3


class CategorieEquivalenceLoyerAllocationLogementFoyer:
    def __init__(self, code: CategorieEquivalenceLoyerAllocationLogementFoyer_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CategorieEquivalenceLoyerAllocationLogementFoyer):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class SituationFamilialeCalculAPL_Code(Enum):
    PersonneSeule = 0
    Couple = 1


class SituationFamilialeCalculAPL:
    def __init__(self, code: SituationFamilialeCalculAPL_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationFamilialeCalculAPL):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Collectivite_Code(Enum):
    Guadeloupe = 0
    Guyane = 1
    Martinique = 2
    LaReunion = 3
    SaintBarthelemy = 4
    SaintMartin = 5
    Metropole = 6
    SaintPierreEtMiquelon = 7
    Mayotte = 8


class Collectivite:
    def __init__(self, code: Collectivite_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Collectivite):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PriseEnChargeEnfant_Code(Enum):
    GardeAlterneePartageAllocations = 0
    GardeAlterneeAllocataireUnique = 1
    EffectiveEtPermanente = 2
    ServicesSociauxAllocationVerseeALaFamille = 3
    ServicesSociauxAllocationVerseeAuxServicesSociaux = 4


class PriseEnChargeEnfant:
    def __init__(self, code: PriseEnChargeEnfant_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PriseEnChargeEnfant):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class SituationObligationScolaire_Code(Enum):
    Avant = 0
    Pendant = 1
    Apres = 2


class SituationObligationScolaire:
    def __init__(self, code: SituationObligationScolaire_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SituationObligationScolaire):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ElementPrestationsFamiliales_Code(Enum):
    PrestationAccueilJeuneEnfant = 0
    AllocationsFamiliales = 1
    ComplementFamilial = 2
    AllocationLogement = 3
    AllocationEducationEnfantHandicape = 4
    AllocationSoutienFamilial = 5
    AllocationRentreeScolaire = 6
    AllocationJournalierePresenceParentale = 7


class ElementPrestationsFamiliales:
    def __init__(self, code: ElementPrestationsFamiliales_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ElementPrestationsFamiliales):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class PersonneSousLocation:
    def __init__(self, age_personne_sous_location: Integer, conforme_article_l442_1: bool) -> None:
        self.age_personne_sous_location = age_personne_sous_location
        self.conforme_article_l442_1 = conforme_article_l442_1

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PersonneSousLocation):
            return (self.age_personne_sous_location == other.age_personne_sous_location and
                    self.conforme_article_l442_1 == other.conforme_article_l442_1)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PersonneSousLocation(age_personne_sous_location={},conforme_article_l442_1={})".format(self.age_personne_sous_location,
                                                                                                       self.conforme_article_l442_1)


class Patrimoine:
    def __init__(self, produisant_revenu_periode_r822_3_3_r822_4: Money, ne_produisant_pas_revenu_periode_r822_3_3_r822_4: Money) -> None:
        self.produisant_revenu_periode_r822_3_3_r822_4 = produisant_revenu_periode_r822_3_3_r822_4
        self.ne_produisant_pas_revenu_periode_r822_3_3_r822_4 = ne_produisant_pas_revenu_periode_r822_3_3_r822_4

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Patrimoine):
            return (self.produisant_revenu_periode_r822_3_3_r822_4 == other.produisant_revenu_periode_r822_3_3_r822_4 and
                    self.ne_produisant_pas_revenu_periode_r822_3_3_r822_4 == other.ne_produisant_pas_revenu_periode_r822_3_3_r822_4)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Patrimoine(produisant_revenu_periode_r822_3_3_r822_4={},ne_produisant_pas_revenu_periode_r822_3_3_r822_4={})".format(self.produisant_revenu_periode_r822_3_3_r822_4,
                                                                                                                                     self.ne_produisant_pas_revenu_periode_r822_3_3_r822_4)


class PersonneVivantHabituellementAuFoyer:
    def __init__(self, duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois: bool, ressources: Money) -> None:
        self.duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois = duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois
        self.ressources = ressources

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PersonneVivantHabituellementAuFoyer):
            return (self.duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois == other.duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois and
                    self.ressources == other.ressources)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "PersonneVivantHabituellementAuFoyer(duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois={},ressources={})".format(self.duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois,
                                                                                                                                           self.ressources)


class InfosChangementLogementD8424:
    def __init__(self, ancien_loyer_principal: Money, ancienne_allocation_logement: Money) -> None:
        self.ancien_loyer_principal = ancien_loyer_principal
        self.ancienne_allocation_logement = ancienne_allocation_logement

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InfosChangementLogementD8424):
            return (self.ancien_loyer_principal == other.ancien_loyer_principal and
                    self.ancienne_allocation_logement == other.ancienne_allocation_logement)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InfosChangementLogementD8424(ancien_loyer_principal={},ancienne_allocation_logement={})".format(self.ancien_loyer_principal,
                                                                                                                self.ancienne_allocation_logement)


class Bailleur:
    def __init__(self, type_bailleur: TypeBailleur, respecte_convention_titre_V: bool, respecte_convention_titre_II: bool, construit_ameliore_conditions_l831_1_4: bool, acquisition_aides_etat_pret_titre_II_ou_livre_III: bool) -> None:
        self.type_bailleur = type_bailleur
        self.respecte_convention_titre_V = respecte_convention_titre_V
        self.respecte_convention_titre_II = respecte_convention_titre_II
        self.construit_ameliore_conditions_l831_1_4 = construit_ameliore_conditions_l831_1_4
        self.acquisition_aides_etat_pret_titre_II_ou_livre_III = acquisition_aides_etat_pret_titre_II_ou_livre_III

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Bailleur):
            return (self.type_bailleur == other.type_bailleur and
                    self.respecte_convention_titre_V == other.respecte_convention_titre_V and
                    self.respecte_convention_titre_II == other.respecte_convention_titre_II and
                    self.construit_ameliore_conditions_l831_1_4 == other.construit_ameliore_conditions_l831_1_4 and
                    self.acquisition_aides_etat_pret_titre_II_ou_livre_III == other.acquisition_aides_etat_pret_titre_II_ou_livre_III)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Bailleur(type_bailleur={},respecte_convention_titre_V={},respecte_convention_titre_II={},construit_ameliore_conditions_l831_1_4={},acquisition_aides_etat_pret_titre_II_ou_livre_III={})".format(self.type_bailleur,
                                                                                                                                                                                                                 self.respecte_convention_titre_V, self.respecte_convention_titre_II,
                                                                                                                                                                                                                 self.construit_ameliore_conditions_l831_1_4,
                                                                                                                                                                                                                 self.acquisition_aides_etat_pret_titre_II_ou_livre_III)


class Pret:
    def __init__(self, type_pret: TypePret, date_signature: Date, titulaire_pret: TitulairePret) -> None:
        self.type_pret = type_pret
        self.date_signature = date_signature
        self.titulaire_pret = titulaire_pret

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Pret):
            return (self.type_pret == other.type_pret and
                    self.date_signature == other.date_signature and
                    self.titulaire_pret == other.titulaire_pret)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Pret(type_pret={},date_signature={},titulaire_pret={})".format(self.type_pret,
                                                                               self.date_signature, self.titulaire_pret)


class NeufOuAncien_Code(Enum):
    Neuf = 0
    Ancien = 1


class NeufOuAncien:
    def __init__(self, code: NeufOuAncien_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, NeufOuAncien):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class TrancheRevenu:
    def __init__(self, haut: LimiteTranche, bas: Money, taux: Decimal) -> None:
        self.haut = haut
        self.bas = bas
        self.taux = taux

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrancheRevenu):
            return (self.haut == other.haut and self.bas == other.bas and
                    self.taux == other.taux)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "TrancheRevenu(haut={},bas={},taux={})".format(self.haut, self.bas,
                                                              self.taux)


class TrancheRevenuDecimal:
    def __init__(self, haut: LimiteTrancheDecimal, bas: Decimal, taux: Decimal) -> None:
        self.haut = haut
        self.bas = bas
        self.taux = taux

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrancheRevenuDecimal):
            return (self.haut == other.haut and self.bas == other.bas and
                    self.taux == other.taux)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "TrancheRevenuDecimal(haut={},bas={},taux={})".format(self.haut,
                                                                     self.bas, self.taux)


class AutrePersonneACharge:
    def __init__(self, date_naissance: Date, ressources: Money, ascendant_descendant_collateral_deuxieme_troisieme_degre: bool, parente: Parente, incapacite_80_pourcent_ou_restriction_emploi: bool, beneficiaire_l161_19_l351_8_l643_3_secu: bool, titulaire_allocation_personne_agee: bool) -> None:
        self.date_naissance = date_naissance
        self.ressources = ressources
        self.ascendant_descendant_collateral_deuxieme_troisieme_degre = ascendant_descendant_collateral_deuxieme_troisieme_degre
        self.parente = parente
        self.incapacite_80_pourcent_ou_restriction_emploi = incapacite_80_pourcent_ou_restriction_emploi
        self.beneficiaire_l161_19_l351_8_l643_3_secu = beneficiaire_l161_19_l351_8_l643_3_secu
        self.titulaire_allocation_personne_agee = titulaire_allocation_personne_agee

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AutrePersonneACharge):
            return (self.date_naissance == other.date_naissance and
                    self.ressources == other.ressources and
                    self.ascendant_descendant_collateral_deuxieme_troisieme_degre == other.ascendant_descendant_collateral_deuxieme_troisieme_degre and
                    self.parente == other.parente and
                    self.incapacite_80_pourcent_ou_restriction_emploi == other.incapacite_80_pourcent_ou_restriction_emploi and
                    self.beneficiaire_l161_19_l351_8_l643_3_secu == other.beneficiaire_l161_19_l351_8_l643_3_secu and
                    self.titulaire_allocation_personne_agee == other.titulaire_allocation_personne_agee)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "AutrePersonneACharge(date_naissance={},ressources={},ascendant_descendant_collateral_deuxieme_troisieme_degre={},parente={},incapacite_80_pourcent_ou_restriction_emploi={},beneficiaire_l161_19_l351_8_l643_3_secu={},titulaire_allocation_personne_agee={})".format(self.date_naissance,
                                                                                                                                                                                                                                                                                      self.ressources,
                                                                                                                                                                                                                                                                                      self.ascendant_descendant_collateral_deuxieme_troisieme_degre,
                                                                                                                                                                                                                                                                                      self.parente, self.incapacite_80_pourcent_ou_restriction_emploi,
                                                                                                                                                                                                                                                                                      self.beneficiaire_l161_19_l351_8_l643_3_secu,
                                                                                                                                                                                                                                                                                      self.titulaire_allocation_personne_agee)


class DateNaissanceTroisiemeOuDernierPlusEnfant_Code(Enum):
    MoinsDeTroisEnfants = 0
    PlusDeTroisEnfants = 1


class DateNaissanceTroisiemeOuDernierPlusEnfant:
    def __init__(self, code: DateNaissanceTroisiemeOuDernierPlusEnfant_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DateNaissanceTroisiemeOuDernierPlusEnfant):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class InformationsCalculAPLLogementFoyer:
    def __init__(self, redevance: Money, categorie_equivalence_loyer_d842_16: CategorieEquivalenceLoyerAllocationLogementFoyer) -> None:
        self.redevance = redevance
        self.categorie_equivalence_loyer_d842_16 = categorie_equivalence_loyer_d842_16

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InformationsCalculAPLLogementFoyer):
            return (self.redevance == other.redevance and
                    self.categorie_equivalence_loyer_d842_16 == other.categorie_equivalence_loyer_d842_16)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InformationsCalculAPLLogementFoyer(redevance={},categorie_equivalence_loyer_d842_16={})".format(self.redevance,
                                                                                                                self.categorie_equivalence_loyer_d842_16)


class EnfantPrestationsFamiliales:
    def __init__(self, identifiant: Integer, obligation_scolaire: SituationObligationScolaire, remuneration_mensuelle: Money, date_de_naissance: Date, age: Integer, prise_en_charge: PriseEnChargeEnfant, a_deja_ouvert_droit_aux_allocations_familiales: bool, beneficie_titre_personnel_aide_personnelle_logement: bool) -> None:
        self.identifiant = identifiant
        self.obligation_scolaire = obligation_scolaire
        self.remuneration_mensuelle = remuneration_mensuelle
        self.date_de_naissance = date_de_naissance
        self.age = age
        self.prise_en_charge = prise_en_charge
        self.a_deja_ouvert_droit_aux_allocations_familiales = a_deja_ouvert_droit_aux_allocations_familiales
        self.beneficie_titre_personnel_aide_personnelle_logement = beneficie_titre_personnel_aide_personnelle_logement

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantPrestationsFamiliales):
            return (self.identifiant == other.identifiant and
                    self.obligation_scolaire == other.obligation_scolaire and
                    self.remuneration_mensuelle == other.remuneration_mensuelle and
                    self.date_de_naissance == other.date_de_naissance and
                    self.age == other.age and
                    self.prise_en_charge == other.prise_en_charge and
                    self.a_deja_ouvert_droit_aux_allocations_familiales == other.a_deja_ouvert_droit_aux_allocations_familiales and
                    self.beneficie_titre_personnel_aide_personnelle_logement == other.beneficie_titre_personnel_aide_personnelle_logement)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantPrestationsFamiliales(identifiant={},obligation_scolaire={},remuneration_mensuelle={},date_de_naissance={},age={},prise_en_charge={},a_deja_ouvert_droit_aux_allocations_familiales={},beneficie_titre_personnel_aide_personnelle_logement={})".format(self.identifiant,
                                                                                                                                                                                                                                                                             self.obligation_scolaire, self.remuneration_mensuelle,
                                                                                                                                                                                                                                                                             self.date_de_naissance, self.age, self.prise_en_charge,
                                                                                                                                                                                                                                                                             self.a_deja_ouvert_droit_aux_allocations_familiales,
                                                                                                                                                                                                                                                                             self.beneficie_titre_personnel_aide_personnelle_logement)


class EnfantACharge:
    def __init__(self, identifiant: Integer, beneficie_titre_personnel_aide_personnelle_logement: bool, a_deja_ouvert_droit_aux_allocations_familiales: bool, date_de_naissance: Date, remuneration_mensuelle: Money, obligation_scolaire: SituationObligationScolaire, prise_en_charge: PriseEnCharge, age: Integer, situation_garde_alternee: SituationGardeAlternee) -> None:
        self.identifiant = identifiant
        self.beneficie_titre_personnel_aide_personnelle_logement = beneficie_titre_personnel_aide_personnelle_logement
        self.a_deja_ouvert_droit_aux_allocations_familiales = a_deja_ouvert_droit_aux_allocations_familiales
        self.date_de_naissance = date_de_naissance
        self.remuneration_mensuelle = remuneration_mensuelle
        self.obligation_scolaire = obligation_scolaire
        self.prise_en_charge = prise_en_charge
        self.age = age
        self.situation_garde_alternee = situation_garde_alternee

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnfantACharge):
            return (self.identifiant == other.identifiant and
                    self.beneficie_titre_personnel_aide_personnelle_logement == other.beneficie_titre_personnel_aide_personnelle_logement and
                    self.a_deja_ouvert_droit_aux_allocations_familiales == other.a_deja_ouvert_droit_aux_allocations_familiales and
                    self.date_de_naissance == other.date_de_naissance and
                    self.remuneration_mensuelle == other.remuneration_mensuelle and
                    self.obligation_scolaire == other.obligation_scolaire and
                    self.prise_en_charge == other.prise_en_charge and
                    self.age == other.age and
                    self.situation_garde_alternee == other.situation_garde_alternee)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EnfantACharge(identifiant={},beneficie_titre_personnel_aide_personnelle_logement={},a_deja_ouvert_droit_aux_allocations_familiales={},date_de_naissance={},remuneration_mensuelle={},obligation_scolaire={},prise_en_charge={},age={},situation_garde_alternee={})".format(self.identifiant,
                                                                                                                                                                                                                                                                                           self.beneficie_titre_personnel_aide_personnelle_logement,
                                                                                                                                                                                                                                                                                           self.a_deja_ouvert_droit_aux_allocations_familiales,
                                                                                                                                                                                                                                                                                           self.date_de_naissance, self.remuneration_mensuelle,
                                                                                                                                                                                                                                                                                           self.obligation_scolaire, self.prise_en_charge, self.age,
                                                                                                                                                                                                                                                                                           self.situation_garde_alternee)


class LoueOuSousLoueADesTiers_Code(Enum):
    Non = 0
    Oui = 1


class LoueOuSousLoueADesTiers:
    def __init__(self, code: LoueOuSousLoueADesTiers_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LoueOuSousLoueADesTiers):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Demandeur:
    def __init__(self, satisfait_conditions_l512_2_code_securite_sociale: bool, age_demandeur: Integer, date_naissance: Date, contrat_de_travail: TypeContratTravail, nationalite: Nationalite, patrimoine: Patrimoine, personne_hebergee_centre_soin_l_L162_22_3_securite_sociale: bool) -> None:
        self.satisfait_conditions_l512_2_code_securite_sociale = satisfait_conditions_l512_2_code_securite_sociale
        self.age_demandeur = age_demandeur
        self.date_naissance = date_naissance
        self.contrat_de_travail = contrat_de_travail
        self.nationalite = nationalite
        self.patrimoine = patrimoine
        self.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale = personne_hebergee_centre_soin_l_L162_22_3_securite_sociale

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Demandeur):
            return (self.satisfait_conditions_l512_2_code_securite_sociale == other.satisfait_conditions_l512_2_code_securite_sociale and
                    self.age_demandeur == other.age_demandeur and
                    self.date_naissance == other.date_naissance and
                    self.contrat_de_travail == other.contrat_de_travail and
                    self.nationalite == other.nationalite and
                    self.patrimoine == other.patrimoine and
                    self.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale == other.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Demandeur(satisfait_conditions_l512_2_code_securite_sociale={},age_demandeur={},date_naissance={},contrat_de_travail={},nationalite={},patrimoine={},personne_hebergee_centre_soin_l_L162_22_3_securite_sociale={})".format(self.satisfait_conditions_l512_2_code_securite_sociale,
                                                                                                                                                                                                                                            self.age_demandeur, self.date_naissance, self.contrat_de_travail,
                                                                                                                                                                                                                                            self.nationalite, self.patrimoine,
                                                                                                                                                                                                                                            self.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale)


class ChangementLogementD8424_Code(Enum):
    Changement = 0
    PasDeChangement = 1


class ChangementLogementD8424:
    def __init__(self, code: ChangementLogementD8424_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ChangementLogementD8424):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Location:
    def __init__(self, bailleur: Bailleur) -> None:
        self.bailleur = bailleur

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Location):
            return (self.bailleur == other.bailleur)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Location(bailleur={})".format(self.bailleur)


class Proprietaire:
    def __init__(self, pret: Pret) -> None:
        self.pret = pret

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Proprietaire):
            return (self.pret == other.pret)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Proprietaire(pret={})".format(self.pret)


class InformationsCalculAPLAccessionPropriete:
    def __init__(self, mensualite_principale: Money, charges_mensuelles_pret: Money, date_signature_pret: Date, date_entree_logement: Date, type_travaux_logement_d832_15: TypeTravauxLogementD83215, type_travaux_logement_r842_5: TypeTravauxLogementR8425, local_habite_premiere_fois_beneficiaire: bool, copropriete: bool, situation_r822_11_13_17: bool, type_pret: TypePret, anciennete_logement: NeufOuAncien) -> None:
        self.mensualite_principale = mensualite_principale
        self.charges_mensuelles_pret = charges_mensuelles_pret
        self.date_signature_pret = date_signature_pret
        self.date_entree_logement = date_entree_logement
        self.type_travaux_logement_d832_15 = type_travaux_logement_d832_15
        self.type_travaux_logement_r842_5 = type_travaux_logement_r842_5
        self.local_habite_premiere_fois_beneficiaire = local_habite_premiere_fois_beneficiaire
        self.copropriete = copropriete
        self.situation_r822_11_13_17 = situation_r822_11_13_17
        self.type_pret = type_pret
        self.anciennete_logement = anciennete_logement

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InformationsCalculAPLAccessionPropriete):
            return (self.mensualite_principale == other.mensualite_principale and
                    self.charges_mensuelles_pret == other.charges_mensuelles_pret and
                    self.date_signature_pret == other.date_signature_pret and
                    self.date_entree_logement == other.date_entree_logement and
                    self.type_travaux_logement_d832_15 == other.type_travaux_logement_d832_15 and
                    self.type_travaux_logement_r842_5 == other.type_travaux_logement_r842_5 and
                    self.local_habite_premiere_fois_beneficiaire == other.local_habite_premiere_fois_beneficiaire and
                    self.copropriete == other.copropriete and
                    self.situation_r822_11_13_17 == other.situation_r822_11_13_17 and
                    self.type_pret == other.type_pret and
                    self.anciennete_logement == other.anciennete_logement)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InformationsCalculAPLAccessionPropriete(mensualite_principale={},charges_mensuelles_pret={},date_signature_pret={},date_entree_logement={},type_travaux_logement_d832_15={},type_travaux_logement_r842_5={},local_habite_premiere_fois_beneficiaire={},copropriete={},situation_r822_11_13_17={},type_pret={},anciennete_logement={})".format(self.mensualite_principale,
                                                                                                                                                                                                                                                                                                                                                              self.charges_mensuelles_pret, self.date_signature_pret,
                                                                                                                                                                                                                                                                                                                                                              self.date_entree_logement, self.type_travaux_logement_d832_15,
                                                                                                                                                                                                                                                                                                                                                              self.type_travaux_logement_r842_5,
                                                                                                                                                                                                                                                                                                                                                              self.local_habite_premiere_fois_beneficiaire, self.copropriete,
                                                                                                                                                                                                                                                                                                                                                              self.situation_r822_11_13_17, self.type_pret, self.anciennete_logement)


class PersonneACharge_Code(Enum):
    EnfantACharge = 0
    AutrePersonneACharge = 1


class PersonneACharge:
    def __init__(self, code: PersonneACharge_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PersonneACharge):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class InformationsCalculAPLLocatif:
    def __init__(self, loyer_principal: Money, beneficiaire_aide_adulte_ou_enfant_handicapes: bool, logement_est_chambre: bool, colocation: bool, agees_ou_handicap_adultes_hebergees_onereux_particuliers: bool, reduction_loyer_solidarite: Money, logement_meuble_d842_2: bool, changement_logement_d842_4: ChangementLogementD8424) -> None:
        self.loyer_principal = loyer_principal
        self.beneficiaire_aide_adulte_ou_enfant_handicapes = beneficiaire_aide_adulte_ou_enfant_handicapes
        self.logement_est_chambre = logement_est_chambre
        self.colocation = colocation
        self.agees_ou_handicap_adultes_hebergees_onereux_particuliers = agees_ou_handicap_adultes_hebergees_onereux_particuliers
        self.reduction_loyer_solidarite = reduction_loyer_solidarite
        self.logement_meuble_d842_2 = logement_meuble_d842_2
        self.changement_logement_d842_4 = changement_logement_d842_4

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InformationsCalculAPLLocatif):
            return (self.loyer_principal == other.loyer_principal and
                    self.beneficiaire_aide_adulte_ou_enfant_handicapes == other.beneficiaire_aide_adulte_ou_enfant_handicapes and
                    self.logement_est_chambre == other.logement_est_chambre and
                    self.colocation == other.colocation and
                    self.agees_ou_handicap_adultes_hebergees_onereux_particuliers == other.agees_ou_handicap_adultes_hebergees_onereux_particuliers and
                    self.reduction_loyer_solidarite == other.reduction_loyer_solidarite and
                    self.logement_meuble_d842_2 == other.logement_meuble_d842_2 and
                    self.changement_logement_d842_4 == other.changement_logement_d842_4)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "InformationsCalculAPLLocatif(loyer_principal={},beneficiaire_aide_adulte_ou_enfant_handicapes={},logement_est_chambre={},colocation={},agees_ou_handicap_adultes_hebergees_onereux_particuliers={},reduction_loyer_solidarite={},logement_meuble_d842_2={},changement_logement_d842_4={})".format(self.loyer_principal,
                                                                                                                                                                                                                                                                                                                  self.beneficiaire_aide_adulte_ou_enfant_handicapes,
                                                                                                                                                                                                                                                                                                                  self.logement_est_chambre, self.colocation,
                                                                                                                                                                                                                                                                                                                  self.agees_ou_handicap_adultes_hebergees_onereux_particuliers,
                                                                                                                                                                                                                                                                                                                  self.reduction_loyer_solidarite, self.logement_meuble_d842_2,
                                                                                                                                                                                                                                                                                                                  self.changement_logement_d842_4)


class LogementFoyer:
    def __init__(self, type: TypeLogementFoyer, date_conventionnement: Date, location: Location, remplit_conditions_r832_21: bool, construit_application_loi_1957_12_III: bool) -> None:
        self.type = type
        self.date_conventionnement = date_conventionnement
        self.location = location
        self.remplit_conditions_r832_21 = remplit_conditions_r832_21
        self.construit_application_loi_1957_12_III = construit_application_loi_1957_12_III

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LogementFoyer):
            return (self.type == other.type and
                    self.date_conventionnement == other.date_conventionnement and
                    self.location == other.location and
                    self.remplit_conditions_r832_21 == other.remplit_conditions_r832_21 and
                    self.construit_application_loi_1957_12_III == other.construit_application_loi_1957_12_III)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "LogementFoyer(type={},date_conventionnement={},location={},remplit_conditions_r832_21={},construit_application_loi_1957_12_III={})".format(self.type,
                                                                                                                                                           self.date_conventionnement, self.location,
                                                                                                                                                           self.remplit_conditions_r832_21,
                                                                                                                                                           self.construit_application_loi_1957_12_III)


class InformationsCalculAPL_Code(Enum):
    InfosLocatif = 0
    InfosLogementFoyer = 1
    InfosAccessionPropriete = 2


class InformationsCalculAPL:
    def __init__(self, code: InformationsCalculAPL_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InformationsCalculAPL):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class ModeOccupation_Code(Enum):
    Locataire = 0
    ResidentLogementFoyer = 1
    AccessionProprieteLocalUsageExclusifHabitation = 2
    SousLocataire = 3
    LocationAccession = 4


class ModeOccupation:
    def __init__(self, code: ModeOccupation_Code, value: Any) -> None:
        self.code = code
        self.value = value

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ModeOccupation):
            return self.code == other.code and self.value == other.value
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "{}({})".format(self.code, self.value)


class Logement:
    def __init__(self, residence_principale: bool, est_ehpad_ou_maison_autonomie_l313_12_asf: bool, mode_occupation: ModeOccupation, proprietaire: ParentOuAutre, loue_ou_sous_loue_a_des_tiers: LoueOuSousLoueADesTiers, usufruit: ParentOuAutre, logement_decent_l89_462: bool, loyers_l823_3: Money, surface_m_carres: Integer, est_ancien_l831_2: bool, situe_commune_desequilibre_l831_2: bool, zone: ZoneDHabitation) -> None:
        self.residence_principale = residence_principale
        self.est_ehpad_ou_maison_autonomie_l313_12_asf = est_ehpad_ou_maison_autonomie_l313_12_asf
        self.mode_occupation = mode_occupation
        self.proprietaire = proprietaire
        self.loue_ou_sous_loue_a_des_tiers = loue_ou_sous_loue_a_des_tiers
        self.usufruit = usufruit
        self.logement_decent_l89_462 = logement_decent_l89_462
        self.loyers_l823_3 = loyers_l823_3
        self.surface_m_carres = surface_m_carres
        self.est_ancien_l831_2 = est_ancien_l831_2
        self.situe_commune_desequilibre_l831_2 = situe_commune_desequilibre_l831_2
        self.zone = zone

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Logement):
            return (self.residence_principale == other.residence_principale and
                    self.est_ehpad_ou_maison_autonomie_l313_12_asf == other.est_ehpad_ou_maison_autonomie_l313_12_asf and
                    self.mode_occupation == other.mode_occupation and
                    self.proprietaire == other.proprietaire and
                    self.loue_ou_sous_loue_a_des_tiers == other.loue_ou_sous_loue_a_des_tiers and
                    self.usufruit == other.usufruit and
                    self.logement_decent_l89_462 == other.logement_decent_l89_462 and
                    self.loyers_l823_3 == other.loyers_l823_3 and
                    self.surface_m_carres == other.surface_m_carres and
                    self.est_ancien_l831_2 == other.est_ancien_l831_2 and
                    self.situe_commune_desequilibre_l831_2 == other.situe_commune_desequilibre_l831_2 and
                    self.zone == other.zone)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Logement(residence_principale={},est_ehpad_ou_maison_autonomie_l313_12_asf={},mode_occupation={},proprietaire={},loue_ou_sous_loue_a_des_tiers={},usufruit={},logement_decent_l89_462={},loyers_l823_3={},surface_m_carres={},est_ancien_l831_2={},situe_commune_desequilibre_l831_2={},zone={})".format(self.residence_principale,
                                                                                                                                                                                                                                                                                                                         self.est_ehpad_ou_maison_autonomie_l313_12_asf, self.mode_occupation,
                                                                                                                                                                                                                                                                                                                         self.proprietaire, self.loue_ou_sous_loue_a_des_tiers, self.usufruit,
                                                                                                                                                                                                                                                                                                                         self.logement_decent_l89_462, self.loyers_l823_3,
                                                                                                                                                                                                                                                                                                                         self.surface_m_carres, self.est_ancien_l831_2,
                                                                                                                                                                                                                                                                                                                         self.situe_commune_desequilibre_l831_2, self.zone)


class Menage:
    def __init__(self, prestations_recues: List[PrestationRecue], logement: Logement, personnes_a_charge: List[PersonneACharge], nombre_autres_occupants_logement: Integer, situation_familiale: SituationFamiliale, condition_rattache_foyer_fiscal_parent_ifi: bool, nombre_enfants_a_naitre_apres_troisieme_mois_grossesse: Integer, enfant_a_naitre_apres_quatrieme_mois_grossesse: bool, date_naissance_troisieme_enfant_ou_dernier_si_plus: DateNaissanceTroisiemeOuDernierPlusEnfant) -> None:
        self.prestations_recues = prestations_recues
        self.logement = logement
        self.personnes_a_charge = personnes_a_charge
        self.nombre_autres_occupants_logement = nombre_autres_occupants_logement
        self.situation_familiale = situation_familiale
        self.condition_rattache_foyer_fiscal_parent_ifi = condition_rattache_foyer_fiscal_parent_ifi
        self.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse = nombre_enfants_a_naitre_apres_troisieme_mois_grossesse
        self.enfant_a_naitre_apres_quatrieme_mois_grossesse = enfant_a_naitre_apres_quatrieme_mois_grossesse
        self.date_naissance_troisieme_enfant_ou_dernier_si_plus = date_naissance_troisieme_enfant_ou_dernier_si_plus

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Menage):
            return (self.prestations_recues == other.prestations_recues and
                    self.logement == other.logement and
                    self.personnes_a_charge == other.personnes_a_charge and
                    self.nombre_autres_occupants_logement == other.nombre_autres_occupants_logement and
                    self.situation_familiale == other.situation_familiale and
                    self.condition_rattache_foyer_fiscal_parent_ifi == other.condition_rattache_foyer_fiscal_parent_ifi and
                    self.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse == other.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse and
                    self.enfant_a_naitre_apres_quatrieme_mois_grossesse == other.enfant_a_naitre_apres_quatrieme_mois_grossesse and
                    self.date_naissance_troisieme_enfant_ou_dernier_si_plus == other.date_naissance_troisieme_enfant_ou_dernier_si_plus)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "Menage(prestations_recues={},logement={},personnes_a_charge={},nombre_autres_occupants_logement={},situation_familiale={},condition_rattache_foyer_fiscal_parent_ifi={},nombre_enfants_a_naitre_apres_troisieme_mois_grossesse={},enfant_a_naitre_apres_quatrieme_mois_grossesse={},date_naissance_troisieme_enfant_ou_dernier_si_plus={})".format(self.prestations_recues,
                                                                                                                                                                                                                                                                                                                                                                   self.logement, self.personnes_a_charge,
                                                                                                                                                                                                                                                                                                                                                                   self.nombre_autres_occupants_logement, self.situation_familiale,
                                                                                                                                                                                                                                                                                                                                                                   self.condition_rattache_foyer_fiscal_parent_ifi,
                                                                                                                                                                                                                                                                                                                                                                   self.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse,
                                                                                                                                                                                                                                                                                                                                                                   self.enfant_a_naitre_apres_quatrieme_mois_grossesse,
                                                                                                                                                                                                                                                                                                                                                                   self.date_naissance_troisieme_enfant_ou_dernier_si_plus)


class EligibiliteAidesPersonnelleLogementOut:
    def __init__(self, date_courante_out: Date, eligibilite_out: bool, nombre_personnes_a_charge_prises_en_compte_out: Integer, coefficents_enfants_garde_alternee_pris_en_compte_out: List[Decimal], condition_2_r823_4_out: Callable[[PersonneACharge], bool]) -> None:
        self.date_courante_out = date_courante_out
        self.eligibilite_out = eligibilite_out
        self.nombre_personnes_a_charge_prises_en_compte_out = nombre_personnes_a_charge_prises_en_compte_out
        self.coefficents_enfants_garde_alternee_pris_en_compte_out = coefficents_enfants_garde_alternee_pris_en_compte_out
        self.condition_2_r823_4_out = condition_2_r823_4_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidesPersonnelleLogementOut):
            return (self.date_courante_out == other.date_courante_out and
                    self.eligibilite_out == other.eligibilite_out and
                    self.nombre_personnes_a_charge_prises_en_compte_out == other.nombre_personnes_a_charge_prises_en_compte_out and
                    self.coefficents_enfants_garde_alternee_pris_en_compte_out == other.coefficents_enfants_garde_alternee_pris_en_compte_out and
                    self.condition_2_r823_4_out == other.condition_2_r823_4_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidesPersonnelleLogementOut(date_courante_out={},eligibilite_out={},nombre_personnes_a_charge_prises_en_compte_out={},coefficents_enfants_garde_alternee_pris_en_compte_out={},condition_2_r823_4_out={})".format(self.date_courante_out,
                                                                                                                                                                                                                                             self.eligibilite_out,
                                                                                                                                                                                                                                             self.nombre_personnes_a_charge_prises_en_compte_out,
                                                                                                                                                                                                                                             self.coefficents_enfants_garde_alternee_pris_en_compte_out,
                                                                                                                                                                                                                                             self.condition_2_r823_4_out)


class EligibiliteAidesPersonnelleLogementIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date, condition_logement_residence_principale_in: Callable[[Unit], bool], condition_logement_surface_in: Callable[[Unit], bool]) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in
        self.condition_logement_residence_principale_in = condition_logement_residence_principale_in
        self.condition_logement_surface_in = condition_logement_surface_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidesPersonnelleLogementIn):
            return (self.menage_in == other.menage_in and
                    self.demandeur_in == other.demandeur_in and
                    self.date_courante_in == other.date_courante_in and
                    self.condition_logement_residence_principale_in == other.condition_logement_residence_principale_in and
                    self.condition_logement_surface_in == other.condition_logement_surface_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidesPersonnelleLogementIn(menage_in={},demandeur_in={},date_courante_in={},condition_logement_residence_principale_in={},condition_logement_surface_in={})".format(self.menage_in,
                                                                                                                                                                                               self.demandeur_in, self.date_courante_in,
                                                                                                                                                                                               self.condition_logement_residence_principale_in,
                                                                                                                                                                                               self.condition_logement_surface_in)


class EligibiliteAidePersonnaliseeLogementOut:
    def __init__(self, date_courante_out: Date, eligibilite_out: bool, nombre_personnes_a_charge_prises_en_compte_out: Integer, coefficents_enfants_garde_alternee_pris_en_compte_out: List[Decimal]) -> None:
        self.date_courante_out = date_courante_out
        self.eligibilite_out = eligibilite_out
        self.nombre_personnes_a_charge_prises_en_compte_out = nombre_personnes_a_charge_prises_en_compte_out
        self.coefficents_enfants_garde_alternee_pris_en_compte_out = coefficents_enfants_garde_alternee_pris_en_compte_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidePersonnaliseeLogementOut):
            return (self.date_courante_out == other.date_courante_out and
                    self.eligibilite_out == other.eligibilite_out and
                    self.nombre_personnes_a_charge_prises_en_compte_out == other.nombre_personnes_a_charge_prises_en_compte_out and
                    self.coefficents_enfants_garde_alternee_pris_en_compte_out == other.coefficents_enfants_garde_alternee_pris_en_compte_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidePersonnaliseeLogementOut(date_courante_out={},eligibilite_out={},nombre_personnes_a_charge_prises_en_compte_out={},coefficents_enfants_garde_alternee_pris_en_compte_out={})".format(self.date_courante_out,
                                                                                                                                                                                                                    self.eligibilite_out,
                                                                                                                                                                                                                    self.nombre_personnes_a_charge_prises_en_compte_out,
                                                                                                                                                                                                                    self.coefficents_enfants_garde_alternee_pris_en_compte_out)


class EligibiliteAidePersonnaliseeLogementIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAidePersonnaliseeLogementIn):
            return (self.menage_in == other.menage_in and
                    self.demandeur_in == other.demandeur_in and
                    self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAidePersonnaliseeLogementIn(menage_in={},demandeur_in={},date_courante_in={})".format(self.menage_in,
                                                                                                                 self.demandeur_in, self.date_courante_in)


class EligibiliteAllocationLogementOut:
    def __init__(self, eligibilite_avec_condition_logement_out: EligibiliteAllocationLogement, nombre_personnes_a_charge_prises_en_compte_out: Integer, coefficents_enfants_garde_alternee_pris_en_compte_out: List[Decimal]) -> None:
        self.eligibilite_avec_condition_logement_out = eligibilite_avec_condition_logement_out
        self.nombre_personnes_a_charge_prises_en_compte_out = nombre_personnes_a_charge_prises_en_compte_out
        self.coefficents_enfants_garde_alternee_pris_en_compte_out = coefficents_enfants_garde_alternee_pris_en_compte_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAllocationLogementOut):
            return (self.eligibilite_avec_condition_logement_out == other.eligibilite_avec_condition_logement_out and
                    self.nombre_personnes_a_charge_prises_en_compte_out == other.nombre_personnes_a_charge_prises_en_compte_out and
                    self.coefficents_enfants_garde_alternee_pris_en_compte_out == other.coefficents_enfants_garde_alternee_pris_en_compte_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAllocationLogementOut(eligibilite_avec_condition_logement_out={},nombre_personnes_a_charge_prises_en_compte_out={},coefficents_enfants_garde_alternee_pris_en_compte_out={})".format(self.eligibilite_avec_condition_logement_out,
                                                                                                                                                                                                                self.nombre_personnes_a_charge_prises_en_compte_out,
                                                                                                                                                                                                                self.coefficents_enfants_garde_alternee_pris_en_compte_out)


class EligibiliteAllocationLogementIn:
    def __init__(self, date_courante_in: Date, menage_in: Menage, demandeur_in: Demandeur, beneficie_aide_personnalisee_logement_in: bool, informations_calcul_in: InformationsCalculAPL) -> None:
        self.date_courante_in = date_courante_in
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.beneficie_aide_personnalisee_logement_in = beneficie_aide_personnalisee_logement_in
        self.informations_calcul_in = informations_calcul_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibiliteAllocationLogementIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.menage_in == other.menage_in and
                    self.demandeur_in == other.demandeur_in and
                    self.beneficie_aide_personnalisee_logement_in == other.beneficie_aide_personnalisee_logement_in and
                    self.informations_calcul_in == other.informations_calcul_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibiliteAllocationLogementIn(date_courante_in={},menage_in={},demandeur_in={},beneficie_aide_personnalisee_logement_in={},informations_calcul_in={})".format(self.date_courante_in,
                                                                                                                                                                                self.menage_in, self.demandeur_in,
                                                                                                                                                                                self.beneficie_aide_personnalisee_logement_in,
                                                                                                                                                                                self.informations_calcul_in)


class EligibilitePrimeDeDemenagementOut:
    def __init__(self, montant_prime_demenagement_out: Money) -> None:
        self.montant_prime_demenagement_out = montant_prime_demenagement_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrimeDeDemenagementOut):
            return (self.montant_prime_demenagement_out == other.montant_prime_demenagement_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrimeDeDemenagementOut(montant_prime_demenagement_out={})".format(self.montant_prime_demenagement_out)


class EligibilitePrimeDeDemenagementIn:
    def __init__(self, date_emmenagement_in: Date, menage_in: Menage, demandeur_in: Demandeur, date_courante_in: Date, depenses_justifiees_reellement_engagees_in: Money) -> None:
        self.date_emmenagement_in = date_emmenagement_in
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.date_courante_in = date_courante_in
        self.depenses_justifiees_reellement_engagees_in = depenses_justifiees_reellement_engagees_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrimeDeDemenagementIn):
            return (self.date_emmenagement_in == other.date_emmenagement_in and
                    self.menage_in == other.menage_in and
                    self.demandeur_in == other.demandeur_in and
                    self.date_courante_in == other.date_courante_in and
                    self.depenses_justifiees_reellement_engagees_in == other.depenses_justifiees_reellement_engagees_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrimeDeDemenagementIn(date_emmenagement_in={},menage_in={},demandeur_in={},date_courante_in={},depenses_justifiees_reellement_engagees_in={})".format(self.date_emmenagement_in,
                                                                                                                                                                                 self.menage_in, self.demandeur_in, self.date_courante_in,
                                                                                                                                                                                 self.depenses_justifiees_reellement_engagees_in)


class RessourcesAidesPersonnelleLogementOut:
    def __init__(self, ressources_prises_en_compte_out: Money) -> None:
        self.ressources_prises_en_compte_out = ressources_prises_en_compte_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RessourcesAidesPersonnelleLogementOut):
            return (self.ressources_prises_en_compte_out == other.ressources_prises_en_compte_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "RessourcesAidesPersonnelleLogementOut(ressources_prises_en_compte_out={})".format(self.ressources_prises_en_compte_out)


class RessourcesAidesPersonnelleLogementIn:
    def __init__(self, ressources_demandeur_in: Money, ressources_conjoint_in: Money, personnes_vivant_habituellement_foyer_in: List[PersonneVivantHabituellementAuFoyer], demandeur_exerce_activite_remuneree_in: bool, conjoint_exerce_activite_remuneree_in: bool, personnes_a_charge_in: List[PersonneACharge], situation_familiale_in: SituationFamiliale, mode_occupation_in: ModeOccupation, condition_age_bourse_enseignement_superieur_in: bool, demandeur_poursuit_des_etudes_in: bool, date_demande_ou_reexamen_droit_in: Date, paiement_logement_distinct_professionnel_in: PaiementLogementDistinctProfessionnel, ressources_menage_arrondies_base_in: Money) -> None:
        self.ressources_demandeur_in = ressources_demandeur_in
        self.ressources_conjoint_in = ressources_conjoint_in
        self.personnes_vivant_habituellement_foyer_in = personnes_vivant_habituellement_foyer_in
        self.demandeur_exerce_activite_remuneree_in = demandeur_exerce_activite_remuneree_in
        self.conjoint_exerce_activite_remuneree_in = conjoint_exerce_activite_remuneree_in
        self.personnes_a_charge_in = personnes_a_charge_in
        self.situation_familiale_in = situation_familiale_in
        self.mode_occupation_in = mode_occupation_in
        self.condition_age_bourse_enseignement_superieur_in = condition_age_bourse_enseignement_superieur_in
        self.demandeur_poursuit_des_etudes_in = demandeur_poursuit_des_etudes_in
        self.date_demande_ou_reexamen_droit_in = date_demande_ou_reexamen_droit_in
        self.paiement_logement_distinct_professionnel_in = paiement_logement_distinct_professionnel_in
        self.ressources_menage_arrondies_base_in = ressources_menage_arrondies_base_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RessourcesAidesPersonnelleLogementIn):
            return (self.ressources_demandeur_in == other.ressources_demandeur_in and
                    self.ressources_conjoint_in == other.ressources_conjoint_in and
                    self.personnes_vivant_habituellement_foyer_in == other.personnes_vivant_habituellement_foyer_in and
                    self.demandeur_exerce_activite_remuneree_in == other.demandeur_exerce_activite_remuneree_in and
                    self.conjoint_exerce_activite_remuneree_in == other.conjoint_exerce_activite_remuneree_in and
                    self.personnes_a_charge_in == other.personnes_a_charge_in and
                    self.situation_familiale_in == other.situation_familiale_in and
                    self.mode_occupation_in == other.mode_occupation_in and
                    self.condition_age_bourse_enseignement_superieur_in == other.condition_age_bourse_enseignement_superieur_in and
                    self.demandeur_poursuit_des_etudes_in == other.demandeur_poursuit_des_etudes_in and
                    self.date_demande_ou_reexamen_droit_in == other.date_demande_ou_reexamen_droit_in and
                    self.paiement_logement_distinct_professionnel_in == other.paiement_logement_distinct_professionnel_in and
                    self.ressources_menage_arrondies_base_in == other.ressources_menage_arrondies_base_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "RessourcesAidesPersonnelleLogementIn(ressources_demandeur_in={},ressources_conjoint_in={},personnes_vivant_habituellement_foyer_in={},demandeur_exerce_activite_remuneree_in={},conjoint_exerce_activite_remuneree_in={},personnes_a_charge_in={},situation_familiale_in={},mode_occupation_in={},condition_age_bourse_enseignement_superieur_in={},demandeur_poursuit_des_etudes_in={},date_demande_ou_reexamen_droit_in={},paiement_logement_distinct_professionnel_in={},ressources_menage_arrondies_base_in={})".format(self.ressources_demandeur_in,
self.ressources_conjoint_in,
self.personnes_vivant_habituellement_foyer_in,
self.demandeur_exerce_activite_remuneree_in,
self.conjoint_exerce_activite_remuneree_in, self.personnes_a_charge_in,
self.situation_familiale_in, self.mode_occupation_in,
self.condition_age_bourse_enseignement_superieur_in,
self.demandeur_poursuit_des_etudes_in,
self.date_demande_ou_reexamen_droit_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            self.paiement_logement_distinct_professionnel_in,
self.ressources_menage_arrondies_base_in)


class ContributionsSocialesAidesPersonnelleLogementOut:
    def __init__(self, montant_out: Callable[[Money], Money]) -> None:
        self.montant_out = montant_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ContributionsSocialesAidesPersonnelleLogementOut):
            return (self.montant_out == other.montant_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ContributionsSocialesAidesPersonnelleLogementOut(montant_out={})".format(self.montant_out)


class ContributionsSocialesAidesPersonnelleLogementIn:
    def __init__(self, date_courante_in: Date) -> None:
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ContributionsSocialesAidesPersonnelleLogementIn):
            return (self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in={})".format(self.date_courante_in)


class CalculAidePersonnaliseeLogementLocatifOut:
    def __init__(self, montant_forfaitaire_charges_d823_16_out: Money, plafond_loyer_d823_16_2_out: Money, participation_minimale_out: Money, taux_composition_familiale_out: Decimal, participation_personnelle_out: Money, aide_finale_formule_out: Money, traitement_aide_finale_montant_minimal_out: Callable[[Money], Money]) -> None:
        self.montant_forfaitaire_charges_d823_16_out = montant_forfaitaire_charges_d823_16_out
        self.plafond_loyer_d823_16_2_out = plafond_loyer_d823_16_2_out
        self.participation_minimale_out = participation_minimale_out
        self.taux_composition_familiale_out = taux_composition_familiale_out
        self.participation_personnelle_out = participation_personnelle_out
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_montant_minimal_out = traitement_aide_finale_montant_minimal_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementLocatifOut):
            return (self.montant_forfaitaire_charges_d823_16_out == other.montant_forfaitaire_charges_d823_16_out and
                    self.plafond_loyer_d823_16_2_out == other.plafond_loyer_d823_16_2_out and
                    self.participation_minimale_out == other.participation_minimale_out and
                    self.taux_composition_familiale_out == other.taux_composition_familiale_out and
                    self.participation_personnelle_out == other.participation_personnelle_out and
                    self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_montant_minimal_out == other.traitement_aide_finale_montant_minimal_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementLocatifOut(montant_forfaitaire_charges_d823_16_out={},plafond_loyer_d823_16_2_out={},participation_minimale_out={},taux_composition_familiale_out={},participation_personnelle_out={},aide_finale_formule_out={},traitement_aide_finale_montant_minimal_out={})".format(self.montant_forfaitaire_charges_d823_16_out,
                                                                                                                                                                                                                                                                                                                       self.plafond_loyer_d823_16_2_out, self.participation_minimale_out,
                                                                                                                                                                                                                                                                                                                       self.taux_composition_familiale_out,
                                                                                                                                                                                                                                                                                                                       self.participation_personnelle_out, self.aide_finale_formule_out,
                                                                                                                                                                                                                                                                                                                       self.traitement_aide_finale_montant_minimal_out)


class CalculAidePersonnaliseeLogementLocatifIn:
    def __init__(self, loyer_principal_in: Money, ressources_menage_arrondies_in: Money, beneficiaire_aide_adulte_ou_enfant_handicapes_in: bool, date_courante_in: Date, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, logement_est_chambre_in: bool, agees_ou_handicap_adultes_hebergees_onereux_particuliers_in: bool, type_aide_in: TypeAidesPersonnelleLogement, colocation_in: bool, reduction_loyer_solidarite_in: Money) -> None:
        self.loyer_principal_in = loyer_principal_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.beneficiaire_aide_adulte_ou_enfant_handicapes_in = beneficiaire_aide_adulte_ou_enfant_handicapes_in
        self.date_courante_in = date_courante_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.logement_est_chambre_in = logement_est_chambre_in
        self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
        self.type_aide_in = type_aide_in
        self.colocation_in = colocation_in
        self.reduction_loyer_solidarite_in = reduction_loyer_solidarite_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementLocatifIn):
            return (self.loyer_principal_in == other.loyer_principal_in and
                    self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                    self.beneficiaire_aide_adulte_ou_enfant_handicapes_in == other.beneficiaire_aide_adulte_ou_enfant_handicapes_in and
                    self.date_courante_in == other.date_courante_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                    self.zone_in == other.zone_in and
                    self.logement_est_chambre_in == other.logement_est_chambre_in and
                    self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in == other.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in and
                    self.type_aide_in == other.type_aide_in and
                    self.colocation_in == other.colocation_in and
                    self.reduction_loyer_solidarite_in == other.reduction_loyer_solidarite_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_in={},ressources_menage_arrondies_in={},beneficiaire_aide_adulte_ou_enfant_handicapes_in={},date_courante_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},logement_est_chambre_in={},agees_ou_handicap_adultes_hebergees_onereux_particuliers_in={},type_aide_in={},colocation_in={},reduction_loyer_solidarite_in={})".format(self.loyer_principal_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.ressources_menage_arrondies_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.beneficiaire_aide_adulte_ou_enfant_handicapes_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.date_courante_in, self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.situation_familiale_calcul_apl_in, self.zone_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.logement_est_chambre_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.type_aide_in, self.colocation_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                              self.reduction_loyer_solidarite_in)


class CalculEquivalenceLoyerMinimaleOut:
    def __init__(self, montant_out: Money) -> None:
        self.montant_out = montant_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculEquivalenceLoyerMinimaleOut):
            return (self.montant_out == other.montant_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculEquivalenceLoyerMinimaleOut(montant_out={})".format(self.montant_out)


class CalculEquivalenceLoyerMinimaleIn:
    def __init__(self, ressources_menage_arrondies_in: Money, condition_2_du_832_25_in: bool, n_nombre_parts_d832_25_in: Decimal) -> None:
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.condition_2_du_832_25_in = condition_2_du_832_25_in
        self.n_nombre_parts_d832_25_in = n_nombre_parts_d832_25_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculEquivalenceLoyerMinimaleIn):
            return (self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                    self.condition_2_du_832_25_in == other.condition_2_du_832_25_in and
                    self.n_nombre_parts_d832_25_in == other.n_nombre_parts_d832_25_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculEquivalenceLoyerMinimaleIn(ressources_menage_arrondies_in={},condition_2_du_832_25_in={},n_nombre_parts_d832_25_in={})".format(self.ressources_menage_arrondies_in,
                                                                                                                                                     self.condition_2_du_832_25_in, self.n_nombre_parts_d832_25_in)


class CalculNombrePartLogementFoyerOut:
    def __init__(self, n_nombre_parts_d832_25_out: Decimal) -> None:
        self.n_nombre_parts_d832_25_out = n_nombre_parts_d832_25_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartLogementFoyerOut):
            return (self.n_nombre_parts_d832_25_out == other.n_nombre_parts_d832_25_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartLogementFoyerOut(n_nombre_parts_d832_25_out={})".format(self.n_nombre_parts_d832_25_out)


class CalculNombrePartLogementFoyerIn:
    def __init__(self, condition_2_du_832_25_in: bool, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL) -> None:
        self.condition_2_du_832_25_in = condition_2_du_832_25_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartLogementFoyerIn):
            return (self.condition_2_du_832_25_in == other.condition_2_du_832_25_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartLogementFoyerIn(condition_2_du_832_25_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={})".format(self.condition_2_du_832_25_in,
                                                                                                                                                          self.nombre_personnes_a_charge_in,
                                                                                                                                                          self.situation_familiale_calcul_apl_in)


class CalculAidePersonnaliseeLogementFoyerOut:
    def __init__(self, coefficient_multiplicateur_d832_25_out: Money, coefficient_r_d832_25_out: Money, n_nombre_parts_d832_25_out: Decimal, equivalence_loyer_eligible_out: Money, plafond_equivalence_loyer_eligible_out: Money, equivalence_loyer_minimale_out: Money, coefficient_prise_en_charge_d832_25_seuil_out: Decimal, aide_finale_formule_out: Money, traitement_aide_finale_montant_minimal_out: Callable[[Money], Money]) -> None:
        self.coefficient_multiplicateur_d832_25_out = coefficient_multiplicateur_d832_25_out
        self.coefficient_r_d832_25_out = coefficient_r_d832_25_out
        self.n_nombre_parts_d832_25_out = n_nombre_parts_d832_25_out
        self.equivalence_loyer_eligible_out = equivalence_loyer_eligible_out
        self.plafond_equivalence_loyer_eligible_out = plafond_equivalence_loyer_eligible_out
        self.equivalence_loyer_minimale_out = equivalence_loyer_minimale_out
        self.coefficient_prise_en_charge_d832_25_seuil_out = coefficient_prise_en_charge_d832_25_seuil_out
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_montant_minimal_out = traitement_aide_finale_montant_minimal_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementFoyerOut):
            return (self.coefficient_multiplicateur_d832_25_out == other.coefficient_multiplicateur_d832_25_out and
                    self.coefficient_r_d832_25_out == other.coefficient_r_d832_25_out and
                    self.n_nombre_parts_d832_25_out == other.n_nombre_parts_d832_25_out and
                    self.equivalence_loyer_eligible_out == other.equivalence_loyer_eligible_out and
                    self.plafond_equivalence_loyer_eligible_out == other.plafond_equivalence_loyer_eligible_out and
                    self.equivalence_loyer_minimale_out == other.equivalence_loyer_minimale_out and
                    self.coefficient_prise_en_charge_d832_25_seuil_out == other.coefficient_prise_en_charge_d832_25_seuil_out and
                    self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_montant_minimal_out == other.traitement_aide_finale_montant_minimal_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementFoyerOut(coefficient_multiplicateur_d832_25_out={},coefficient_r_d832_25_out={},n_nombre_parts_d832_25_out={},equivalence_loyer_eligible_out={},plafond_equivalence_loyer_eligible_out={},equivalence_loyer_minimale_out={},coefficient_prise_en_charge_d832_25_seuil_out={},aide_finale_formule_out={},traitement_aide_finale_montant_minimal_out={})".format(self.coefficient_multiplicateur_d832_25_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.coefficient_r_d832_25_out, self.n_nombre_parts_d832_25_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.equivalence_loyer_eligible_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.plafond_equivalence_loyer_eligible_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.equivalence_loyer_minimale_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.coefficient_prise_en_charge_d832_25_seuil_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.aide_finale_formule_out,
                                                                                                                                                                                                                                                                                                                                                                                                              self.traitement_aide_finale_montant_minimal_out)


class CalculAidePersonnaliseeLogementFoyerIn:
    def __init__(self, mode_occupation_in: ModeOccupation, ressources_menage_arrondies_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, date_courante_in: Date, redevance_in: Money, condition_2_du_832_25_in: Callable[[Unit], bool], n_nombre_parts_d832_25_in: Callable[[Unit], Decimal]) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.redevance_in = redevance_in
        self.condition_2_du_832_25_in = condition_2_du_832_25_in
        self.n_nombre_parts_d832_25_in = n_nombre_parts_d832_25_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementFoyerIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                    self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                    self.zone_in == other.zone_in and
                    self.date_courante_in == other.date_courante_in and
                    self.redevance_in == other.redevance_in and
                    self.condition_2_du_832_25_in == other.condition_2_du_832_25_in and
                    self.n_nombre_parts_d832_25_in == other.n_nombre_parts_d832_25_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementFoyerIn(mode_occupation_in={},ressources_menage_arrondies_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},date_courante_in={},redevance_in={},condition_2_du_832_25_in={},n_nombre_parts_d832_25_in={})".format(self.mode_occupation_in,
                                                                                                                                                                                                                                                                                                     self.ressources_menage_arrondies_in, self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                                                                     self.situation_familiale_calcul_apl_in, self.zone_in,
                                                                                                                                                                                                                                                                                                     self.date_courante_in, self.redevance_in,
                                                                                                                                                                                                                                                                                                     self.condition_2_du_832_25_in, self.n_nombre_parts_d832_25_in)


class CalculNombrePartsAccessionProprieteOut:
    def __init__(self, n_nombre_parts_d832_11_out: Decimal) -> None:
        self.n_nombre_parts_d832_11_out = n_nombre_parts_d832_11_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartsAccessionProprieteOut):
            return (self.n_nombre_parts_d832_11_out == other.n_nombre_parts_d832_11_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartsAccessionProprieteOut(n_nombre_parts_d832_11_out={})".format(self.n_nombre_parts_d832_11_out)


class CalculNombrePartsAccessionProprieteIn:
    def __init__(self, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL) -> None:
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculNombrePartsAccessionProprieteIn):
            return (self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculNombrePartsAccessionProprieteIn(nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={})".format(self.nombre_personnes_a_charge_in,
                                                                                                                                    self.situation_familiale_calcul_apl_in)


class CalculAidePersonnaliseeLogementAccessionProprieteOut:
    def __init__(self, mensualite_eligible_out: Money, mensualite_minimale_out: Money, coefficient_prise_en_charge_d832_10_seuil_out: Decimal, aide_finale_formule_out: Money, traitement_aide_finale_montant_minimal_out: Callable[[Money], Money]) -> None:
        self.mensualite_eligible_out = mensualite_eligible_out
        self.mensualite_minimale_out = mensualite_minimale_out
        self.coefficient_prise_en_charge_d832_10_seuil_out = coefficient_prise_en_charge_d832_10_seuil_out
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_montant_minimal_out = traitement_aide_finale_montant_minimal_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementAccessionProprieteOut):
            return (self.mensualite_eligible_out == other.mensualite_eligible_out and
                    self.mensualite_minimale_out == other.mensualite_minimale_out and
                    self.coefficient_prise_en_charge_d832_10_seuil_out == other.coefficient_prise_en_charge_d832_10_seuil_out and
                    self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_montant_minimal_out == other.traitement_aide_finale_montant_minimal_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementAccessionProprieteOut(mensualite_eligible_out={},mensualite_minimale_out={},coefficient_prise_en_charge_d832_10_seuil_out={},aide_finale_formule_out={},traitement_aide_finale_montant_minimal_out={})".format(self.mensualite_eligible_out,
                                                                                                                                                                                                                                                              self.mensualite_minimale_out,
                                                                                                                                                                                                                                                              self.coefficient_prise_en_charge_d832_10_seuil_out,
                                                                                                                                                                                                                                                              self.aide_finale_formule_out,
                                                                                                                                                                                                                                                              self.traitement_aide_finale_montant_minimal_out)


class CalculAidePersonnaliseeLogementAccessionProprieteIn:
    def __init__(self, mensualite_principale_in: Money, ressources_menage_arrondies_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, type_travaux_logement_in: TypeTravauxLogementD83215, date_signature_pret_in: Date, local_habite_premiere_fois_beneficiaire_in: bool, date_entree_logement_in: Date, copropriete_in: bool, situation_r822_11_13_17_in: bool, zone_in: ZoneDHabitation, type_pret_in: TypePret, anciennete_logement_in: NeufOuAncien, date_courante_in: Date) -> None:
        self.mensualite_principale_in = mensualite_principale_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.type_travaux_logement_in = type_travaux_logement_in
        self.date_signature_pret_in = date_signature_pret_in
        self.local_habite_premiere_fois_beneficiaire_in = local_habite_premiere_fois_beneficiaire_in
        self.date_entree_logement_in = date_entree_logement_in
        self.copropriete_in = copropriete_in
        self.situation_r822_11_13_17_in = situation_r822_11_13_17_in
        self.zone_in = zone_in
        self.type_pret_in = type_pret_in
        self.anciennete_logement_in = anciennete_logement_in
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementAccessionProprieteIn):
            return (self.mensualite_principale_in == other.mensualite_principale_in and
                    self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                    self.type_travaux_logement_in == other.type_travaux_logement_in and
                    self.date_signature_pret_in == other.date_signature_pret_in and
                    self.local_habite_premiere_fois_beneficiaire_in == other.local_habite_premiere_fois_beneficiaire_in and
                    self.date_entree_logement_in == other.date_entree_logement_in and
                    self.copropriete_in == other.copropriete_in and
                    self.situation_r822_11_13_17_in == other.situation_r822_11_13_17_in and
                    self.zone_in == other.zone_in and
                    self.type_pret_in == other.type_pret_in and
                    self.anciennete_logement_in == other.anciennete_logement_in and
                    self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementAccessionProprieteIn(mensualite_principale_in={},ressources_menage_arrondies_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},type_travaux_logement_in={},date_signature_pret_in={},local_habite_premiere_fois_beneficiaire_in={},date_entree_logement_in={},copropriete_in={},situation_r822_11_13_17_in={},zone_in={},type_pret_in={},anciennete_logement_in={},date_courante_in={})".format(self.mensualite_principale_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.ressources_menage_arrondies_in, self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.situation_familiale_calcul_apl_in, self.type_travaux_logement_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.date_signature_pret_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.local_habite_premiere_fois_beneficiaire_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.date_entree_logement_in, self.copropriete_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.situation_r822_11_13_17_in, self.zone_in, self.type_pret_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        self.anciennete_logement_in, self.date_courante_in)


class CalculAidePersonnaliseeLogementOut:
    def __init__(self, aide_finale_formule_out: Money, traitement_aide_finale_out: Callable[[Money], Money]) -> None:
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_out = traitement_aide_finale_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementOut):
            return (self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_out == other.traitement_aide_finale_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementOut(aide_finale_formule_out={},traitement_aide_finale_out={})".format(self.aide_finale_formule_out,
                                                                                                                     self.traitement_aide_finale_out)


class CalculAidePersonnaliseeLogementIn:
    def __init__(self, mode_occupation_in: ModeOccupation, type_aide_in: TypeAidesPersonnelleLogement, informations_calcul_in: InformationsCalculAPL, ressources_menage_sans_arrondi_in: Money, situation_familiale_in: SituationFamiliale, nombre_personnes_a_charge_in: Integer, zone_in: ZoneDHabitation, date_courante_in: Date) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.type_aide_in = type_aide_in
        self.informations_calcul_in = informations_calcul_in
        self.ressources_menage_sans_arrondi_in = ressources_menage_sans_arrondi_in
        self.situation_familiale_in = situation_familiale_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAidePersonnaliseeLogementIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                    self.type_aide_in == other.type_aide_in and
                    self.informations_calcul_in == other.informations_calcul_in and
                    self.ressources_menage_sans_arrondi_in == other.ressources_menage_sans_arrondi_in and
                    self.situation_familiale_in == other.situation_familiale_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.zone_in == other.zone_in and
                    self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAidePersonnaliseeLogementIn(mode_occupation_in={},type_aide_in={},informations_calcul_in={},ressources_menage_sans_arrondi_in={},situation_familiale_in={},nombre_personnes_a_charge_in={},zone_in={},date_courante_in={})".format(self.mode_occupation_in,
                                                                                                                                                                                                                                                         self.type_aide_in, self.informations_calcul_in,
                                                                                                                                                                                                                                                         self.ressources_menage_sans_arrondi_in, self.situation_familiale_in,
                                                                                                                                                                                                                                                         self.nombre_personnes_a_charge_in, self.zone_in, self.date_courante_in)


class CalculAllocationLogementLocatifOut:
    def __init__(self, aide_finale_formule_out: Money, traitement_aide_finale_out: Callable[[Money], Money]) -> None:
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_out = traitement_aide_finale_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementLocatifOut):
            return (self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_out == other.traitement_aide_finale_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementLocatifOut(aide_finale_formule_out={},traitement_aide_finale_out={})".format(self.aide_finale_formule_out,
                                                                                                                     self.traitement_aide_finale_out)


class CalculAllocationLogementLocatifIn:
    def __init__(self, loyer_principal_in: Money, ressources_menage_arrondies_in: Money, beneficiaire_aide_adulte_ou_enfant_handicapes_in: bool, date_courante_in: Date, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, logement_est_chambre_in: bool, agees_ou_handicap_adultes_hebergees_onereux_particuliers_in: bool, type_aide_in: TypeAidesPersonnelleLogement, colocation_in: bool, reduction_loyer_solidarite_in: Money, logement_meuble_d842_2_in: bool, changement_logement_d842_4_in: ChangementLogementD8424) -> None:
        self.loyer_principal_in = loyer_principal_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.beneficiaire_aide_adulte_ou_enfant_handicapes_in = beneficiaire_aide_adulte_ou_enfant_handicapes_in
        self.date_courante_in = date_courante_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.logement_est_chambre_in = logement_est_chambre_in
        self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in = agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
        self.type_aide_in = type_aide_in
        self.colocation_in = colocation_in
        self.reduction_loyer_solidarite_in = reduction_loyer_solidarite_in
        self.logement_meuble_d842_2_in = logement_meuble_d842_2_in
        self.changement_logement_d842_4_in = changement_logement_d842_4_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementLocatifIn):
            return (self.loyer_principal_in == other.loyer_principal_in and
                    self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                    self.beneficiaire_aide_adulte_ou_enfant_handicapes_in == other.beneficiaire_aide_adulte_ou_enfant_handicapes_in and
                    self.date_courante_in == other.date_courante_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                    self.zone_in == other.zone_in and
                    self.logement_est_chambre_in == other.logement_est_chambre_in and
                    self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in == other.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in and
                    self.type_aide_in == other.type_aide_in and
                    self.colocation_in == other.colocation_in and
                    self.reduction_loyer_solidarite_in == other.reduction_loyer_solidarite_in and
                    self.logement_meuble_d842_2_in == other.logement_meuble_d842_2_in and
                    self.changement_logement_d842_4_in == other.changement_logement_d842_4_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementLocatifIn(loyer_principal_in={},ressources_menage_arrondies_in={},beneficiaire_aide_adulte_ou_enfant_handicapes_in={},date_courante_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},logement_est_chambre_in={},agees_ou_handicap_adultes_hebergees_onereux_particuliers_in={},type_aide_in={},colocation_in={},reduction_loyer_solidarite_in={},logement_meuble_d842_2_in={},changement_logement_d842_4_in={})".format(self.loyer_principal_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.ressources_menage_arrondies_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.beneficiaire_aide_adulte_ou_enfant_handicapes_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.date_courante_in, self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.situation_familiale_calcul_apl_in, self.zone_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.logement_est_chambre_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.type_aide_in, self.colocation_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.reduction_loyer_solidarite_in, self.logement_meuble_d842_2_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     self.changement_logement_d842_4_in)


class CalculAllocationLogementAccessionProprieteOut:
    def __init__(self, aide_finale_formule_out: Money, traitement_aide_finale_montant_minimal_out: Callable[[Money], Money]) -> None:
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_montant_minimal_out = traitement_aide_finale_montant_minimal_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementAccessionProprieteOut):
            return (self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_montant_minimal_out == other.traitement_aide_finale_montant_minimal_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementAccessionProprieteOut(aide_finale_formule_out={},traitement_aide_finale_montant_minimal_out={})".format(self.aide_finale_formule_out,
                                                                                                                                                self.traitement_aide_finale_montant_minimal_out)


class CalculAllocationLogementAccessionProprieteIn:
    def __init__(self, ressources_menage_arrondies_base_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, date_courante_in: Date, mensualite_principale_in: Money, situation_r822_11_13_17_in: bool, date_signature_pret_in: Date, type_travaux_logement_in: TypeTravauxLogementR8425, local_habite_premiere_fois_beneficiaire_in: bool, date_entree_logement_in: Date, charges_mensuelles_pret_in: Money, copropriete_in: bool) -> None:
        self.ressources_menage_arrondies_base_in = ressources_menage_arrondies_base_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.mensualite_principale_in = mensualite_principale_in
        self.situation_r822_11_13_17_in = situation_r822_11_13_17_in
        self.date_signature_pret_in = date_signature_pret_in
        self.type_travaux_logement_in = type_travaux_logement_in
        self.local_habite_premiere_fois_beneficiaire_in = local_habite_premiere_fois_beneficiaire_in
        self.date_entree_logement_in = date_entree_logement_in
        self.charges_mensuelles_pret_in = charges_mensuelles_pret_in
        self.copropriete_in = copropriete_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementAccessionProprieteIn):
            return (self.ressources_menage_arrondies_base_in == other.ressources_menage_arrondies_base_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                    self.zone_in == other.zone_in and
                    self.date_courante_in == other.date_courante_in and
                    self.mensualite_principale_in == other.mensualite_principale_in and
                    self.situation_r822_11_13_17_in == other.situation_r822_11_13_17_in and
                    self.date_signature_pret_in == other.date_signature_pret_in and
                    self.type_travaux_logement_in == other.type_travaux_logement_in and
                    self.local_habite_premiere_fois_beneficiaire_in == other.local_habite_premiere_fois_beneficiaire_in and
                    self.date_entree_logement_in == other.date_entree_logement_in and
                    self.charges_mensuelles_pret_in == other.charges_mensuelles_pret_in and
                    self.copropriete_in == other.copropriete_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementAccessionProprieteIn(ressources_menage_arrondies_base_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},date_courante_in={},mensualite_principale_in={},situation_r822_11_13_17_in={},date_signature_pret_in={},type_travaux_logement_in={},local_habite_premiere_fois_beneficiaire_in={},date_entree_logement_in={},charges_mensuelles_pret_in={},copropriete_in={})".format(self.ressources_menage_arrondies_base_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.situation_familiale_calcul_apl_in, self.zone_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.date_courante_in, self.mensualite_principale_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.situation_r822_11_13_17_in, self.date_signature_pret_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.type_travaux_logement_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.local_habite_premiere_fois_beneficiaire_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.date_entree_logement_in, self.charges_mensuelles_pret_in,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          self.copropriete_in)


class CalculAllocationLogementFoyerOut:
    def __init__(self, coefficient_prise_en_charge_out: Decimal, equivalence_loyer_out: Money, montant_forfaitaire_charges_out: Money, loyer_minimal_out: Money, aide_finale_formule_out: Money, traitement_aide_finale_montant_minimal_out: Callable[[Money], Money]) -> None:
        self.coefficient_prise_en_charge_out = coefficient_prise_en_charge_out
        self.equivalence_loyer_out = equivalence_loyer_out
        self.montant_forfaitaire_charges_out = montant_forfaitaire_charges_out
        self.loyer_minimal_out = loyer_minimal_out
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_montant_minimal_out = traitement_aide_finale_montant_minimal_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementFoyerOut):
            return (self.coefficient_prise_en_charge_out == other.coefficient_prise_en_charge_out and
                    self.equivalence_loyer_out == other.equivalence_loyer_out and
                    self.montant_forfaitaire_charges_out == other.montant_forfaitaire_charges_out and
                    self.loyer_minimal_out == other.loyer_minimal_out and
                    self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_montant_minimal_out == other.traitement_aide_finale_montant_minimal_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementFoyerOut(coefficient_prise_en_charge_out={},equivalence_loyer_out={},montant_forfaitaire_charges_out={},loyer_minimal_out={},aide_finale_formule_out={},traitement_aide_finale_montant_minimal_out={})".format(self.coefficient_prise_en_charge_out,
                                                                                                                                                                                                                                                       self.equivalence_loyer_out, self.montant_forfaitaire_charges_out,
                                                                                                                                                                                                                                                       self.loyer_minimal_out, self.aide_finale_formule_out,
                                                                                                                                                                                                                                                       self.traitement_aide_finale_montant_minimal_out)


class CalculAllocationLogementFoyerIn:
    def __init__(self, redevance_in: Money, mode_occupation_in: ModeOccupation, ressources_menage_arrondies_in: Money, nombre_personnes_a_charge_in: Integer, situation_familiale_calcul_apl_in: SituationFamilialeCalculAPL, zone_in: ZoneDHabitation, date_courante_in: Date, categorie_equivalence_loyer_d842_16_in: CategorieEquivalenceLoyerAllocationLogementFoyer) -> None:
        self.redevance_in = redevance_in
        self.mode_occupation_in = mode_occupation_in
        self.ressources_menage_arrondies_in = ressources_menage_arrondies_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.situation_familiale_calcul_apl_in = situation_familiale_calcul_apl_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.categorie_equivalence_loyer_d842_16_in = categorie_equivalence_loyer_d842_16_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementFoyerIn):
            return (self.redevance_in == other.redevance_in and
                    self.mode_occupation_in == other.mode_occupation_in and
                    self.ressources_menage_arrondies_in == other.ressources_menage_arrondies_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.situation_familiale_calcul_apl_in == other.situation_familiale_calcul_apl_in and
                    self.zone_in == other.zone_in and
                    self.date_courante_in == other.date_courante_in and
                    self.categorie_equivalence_loyer_d842_16_in == other.categorie_equivalence_loyer_d842_16_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementFoyerIn(redevance_in={},mode_occupation_in={},ressources_menage_arrondies_in={},nombre_personnes_a_charge_in={},situation_familiale_calcul_apl_in={},zone_in={},date_courante_in={},categorie_equivalence_loyer_d842_16_in={})".format(self.redevance_in,
                                                                                                                                                                                                                                                                               self.mode_occupation_in, self.ressources_menage_arrondies_in,
                                                                                                                                                                                                                                                                               self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                                               self.situation_familiale_calcul_apl_in, self.zone_in,
                                                                                                                                                                                                                                                                               self.date_courante_in, self.categorie_equivalence_loyer_d842_16_in)


class CalculAllocationLogementOut:
    def __init__(self, aide_finale_formule_out: Money, traitement_aide_finale_out: Callable[[Money], Money]) -> None:
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_out = traitement_aide_finale_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementOut):
            return (self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_out == other.traitement_aide_finale_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementOut(aide_finale_formule_out={},traitement_aide_finale_out={})".format(self.aide_finale_formule_out,
                                                                                                              self.traitement_aide_finale_out)


class CalculAllocationLogementIn:
    def __init__(self, mode_occupation_in: ModeOccupation, informations_calcul_in: InformationsCalculAPL, ressources_menage_sans_arrondi_in: Money, situation_familiale_in: SituationFamiliale, nombre_personnes_a_charge_in: Integer, zone_in: ZoneDHabitation, date_courante_in: Date, type_aide_in: TypeAidesPersonnelleLogement) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.informations_calcul_in = informations_calcul_in
        self.ressources_menage_sans_arrondi_in = ressources_menage_sans_arrondi_in
        self.situation_familiale_in = situation_familiale_in
        self.nombre_personnes_a_charge_in = nombre_personnes_a_charge_in
        self.zone_in = zone_in
        self.date_courante_in = date_courante_in
        self.type_aide_in = type_aide_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculAllocationLogementIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                    self.informations_calcul_in == other.informations_calcul_in and
                    self.ressources_menage_sans_arrondi_in == other.ressources_menage_sans_arrondi_in and
                    self.situation_familiale_in == other.situation_familiale_in and
                    self.nombre_personnes_a_charge_in == other.nombre_personnes_a_charge_in and
                    self.zone_in == other.zone_in and
                    self.date_courante_in == other.date_courante_in and
                    self.type_aide_in == other.type_aide_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculAllocationLogementIn(mode_occupation_in={},informations_calcul_in={},ressources_menage_sans_arrondi_in={},situation_familiale_in={},nombre_personnes_a_charge_in={},zone_in={},date_courante_in={},type_aide_in={})".format(self.mode_occupation_in,
                                                                                                                                                                                                                                                  self.informations_calcul_in, self.ressources_menage_sans_arrondi_in,
                                                                                                                                                                                                                                                  self.situation_familiale_in, self.nombre_personnes_a_charge_in,
                                                                                                                                                                                                                                                  self.zone_in, self.date_courante_in, self.type_aide_in)


class OuvertureDroitsRetraiteOut:
    def __init__(self, age_ouverture_droit_out: Duration) -> None:
        self.age_ouverture_droit_out = age_ouverture_droit_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OuvertureDroitsRetraiteOut):
            return (self.age_ouverture_droit_out == other.age_ouverture_droit_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "OuvertureDroitsRetraiteOut(age_ouverture_droit_out={})".format(self.age_ouverture_droit_out)


class OuvertureDroitsRetraiteIn:
    def __init__(self, date_naissance_assure_in: Date) -> None:
        self.date_naissance_assure_in = date_naissance_assure_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OuvertureDroitsRetraiteIn):
            return (self.date_naissance_assure_in == other.date_naissance_assure_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "OuvertureDroitsRetraiteIn(date_naissance_assure_in={})".format(self.date_naissance_assure_in)


class ImpayeDepenseLogementOut:
    def __init__(self, montant_impaye_out: Money) -> None:
        self.montant_impaye_out = montant_impaye_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ImpayeDepenseLogementOut):
            return (self.montant_impaye_out == other.montant_impaye_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ImpayeDepenseLogementOut(montant_impaye_out={})".format(self.montant_impaye_out)


class ImpayeDepenseLogementIn:
    def __init__(self, mode_occupation_in: ModeOccupation, aide_versee_in: VersementA, montant_apl_in: Money, montant_charges_in: Money, depense_logement_in: DepenseLogement, montant_dette_in: Money) -> None:
        self.mode_occupation_in = mode_occupation_in
        self.aide_versee_in = aide_versee_in
        self.montant_apl_in = montant_apl_in
        self.montant_charges_in = montant_charges_in
        self.depense_logement_in = depense_logement_in
        self.montant_dette_in = montant_dette_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ImpayeDepenseLogementIn):
            return (self.mode_occupation_in == other.mode_occupation_in and
                    self.aide_versee_in == other.aide_versee_in and
                    self.montant_apl_in == other.montant_apl_in and
                    self.montant_charges_in == other.montant_charges_in and
                    self.depense_logement_in == other.depense_logement_in and
                    self.montant_dette_in == other.montant_dette_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "ImpayeDepenseLogementIn(mode_occupation_in={},aide_versee_in={},montant_apl_in={},montant_charges_in={},depense_logement_in={},montant_dette_in={})".format(self.mode_occupation_in,
                                                                                                                                                                            self.aide_versee_in, self.montant_apl_in, self.montant_charges_in,
                                                                                                                                                                            self.depense_logement_in, self.montant_dette_in)


class CalculetteAidesAuLogementOut:
    def __init__(self, eligibilite_out: bool, aide_finale_formule_out: Money, traitement_aide_finale_out: Callable[[Money], Money], coefficents_enfants_garde_alternee_pris_en_compte_out: List[Decimal]) -> None:
        self.eligibilite_out = eligibilite_out
        self.aide_finale_formule_out = aide_finale_formule_out
        self.traitement_aide_finale_out = traitement_aide_finale_out
        self.coefficents_enfants_garde_alternee_pris_en_compte_out = coefficents_enfants_garde_alternee_pris_en_compte_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementOut):
            return (self.eligibilite_out == other.eligibilite_out and
                    self.aide_finale_formule_out == other.aide_finale_formule_out and
                    self.traitement_aide_finale_out == other.traitement_aide_finale_out and
                    self.coefficents_enfants_garde_alternee_pris_en_compte_out == other.coefficents_enfants_garde_alternee_pris_en_compte_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementOut(eligibilite_out={},aide_finale_formule_out={},traitement_aide_finale_out={},coefficents_enfants_garde_alternee_pris_en_compte_out={})".format(self.eligibilite_out,
                                                                                                                                                                                           self.aide_finale_formule_out, self.traitement_aide_finale_out,
                                                                                                                                                                                           self.coefficents_enfants_garde_alternee_pris_en_compte_out)


class CalculetteAidesAuLogementIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, informations_calcul_in: InformationsCalculAPL, date_courante_in: Date, ressources_menage_prises_en_compte_in: Money) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.informations_calcul_in = informations_calcul_in
        self.date_courante_in = date_courante_in
        self.ressources_menage_prises_en_compte_in = ressources_menage_prises_en_compte_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementIn):
            return (self.menage_in == other.menage_in and
                    self.demandeur_in == other.demandeur_in and
                    self.informations_calcul_in == other.informations_calcul_in and
                    self.date_courante_in == other.date_courante_in and
                    self.ressources_menage_prises_en_compte_in == other.ressources_menage_prises_en_compte_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementIn(menage_in={},demandeur_in={},informations_calcul_in={},date_courante_in={},ressources_menage_prises_en_compte_in={})".format(self.menage_in,
                                                                                                                                                                         self.demandeur_in, self.informations_calcul_in, self.date_courante_in,
                                                                                                                                                                         self.ressources_menage_prises_en_compte_in)


class CalculetteAidesAuLogementGardeAlterneeOut:
    def __init__(self, eligibilite_out: bool, aide_finale_out: Money) -> None:
        self.eligibilite_out = eligibilite_out
        self.aide_finale_out = aide_finale_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementGardeAlterneeOut):
            return (self.eligibilite_out == other.eligibilite_out and
                    self.aide_finale_out == other.aide_finale_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementGardeAlterneeOut(eligibilite_out={},aide_finale_out={})".format(self.eligibilite_out,
                                                                                                         self.aide_finale_out)


class CalculetteAidesAuLogementGardeAlterneeIn:
    def __init__(self, menage_in: Menage, demandeur_in: Demandeur, informations_calcul_in: InformationsCalculAPL, date_courante_in: Date, ressources_menage_prises_en_compte_in: Money) -> None:
        self.menage_in = menage_in
        self.demandeur_in = demandeur_in
        self.informations_calcul_in = informations_calcul_in
        self.date_courante_in = date_courante_in
        self.ressources_menage_prises_en_compte_in = ressources_menage_prises_en_compte_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalculetteAidesAuLogementGardeAlterneeIn):
            return (self.menage_in == other.menage_in and
                    self.demandeur_in == other.demandeur_in and
                    self.informations_calcul_in == other.informations_calcul_in and
                    self.date_courante_in == other.date_courante_in and
                    self.ressources_menage_prises_en_compte_in == other.ressources_menage_prises_en_compte_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "CalculetteAidesAuLogementGardeAlterneeIn(menage_in={},demandeur_in={},informations_calcul_in={},date_courante_in={},ressources_menage_prises_en_compte_in={})".format(self.menage_in,
                                                                                                                                                                                      self.demandeur_in, self.informations_calcul_in, self.date_courante_in,
                                                                                                                                                                                      self.ressources_menage_prises_en_compte_in)


class BaseMensuelleAllocationsFamilialesOut:
    def __init__(self, montant_out: Money) -> None:
        self.montant_out = montant_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BaseMensuelleAllocationsFamilialesOut):
            return (self.montant_out == other.montant_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "BaseMensuelleAllocationsFamilialesOut(montant_out={})".format(self.montant_out)


class BaseMensuelleAllocationsFamilialesIn:
    def __init__(self, date_courante_in: Date) -> None:
        self.date_courante_in = date_courante_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BaseMensuelleAllocationsFamilialesIn):
            return (self.date_courante_in == other.date_courante_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "BaseMensuelleAllocationsFamilialesIn(date_courante_in={})".format(self.date_courante_in)


class SmicOut:
    def __init__(self, brut_horaire_out: Money) -> None:
        self.brut_horaire_out = brut_horaire_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicOut):
            return (self.brut_horaire_out == other.brut_horaire_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicOut(brut_horaire_out={})".format(self.brut_horaire_out)


class SmicIn:
    def __init__(self, date_courante_in: Date, residence_in: Collectivite) -> None:
        self.date_courante_in = date_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmicIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "SmicIn(date_courante_in={},residence_in={})".format(self.date_courante_in,
                                                                    self.residence_in)


class EligibilitePrestationsFamilialesOut:
    def __init__(self, droit_ouvert_out: Callable[[EnfantPrestationsFamiliales], bool], conditions_hors_age_out: Callable[[EnfantPrestationsFamiliales], bool], age_l512_3_2_out: Integer, regime_outre_mer_l751_1_out: bool) -> None:
        self.droit_ouvert_out = droit_ouvert_out
        self.conditions_hors_age_out = conditions_hors_age_out
        self.age_l512_3_2_out = age_l512_3_2_out
        self.regime_outre_mer_l751_1_out = regime_outre_mer_l751_1_out

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrestationsFamilialesOut):
            return (self.droit_ouvert_out == other.droit_ouvert_out and
                    self.conditions_hors_age_out == other.conditions_hors_age_out and
                    self.age_l512_3_2_out == other.age_l512_3_2_out and
                    self.regime_outre_mer_l751_1_out == other.regime_outre_mer_l751_1_out)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrestationsFamilialesOut(droit_ouvert_out={},conditions_hors_age_out={},age_l512_3_2_out={},regime_outre_mer_l751_1_out={})".format(self.droit_ouvert_out,
                                                                                                                                                               self.conditions_hors_age_out, self.age_l512_3_2_out,
                                                                                                                                                               self.regime_outre_mer_l751_1_out)


class EligibilitePrestationsFamilialesIn:
    def __init__(self, date_courante_in: Date, prestation_courante_in: ElementPrestationsFamiliales, residence_in: Collectivite) -> None:
        self.date_courante_in = date_courante_in
        self.prestation_courante_in = prestation_courante_in
        self.residence_in = residence_in

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EligibilitePrestationsFamilialesIn):
            return (self.date_courante_in == other.date_courante_in and
                    self.prestation_courante_in == other.prestation_courante_in and
                    self.residence_in == other.residence_in)
        else:
            return False

    def __ne__(self, other: object) -> bool:
        return not (self == other)

    def __str__(self) -> str:
        return "EligibilitePrestationsFamilialesIn(date_courante_in={},prestation_courante_in={},residence_in={})".format(self.date_courante_in,
                                                                                                                          self.prestation_courante_in, self.residence_in)


def contributions_sociales_aides_personnelle_logement(contributions_sociales_aides_personnelle_logement_in: ContributionsSocialesAidesPersonnelleLogementIn):
    date_courante = contributions_sociales_aides_personnelle_logement_in.date_courante_in
    try:
        temp_exonere_csg = True
    except EmptyError:
        temp_exonere_csg = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=548, start_column=11,
                                             end_line=548, end_column=22,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    exonere_csg = log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                           "exonéré_csg"], temp_exonere_csg)
    try:
        if log_decision_taken(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                             start_line=138, start_column=39, end_line=138, end_column=69,
                                             law_headings=["Article 19",
                                                           "Chapitre II : Des contributions pour le remboursement de la dette sociale.",
                                                           "Ordonnance n° 96-50 du 24 janvier 1996 relative au remboursement de la dette sociale"]), (date_courante >=
                                                                                                                                                      date_of_numbers(2020, 1, 1))):
            temp_taux_crds = decimal_of_string("0.005")
        else:
            temp_taux_crds = dead_value
            raise EmptyError
    except EmptyError:
        temp_taux_crds = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=547, start_column=11,
                                             end_line=547, end_column=20,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_crds = log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                         "taux_crds"], temp_taux_crds)
    try:
        def temp_montant(param: Money):
            try:
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                                     start_line=100, start_column=5,
                                                     end_line=100, end_column=35, law_headings=["Article 14",
                                                                                                "Chapitre II : Des contributions pour le remboursement de la dette sociale.",
                                                                                                "Ordonnance n° 96-50 du 24 janvier 1996 relative au remboursement de la dette sociale"]), (date_courante >=
                                                                                                                                                                                           date_of_numbers(2018, 9, 1))):
                    return (param * taux_crds)
                else:
                    raise EmptyError
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=550,
                                                     start_column=10,
                                                     end_line=550,
                                                     end_column=17,
                                                     law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_montant = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=550, start_column=10,
                                             end_line=550, end_column=17,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant = log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                       "montant"], temp_montant)
    try:
        temp__ = exonere_csg
    except EmptyError:
        temp__ = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                             start_line=104, start_column=13,
                                             end_line=104, end_column=24,
                                             law_headings=["Article 14",
                                                           "Chapitre II : Des contributions pour le remboursement de la dette sociale.",
                                                           "Ordonnance n° 96-50 du 24 janvier 1996 relative au remboursement de la dette sociale"]))
    assert temp__
    return ContributionsSocialesAidesPersonnelleLogementOut(montant_out=montant)


def calcul_equivalence_loyer_minimale(calcul_equivalence_loyer_minimale_in: CalculEquivalenceLoyerMinimaleIn):
    ressources_menage_arrondies = calcul_equivalence_loyer_minimale_in.ressources_menage_arrondies_in
    condition_2_du_832_25 = calcul_equivalence_loyer_minimale_in.condition_2_du_832_25_in
    n_nombre_parts_d832_25 = calcul_equivalence_loyer_minimale_in.n_nombre_parts_d832_25_in
    try:
        if condition_2_du_832_25:
            temp_montant_forfaitaire_d832_26 = money_of_cents_string("7632")
        else:
            temp_montant_forfaitaire_d832_26 = money_of_cents_string("4557")
    except EmptyError:
        temp_montant_forfaitaire_d832_26 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=621, start_column=11,
                                             end_line=621, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d832_26 = log_variable_definition(["CalculÉquivalenceLoyerMinimale",
                                                           "montant_forfaitaire_d832_26"], temp_montant_forfaitaire_d832_26)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=2868, start_column=5,
                                                 end_line=2868, end_column=26, law_headings=["Article 31",
                                                                                             "Chapitre V : Calcul de l'aide personnalisée au logement en secteur logement-foyer",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), condition_2_du_832_25):
                temp_tranches_revenus_d832_26 = [TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                                  money_of_cents_string("142303")),
                                                               bas=money_of_cents_string(
                                                                   "0"),
                                                               taux=decimal_of_string("0.")),
                                                 TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                                  money_of_cents_string("204761")),
                                                               bas=money_of_cents_string(
                                                                   "142303"),
                                                               taux=decimal_of_string("0.024")),
                                                 TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                                  money_of_cents_string("262985")),
                                                               bas=money_of_cents_string(
                                                                   "204761"),
                                                               taux=decimal_of_string("0.208")),
                                                 TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                                  money_of_cents_string("409505")),
                                                               bas=money_of_cents_string(
                                                                   "262985"),
                                                               taux=decimal_of_string("0.232")),
                                                 TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Infini,
                                                                                  Unit()), bas=money_of_cents_string("409505"),
                                                               taux=decimal_of_string("0.328"))]
            else:
                temp_tranches_revenus_d832_26 = dead_value
                raise EmptyError
        except EmptyError:
            temp_tranches_revenus_d832_26 = [TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                              money_of_cents_string("194810")),
                                                           bas=money_of_cents_string(
                                                               "0"),
                                                           taux=decimal_of_string("0.04")),
                                             TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                              money_of_cents_string("267871")),
                                                           bas=money_of_cents_string(
                                                               "194810"),
                                                           taux=decimal_of_string("0.104")),
                                             TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                              money_of_cents_string("389618")),
                                                           bas=money_of_cents_string(
                                                               "267871"),
                                                           taux=decimal_of_string("0.216")),
                                             TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                              money_of_cents_string("535744")),
                                                           bas=money_of_cents_string(
                                                               "389618"),
                                                           taux=decimal_of_string("0.264")),
                                             TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Revenu,
                                                                              money_of_cents_string("633129")),
                                                           bas=money_of_cents_string(
                                                               "535744"),
                                                           taux=decimal_of_string("0.32")),
                                             TrancheRevenu(haut=LimiteTranche(LimiteTranche_Code.Infini,
                                                                              Unit()), bas=money_of_cents_string("633129"),
                                                           taux=decimal_of_string("0.48"))]
    except EmptyError:
        temp_tranches_revenus_d832_26 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=618, start_column=11,
                                             end_line=618, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    tranches_revenus_d832_26 = log_variable_definition(["CalculÉquivalenceLoyerMinimale",
                                                        "tranches_revenus_d832_26"], temp_tranches_revenus_d832_26)
    try:
        def temp_tranches_revenus_d832_26_multipliees(tranche: Any):
            match_arg = tranche.haut
            if match_arg.code == LimiteTranche_Code.Revenu:
                tranche_haut = match_arg.value
                temp_tranches_revenus_d832_26_multipliees_1 = LimiteTrancheDecimal(LimiteTrancheDecimal_Code.Revenu,
                                                                                   (decimal_of_money(tranche_haut) *
                                                                                    n_nombre_parts_d832_25))
            elif match_arg.code == LimiteTranche_Code.Infini:
                _ = match_arg.value
                temp_tranches_revenus_d832_26_multipliees_1 = LimiteTrancheDecimal(LimiteTrancheDecimal_Code.Infini,
                                                                                   Unit())
            return TrancheRevenuDecimal(haut=temp_tranches_revenus_d832_26_multipliees_1,
                                        bas=(decimal_of_money(tranche.bas) *
                                             n_nombre_parts_d832_25), taux=tranche.taux)
        temp_tranches_revenus_d832_26_multipliees_2 = list_map(temp_tranches_revenus_d832_26_multipliees,
                                                               tranches_revenus_d832_26)
    except EmptyError:
        temp_tranches_revenus_d832_26_multipliees_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=619, start_column=11,
                                             end_line=619, end_column=47,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    tranches_revenus_d832_26_multipliees = log_variable_definition(["CalculÉquivalenceLoyerMinimale",
                                                                    "tranches_revenus_d832_26_multipliées"],
                                                                   temp_tranches_revenus_d832_26_multipliees_2)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4158, start_column=5,
                                                 end_line=4158, end_column=26,
                                                 law_headings=["Article D832-26",
                                                               "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), condition_2_du_832_25):
                def temp_montant_1(acc: Decimal, tranche_1: Any):
                    if (decimal_of_money(ressources_menage_arrondies) <=
                            tranche_1.bas):
                        temp_montant_2 = decimal_of_string("0.")
                    else:
                        match_arg_1 = tranche_1.haut
                        if match_arg_1.code == LimiteTrancheDecimal_Code.Revenu:
                            tranche_haut_1 = match_arg_1.value
                            if (decimal_of_money(ressources_menage_arrondies) >=
                                    tranche_haut_1):
                                temp_montant_2 = ((tranche_haut_1 -
                                                   tranche_1.bas) * tranche_1.taux)
                            else:
                                temp_montant_2 = ((decimal_of_money(ressources_menage_arrondies) -
                                                   tranche_1.bas) * tranche_1.taux)
                        elif match_arg_1.code == LimiteTrancheDecimal_Code.Infini:
                            _ = match_arg_1.value
                            temp_montant_2 = ((decimal_of_money(ressources_menage_arrondies) -
                                               tranche_1.bas) * tranche_1.taux)
                    return (acc + temp_montant_2)
                temp_montant_3 = money_of_decimal(((list_fold_left(temp_montant_1,
                                                                   decimal_of_string(
                                                                       "0."),
                                                                   tranches_revenus_d832_26_multipliees) +
                                                    decimal_of_money(montant_forfaitaire_d832_26)) /
                                                   decimal_of_string("12.")))
            else:
                temp_montant_3 = dead_value
                raise EmptyError
        except EmptyError:
            def temp_montant_4(acc_1: Decimal, tranche_2: Any):
                if (decimal_of_money(ressources_menage_arrondies) <=
                        tranche_2.bas):
                    temp_montant_5 = decimal_of_string("0.")
                else:
                    match_arg_2 = tranche_2.haut
                    if match_arg_2.code == LimiteTrancheDecimal_Code.Revenu:
                        tranche_haut_2 = match_arg_2.value
                        if (decimal_of_money(ressources_menage_arrondies) >=
                                tranche_haut_2):
                            temp_montant_5 = ((tranche_haut_2 -
                                               tranche_2.bas) * tranche_2.taux)
                        else:
                            temp_montant_5 = ((decimal_of_money(ressources_menage_arrondies) -
                                               tranche_2.bas) * tranche_2.taux)
                    elif match_arg_2.code == LimiteTrancheDecimal_Code.Infini:
                        _ = match_arg_2.value
                        temp_montant_5 = ((decimal_of_money(ressources_menage_arrondies) -
                                           tranche_2.bas) * tranche_2.taux)
                return (acc_1 + temp_montant_5)
            temp_montant_3 = money_of_decimal(((list_fold_left(temp_montant_4,
                                                               decimal_of_string(
                                                                   "0."),
                                                               tranches_revenus_d832_26_multipliees) +
                                                (decimal_of_money(montant_forfaitaire_d832_26) *
                                                 n_nombre_parts_d832_25)) / decimal_of_string("12.")))
    except EmptyError:
        temp_montant_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=623, start_column=10,
                                             end_line=623, end_column=17,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_1 = log_variable_definition(["CalculÉquivalenceLoyerMinimale",
                                         "montant"], temp_montant_3)
    return CalculEquivalenceLoyerMinimaleOut(montant_out=montant_1)


def calcul_nombre_part_logement_foyer(calcul_nombre_part_logement_foyer_in: CalculNombrePartLogementFoyerIn):
    condition_2_du_832_25_1 = calcul_nombre_part_logement_foyer_in.condition_2_du_832_25_in
    nombre_personnes_a_charge = calcul_nombre_part_logement_foyer_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl = calcul_nombre_part_logement_foyer_in.situation_familiale_calcul_apl_in
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4072, start_column=5,
                                                 end_line=4072, end_column=26,
                                                 law_headings=["Article D832-25",
                                                               "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), condition_2_du_832_25_1):
                if (nombre_personnes_a_charge ==
                        integer_of_string("0")):
                    match_arg_3 = situation_familiale_calcul_apl
                    if match_arg_3.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_3.value
                        temp_n_nombre_parts_d832_25 = decimal_of_string("1.2")
                    elif match_arg_3.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_3.value
                        temp_n_nombre_parts_d832_25 = decimal_of_string("1.5")
                else:
                    if (nombre_personnes_a_charge ==
                            integer_of_string("1")):
                        temp_n_nombre_parts_d832_25 = decimal_of_string("2.5")
                    else:
                        if (nombre_personnes_a_charge ==
                                integer_of_string("2")):
                            temp_n_nombre_parts_d832_25 = decimal_of_string(
                                "3.")
                        else:
                            if (nombre_personnes_a_charge ==
                                    integer_of_string("3")):
                                temp_n_nombre_parts_d832_25 = decimal_of_string(
                                    "3.7")
                            else:
                                if (nombre_personnes_a_charge ==
                                        integer_of_string("4")):
                                    temp_n_nombre_parts_d832_25 = decimal_of_string(
                                        "4.3")
                                else:
                                    temp_n_nombre_parts_d832_25 = (decimal_of_string("4.3") +
                                                                   (decimal_of_string("0.5") *
                                                                    decimal_of_integer((nombre_personnes_a_charge -
                                                                                        integer_of_string("4")))))
            else:
                temp_n_nombre_parts_d832_25 = dead_value
                raise EmptyError
        except EmptyError:
            if (nombre_personnes_a_charge ==
                    integer_of_string("0")):
                match_arg_4 = situation_familiale_calcul_apl
                if match_arg_4.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_4.value
                    temp_n_nombre_parts_d832_25 = decimal_of_string("1.4")
                elif match_arg_4.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_4.value
                    temp_n_nombre_parts_d832_25 = decimal_of_string("1.8")
            else:
                if (nombre_personnes_a_charge ==
                        integer_of_string("1")):
                    temp_n_nombre_parts_d832_25 = decimal_of_string("2.5")
                else:
                    if (nombre_personnes_a_charge ==
                            integer_of_string("2")):
                        temp_n_nombre_parts_d832_25 = decimal_of_string("3.")
                    else:
                        if (nombre_personnes_a_charge ==
                                integer_of_string("3")):
                            temp_n_nombre_parts_d832_25 = decimal_of_string(
                                "3.7")
                        else:
                            if (nombre_personnes_a_charge ==
                                    integer_of_string("4")):
                                temp_n_nombre_parts_d832_25 = decimal_of_string(
                                    "4.3")
                            else:
                                temp_n_nombre_parts_d832_25 = (decimal_of_string("4.3") +
                                                               (decimal_of_string("0.5") *
                                                                decimal_of_integer((nombre_personnes_a_charge -
                                                                                    integer_of_string("4")))))
    except EmptyError:
        temp_n_nombre_parts_d832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=630, start_column=10,
                                             end_line=630, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    n_nombre_parts_d832_25_1 = log_variable_definition(["CalculNombrePartLogementFoyer",
                                                        "n_nombre_parts_d832_25"], temp_n_nombre_parts_d832_25)
    return CalculNombrePartLogementFoyerOut(n_nombre_parts_d832_25_out=n_nombre_parts_d832_25_1)


def calcul_nombre_parts_accession_propriete(calcul_nombre_parts_accession_propriete_in: CalculNombrePartsAccessionProprieteIn):
    nombre_personnes_a_charge_1 = calcul_nombre_parts_accession_propriete_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_1 = calcul_nombre_parts_accession_propriete_in.situation_familiale_calcul_apl_in
    try:
        if (nombre_personnes_a_charge_1 ==
                integer_of_string("0")):
            match_arg_5 = situation_familiale_calcul_apl_1
            if match_arg_5.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                _ = match_arg_5.value
                temp_n_nombre_parts_d832_11 = decimal_of_string("1.4")
            elif match_arg_5.code == SituationFamilialeCalculAPL_Code.Couple:
                _ = match_arg_5.value
                temp_n_nombre_parts_d832_11 = decimal_of_string("1.8")
        else:
            if (nombre_personnes_a_charge_1 ==
                    integer_of_string("1")):
                temp_n_nombre_parts_d832_11 = decimal_of_string("2.5")
            else:
                if (nombre_personnes_a_charge_1 ==
                        integer_of_string("2")):
                    temp_n_nombre_parts_d832_11 = decimal_of_string("3.")
                else:
                    if (nombre_personnes_a_charge_1 ==
                            integer_of_string("3")):
                        temp_n_nombre_parts_d832_11 = decimal_of_string("3.7")
                    else:
                        if (nombre_personnes_a_charge_1 ==
                                integer_of_string("4")):
                            temp_n_nombre_parts_d832_11 = decimal_of_string(
                                "4.3")
                        else:
                            temp_n_nombre_parts_d832_11 = (decimal_of_string("4.3") +
                                                           (decimal_of_string("0.5") *
                                                            decimal_of_integer((nombre_personnes_a_charge_1 -
                                                                                integer_of_string("4")))))
    except EmptyError:
        temp_n_nombre_parts_d832_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=685, start_column=10,
                                             end_line=685, end_column=32,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    n_nombre_parts_d832_11 = log_variable_definition(["CalculNombrePartsAccessionPropriété",
                                                      "n_nombre_parts_d832_11"], temp_n_nombre_parts_d832_11)
    return CalculNombrePartsAccessionProprieteOut(n_nombre_parts_d832_11_out=n_nombre_parts_d832_11)


def ouverture_droits_retraite(ouverture_droits_retraite_in: OuvertureDroitsRetraiteIn):
    date_naissance_assure = ouverture_droits_retraite_in.date_naissance_assure_in
    try:
        def temp_age_ouverture_droit(_: Any):
            raise EmptyError

        def temp_age_ouverture_droit_1(_: Any):
            return False

        def temp_age_ouverture_droit_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=294, start_column=5, end_line=294, end_column=48,
                                                 law_headings=["Article D161-2-1-9",
                                                               "Paragraphe 2 : Ouverture du droit et liquidation.",
                                                               "Sous-section 4 : Assurance vieillesse",
                                                               "Section 1 : Bénéficiaires",
                                                               "Chapitre 1er : Dispositions relatives aux prestations",
                                                               "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                                               "Livre I : Généralités - Dispositions communes à tout ou partie des régimes de base",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (year_of_date(date_naissance_assure) ==
                                                                                                 integer_of_string("1954"))):
                return (duration_of_numbers(61, 0, 0) +
                        duration_of_numbers(0, 7, 0))
            else:
                raise EmptyError

        def temp_age_ouverture_droit_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=285, start_column=5, end_line=285, end_column=48,
                                                 law_headings=["Article D161-2-1-9",
                                                               "Paragraphe 2 : Ouverture du droit et liquidation.",
                                                               "Sous-section 4 : Assurance vieillesse",
                                                               "Section 1 : Bénéficiaires",
                                                               "Chapitre 1er : Dispositions relatives aux prestations",
                                                               "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                                               "Livre I : Généralités - Dispositions communes à tout ou partie des régimes de base",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (year_of_date(date_naissance_assure) ==
                                                                                                 integer_of_string("1953"))):
                return (duration_of_numbers(61, 0, 0) +
                        duration_of_numbers(0, 2, 0))
            else:
                raise EmptyError

        def temp_age_ouverture_droit_4(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=276, start_column=5, end_line=276, end_column=48,
                                                 law_headings=["Article D161-2-1-9",
                                                               "Paragraphe 2 : Ouverture du droit et liquidation.",
                                                               "Sous-section 4 : Assurance vieillesse",
                                                               "Section 1 : Bénéficiaires",
                                                               "Chapitre 1er : Dispositions relatives aux prestations",
                                                               "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                                               "Livre I : Généralités - Dispositions communes à tout ou partie des régimes de base",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (year_of_date(date_naissance_assure) ==
                                                                                                 integer_of_string("1952"))):
                return (duration_of_numbers(60, 0, 0) +
                        duration_of_numbers(0, 9, 0))
            else:
                raise EmptyError

        def temp_age_ouverture_droit_5(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=266, start_column=5, end_line=267, end_column=43,
                                                 law_headings=["Article D161-2-1-9",
                                                               "Paragraphe 2 : Ouverture du droit et liquidation.",
                                                               "Sous-section 4 : Assurance vieillesse",
                                                               "Section 1 : Bénéficiaires",
                                                               "Chapitre 1er : Dispositions relatives aux prestations",
                                                               "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                                               "Livre I : Généralités - Dispositions communes à tout ou partie des régimes de base",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((date_naissance_assure >=
                                                                                                  date_of_numbers(1951, 7, 1)) and (date_naissance_assure <=
                                                                                                                                    date_of_numbers(1951, 12, 31)))):
                return (duration_of_numbers(60, 0, 0) +
                        duration_of_numbers(0, 4, 0))
            else:
                raise EmptyError

        def temp_age_ouverture_droit_6(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=256, start_column=5, end_line=256, end_column=42,
                                                 law_headings=["Article D161-2-1-9",
                                                               "Paragraphe 2 : Ouverture du droit et liquidation.",
                                                               "Sous-section 4 : Assurance vieillesse",
                                                               "Section 1 : Bénéficiaires",
                                                               "Chapitre 1er : Dispositions relatives aux prestations",
                                                               "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                                               "Livre I : Généralités - Dispositions communes à tout ou partie des régimes de base",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), (date_naissance_assure <
                                                                                                 date_of_numbers(1951, 7, 1))):
                return duration_of_numbers(60, 0, 0)
            else:
                raise EmptyError

        def temp_age_ouverture_droit_7(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=119, start_column=5, end_line=119, end_column=43,
                                                 law_headings=["Article L161-17-2",
                                                               "Paragraphe 1 : Information et simplification des démarches des assurés.",
                                                               "Sous-section 4 : Assurance vieillesse",
                                                               "Section 1 : Bénéficiaires",
                                                               "Chapitre 1er : Dispositions relatives aux prestations",
                                                               "Titre VI : Dispositions relatives aux prestations et aux soins - Contrôle médical - Tutelle aux prestations sociales",
                                                               "Titre III: Titre III : Dispositions communes relatives au financement",
                                                               "Partie législative",
                                                               "Code de la sécurité sociale"]), (date_naissance_assure >=
                                                                                                 date_of_numbers(1955, 1, 1))):
                return duration_of_numbers(62, 0, 0)
            else:
                raise EmptyError
        temp_age_ouverture_droit_8 = handle_default([temp_age_ouverture_droit_7,
                                                    temp_age_ouverture_droit_6,
                                                    temp_age_ouverture_droit_5,
                                                    temp_age_ouverture_droit_4,
                                                    temp_age_ouverture_droit_3,
                                                    temp_age_ouverture_droit_2],
                                                    temp_age_ouverture_droit_1,
                                                    temp_age_ouverture_droit)
    except EmptyError:
        temp_age_ouverture_droit_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1034,
                                             start_column=10, end_line=1034,
                                             end_column=29,
                                             law_headings=["Date d'ouverture des droits à la retraite",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    age_ouverture_droit = log_variable_definition(["OuvertureDroitsRetraite",
                                                   "âge_ouverture_droit"], temp_age_ouverture_droit_8)
    return OuvertureDroitsRetraiteOut(age_ouverture_droit_out=age_ouverture_droit)


def impaye_depense_logement(impaye_depense_logement_in: ImpayeDepenseLogementIn):
    mode_occupation = impaye_depense_logement_in.mode_occupation_in
    aide_versee = impaye_depense_logement_in.aide_versee_in
    montant_apl = impaye_depense_logement_in.montant_apl_in
    montant_charges = impaye_depense_logement_in.montant_charges_in
    depense_logement = impaye_depense_logement_in.depense_logement_in
    montant_dette = impaye_depense_logement_in.montant_dette_in
    try:
        match_arg_6 = mode_occupation
        if match_arg_6.code == ModeOccupation_Code.Locataire:
            _ = match_arg_6.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayeLoyer,
                                                               Unit())
        elif match_arg_6.code == ModeOccupation_Code.ResidentLogementFoyer:
            _ = match_arg_6.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayePret,
                                                               Unit())
        elif match_arg_6.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            _ = match_arg_6.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayePret,
                                                               Unit())
        elif match_arg_6.code == ModeOccupation_Code.SousLocataire:
            _ = match_arg_6.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayeLoyer,
                                                               Unit())
        elif match_arg_6.code == ModeOccupation_Code.LocationAccession:
            _ = match_arg_6.value
            temp_mode_occupation_impaye = ModeOccupationImpaye(ModeOccupationImpaye_Code.ImpayeLoyer,
                                                               Unit())
    except EmptyError:
        temp_mode_occupation_impaye = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1050,
                                             start_column=11, end_line=1050,
                                             end_column=33,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    mode_occupation_impaye = log_variable_definition(["ImpayéDépenseLogement",
                                                      "mode_occupation_impayé"], temp_mode_occupation_impaye)
    try:
        try:
            match_arg_7 = mode_occupation_impaye
            if match_arg_7.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_7.value
                temp_depense_logement_brute = False
            elif match_arg_7.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_7.value
                temp_depense_logement_brute = True
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2378, start_column=14,
                                                 end_line=2378, end_column=36, law_headings=["Article R824-2",
                                                                                             "Section 1 : Seuils de constitution d'un impayé",
                                                                                             "Chapitre IV : Impayés de dépenses de logement",
                                                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_depense_logement_brute):
                temp_depense_logement_brute_1 = depense_logement
            else:
                temp_depense_logement_brute_1 = dead_value
                raise EmptyError
        except EmptyError:
            match_arg_8 = mode_occupation_impaye
            if match_arg_8.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_8.value
                temp_depense_logement_brute_2 = True
            elif match_arg_8.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_8.value
                temp_depense_logement_brute_2 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2282, start_column=14,
                                                 end_line=2282, end_column=36, law_headings=["Article R824-1",
                                                                                             "Section 1 : Seuils de constitution d'un impayé",
                                                                                             "Chapitre IV : Impayés de dépenses de logement",
                                                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_depense_logement_brute_2):
                temp_depense_logement_brute_1 = depense_logement
            else:
                temp_depense_logement_brute_1 = dead_value
                raise EmptyError
    except EmptyError:
        temp_depense_logement_brute_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1051,
                                             start_column=11, end_line=1051,
                                             end_column=33,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    depense_logement_brute = log_variable_definition(["ImpayéDépenseLogement",
                                                      "dépense_logement_brute"], temp_depense_logement_brute_1)
    try:
        def temp_depense_logement_nette(_: Any):
            raise EmptyError

        def temp_depense_logement_nette_1(_: Any):
            return False

        def temp_depense_logement_nette_2(_: Any):
            match_arg_9 = mode_occupation_impaye
            if match_arg_9.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_9.value
                temp_depense_logement_nette_3 = False
            elif match_arg_9.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_9.value
                temp_depense_logement_nette_3 = True
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2387, start_column=14,
                                                 end_line=2387, end_column=36, law_headings=["Article R824-2",
                                                                                             "Section 1 : Seuils de constitution d'un impayé",
                                                                                             "Chapitre IV : Impayés de dépenses de logement",
                                                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_depense_logement_nette_3):
                match_arg_10 = depense_logement
                if match_arg_10.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    total_echeances = match_arg_10.value
                    return DepenseLogement(DepenseLogement_Code.TotalAnnuelEcheances,
                                           (total_echeances - (montant_apl *
                                            decimal_of_string("12."))))
                elif match_arg_10.code == DepenseLogement_Code.Mensualite:
                    mensualite = match_arg_10.value
                    return DepenseLogement(DepenseLogement_Code.Mensualite,
                                           (mensualite - montant_apl))
                elif match_arg_10.code == DepenseLogement_Code.Loyer:
                    loyer = match_arg_10.value
                    return DepenseLogement(DepenseLogement_Code.Loyer, loyer)
            else:
                raise EmptyError

        def temp_depense_logement_nette_4(_: Any):
            match_arg_11 = mode_occupation_impaye
            if match_arg_11.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_11.value
                temp_depense_logement_nette_5 = True
            elif match_arg_11.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_11.value
                temp_depense_logement_nette_5 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2291, start_column=14,
                                                 end_line=2291, end_column=36, law_headings=["Article R824-1",
                                                                                             "Section 1 : Seuils de constitution d'un impayé",
                                                                                             "Chapitre IV : Impayés de dépenses de logement",
                                                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_depense_logement_nette_5):
                match_arg_12 = depense_logement_brute
                if match_arg_12.code == DepenseLogement_Code.TotalAnnuelEcheances:
                    total = match_arg_12.value
                    return DepenseLogement(DepenseLogement_Code.TotalAnnuelEcheances,
                                           total)
                elif match_arg_12.code == DepenseLogement_Code.Mensualite:
                    mensualite_1 = match_arg_12.value
                    return DepenseLogement(DepenseLogement_Code.Mensualite,
                                           mensualite_1)
                elif match_arg_12.code == DepenseLogement_Code.Loyer:
                    montant_loyer = match_arg_12.value
                    return DepenseLogement(DepenseLogement_Code.Loyer,
                                           (montant_loyer - montant_apl))
            else:
                raise EmptyError
        temp_depense_logement_nette_6 = handle_default([temp_depense_logement_nette_4,
                                                       temp_depense_logement_nette_2],
                                                       temp_depense_logement_nette_1,
                                                       temp_depense_logement_nette)
    except EmptyError:
        temp_depense_logement_nette_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1052,
                                             start_column=11, end_line=1052,
                                             end_column=33,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    depense_logement_nette = log_variable_definition(["ImpayéDépenseLogement",
                                                      "dépense_logement_nette"], temp_depense_logement_nette_6)
    try:
        def temp_seuil_impaye_depense_de_logement(_: Any):
            raise EmptyError

        def temp_seuil_impaye_depense_de_logement_1(_: Any):
            return False

        def temp_seuil_impaye_depense_de_logement_2(_: Any):
            try:
                match_arg_13 = aide_versee
                if match_arg_13.code == VersementA_Code.Bailleur:
                    _ = match_arg_13.value
                    temp_seuil_impaye_depense_de_logement_3 = False
                elif match_arg_13.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_13.value
                    temp_seuil_impaye_depense_de_logement_3 = False
                elif match_arg_13.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_13.value
                    temp_seuil_impaye_depense_de_logement_3 = True
                match_arg_14 = mode_occupation_impaye
                if match_arg_14.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_14.value
                    temp_seuil_impaye_depense_de_logement_4 = False
                elif match_arg_14.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_14.value
                    temp_seuil_impaye_depense_de_logement_4 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=2362, start_column=7,
                                                     end_line=2362, end_column=51,
                                                     law_headings=["Article R824-2",
                                                                   "Section 1 : Seuils de constitution d'un impayé",
                                                                   "Chapitre IV : Impayés de dépenses de logement",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), (temp_seuil_impaye_depense_de_logement_4 and
                                                                                                                    temp_seuil_impaye_depense_de_logement_3)):
                    match_arg_15 = depense_logement_nette
                    if match_arg_15.code == DepenseLogement_Code.TotalAnnuelEcheances:
                        echeance_pret_nette = match_arg_15.value
                        return (echeance_pret_nette *
                                (decimal_of_string("1.") /
                                 decimal_of_string("6.")))
                    elif match_arg_15.code == DepenseLogement_Code.Mensualite:
                        mensualite_nette = match_arg_15.value
                        return (mensualite_nette * decimal_of_string("2."))
                    elif match_arg_15.code == DepenseLogement_Code.Loyer:
                        _ = match_arg_15.value
                        return money_of_cents_string("0")
                else:
                    raise EmptyError
            except EmptyError:
                match_arg_16 = aide_versee
                if match_arg_16.code == VersementA_Code.Bailleur:
                    _ = match_arg_16.value
                    temp_seuil_impaye_depense_de_logement_5 = False
                elif match_arg_16.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_16.value
                    temp_seuil_impaye_depense_de_logement_5 = True
                elif match_arg_16.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_16.value
                    temp_seuil_impaye_depense_de_logement_5 = False
                match_arg_17 = mode_occupation_impaye
                if match_arg_17.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_17.value
                    temp_seuil_impaye_depense_de_logement_6 = False
                elif match_arg_17.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_17.value
                    temp_seuil_impaye_depense_de_logement_6 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=2334, start_column=7,
                                                     end_line=2334, end_column=42,
                                                     law_headings=["Article R824-2",
                                                                   "Section 1 : Seuils de constitution d'un impayé",
                                                                   "Chapitre IV : Impayés de dépenses de logement",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), (temp_seuil_impaye_depense_de_logement_6 and
                                                                                                                    temp_seuil_impaye_depense_de_logement_5)):
                    match_arg_18 = depense_logement_brute
                    if match_arg_18.code == DepenseLogement_Code.TotalAnnuelEcheances:
                        echeance_pret_brute = match_arg_18.value
                        return (echeance_pret_brute *
                                (decimal_of_string("1.") /
                                 decimal_of_string("6.")))
                    elif match_arg_18.code == DepenseLogement_Code.Mensualite:
                        mensualite_brute = match_arg_18.value
                        return (mensualite_brute * decimal_of_string("2."))
                    elif match_arg_18.code == DepenseLogement_Code.Loyer:
                        _ = match_arg_18.value
                        return money_of_cents_string("0")
                else:
                    raise EmptyError

        def temp_seuil_impaye_depense_de_logement_7(_: Any):
            try:
                match_arg_19 = aide_versee
                if match_arg_19.code == VersementA_Code.Bailleur:
                    _ = match_arg_19.value
                    temp_seuil_impaye_depense_de_logement_8 = True
                elif match_arg_19.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_19.value
                    temp_seuil_impaye_depense_de_logement_8 = False
                elif match_arg_19.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_19.value
                    temp_seuil_impaye_depense_de_logement_8 = False
                match_arg_20 = mode_occupation_impaye
                if match_arg_20.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_20.value
                    temp_seuil_impaye_depense_de_logement_9 = True
                elif match_arg_20.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_20.value
                    temp_seuil_impaye_depense_de_logement_9 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=2268, start_column=20,
                                                     end_line=2268, end_column=51,
                                                     law_headings=["Article R824-1",
                                                                   "Section 1 : Seuils de constitution d'un impayé",
                                                                   "Chapitre IV : Impayés de dépenses de logement",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), (temp_seuil_impaye_depense_de_logement_9 and
                                                                                                                    temp_seuil_impaye_depense_de_logement_8)):
                    match_arg_21 = depense_logement_nette
                    if match_arg_21.code == DepenseLogement_Code.TotalAnnuelEcheances:
                        _ = match_arg_21.value
                        return money_of_cents_string("0")
                    elif match_arg_21.code == DepenseLogement_Code.Mensualite:
                        _ = match_arg_21.value
                        return money_of_cents_string("0")
                    elif match_arg_21.code == DepenseLogement_Code.Loyer:
                        loyer_net = match_arg_21.value
                        return ((loyer_net + montant_charges) *
                                decimal_of_string("2."))
                else:
                    raise EmptyError
            except EmptyError:
                match_arg_22 = aide_versee
                if match_arg_22.code == VersementA_Code.Bailleur:
                    _ = match_arg_22.value
                    temp_seuil_impaye_depense_de_logement_10 = False
                elif match_arg_22.code == VersementA_Code.Beneficiaire:
                    _ = match_arg_22.value
                    temp_seuil_impaye_depense_de_logement_10 = True
                elif match_arg_22.code == VersementA_Code.EtablissementHabilite:
                    _ = match_arg_22.value
                    temp_seuil_impaye_depense_de_logement_10 = False
                match_arg_23 = mode_occupation_impaye
                if match_arg_23.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                    _ = match_arg_23.value
                    temp_seuil_impaye_depense_de_logement_11 = True
                elif match_arg_23.code == ModeOccupationImpaye_Code.ImpayePret:
                    _ = match_arg_23.value
                    temp_seuil_impaye_depense_de_logement_11 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=2252, start_column=20,
                                                     end_line=2252, end_column=55,
                                                     law_headings=["Article R824-1",
                                                                   "Section 1 : Seuils de constitution d'un impayé",
                                                                   "Chapitre IV : Impayés de dépenses de logement",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), (temp_seuil_impaye_depense_de_logement_11 and
                                                                                                                    temp_seuil_impaye_depense_de_logement_10)):
                    match_arg_24 = depense_logement_brute
                    if match_arg_24.code == DepenseLogement_Code.TotalAnnuelEcheances:
                        _ = match_arg_24.value
                        return money_of_cents_string("0")
                    elif match_arg_24.code == DepenseLogement_Code.Mensualite:
                        _ = match_arg_24.value
                        return money_of_cents_string("0")
                    elif match_arg_24.code == DepenseLogement_Code.Loyer:
                        loyer_brut = match_arg_24.value
                        return ((loyer_brut + montant_charges) *
                                decimal_of_string("2."))
                else:
                    raise EmptyError
        temp_seuil_impaye_depense_de_logement_12 = handle_default([temp_seuil_impaye_depense_de_logement_7,
                                                                  temp_seuil_impaye_depense_de_logement_2],
                                                                  temp_seuil_impaye_depense_de_logement_1,
                                                                  temp_seuil_impaye_depense_de_logement)
    except EmptyError:
        temp_seuil_impaye_depense_de_logement_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1049,
                                             start_column=11, end_line=1049,
                                             end_column=43,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    seuil_impaye_depense_de_logement = log_variable_definition(["ImpayéDépenseLogement",
                                                                "seuil_impayé_dépense_de_logement"],
                                                               temp_seuil_impaye_depense_de_logement_12)
    try:
        try:
            match_arg_25 = mode_occupation_impaye
            if match_arg_25.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_25.value
                temp_montant_impaye = False
            elif match_arg_25.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_25.value
                temp_montant_impaye = True
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2310, start_column=14,
                                                 end_line=2310, end_column=28, law_headings=["Article R824-2",
                                                                                             "Section 1 : Seuils de constitution d'un impayé",
                                                                                             "Chapitre IV : Impayés de dépenses de logement",
                                                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_montant_impaye):
                if (montant_dette >=
                        seuil_impaye_depense_de_logement):
                    temp_montant_impaye_1 = montant_dette
                else:
                    temp_montant_impaye_1 = money_of_cents_string("0")
            else:
                temp_montant_impaye_1 = dead_value
                raise EmptyError
        except EmptyError:
            match_arg_26 = mode_occupation_impaye
            if match_arg_26.code == ModeOccupationImpaye_Code.ImpayeLoyer:
                _ = match_arg_26.value
                temp_montant_impaye_2 = True
            elif match_arg_26.code == ModeOccupationImpaye_Code.ImpayePret:
                _ = match_arg_26.value
                temp_montant_impaye_2 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2247, start_column=14,
                                                 end_line=2247, end_column=28, law_headings=["Article R824-1",
                                                                                             "Section 1 : Seuils de constitution d'un impayé",
                                                                                             "Chapitre IV : Impayés de dépenses de logement",
                                                                                             "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_montant_impaye_2):
                if (montant_dette >=
                        seuil_impaye_depense_de_logement):
                    temp_montant_impaye_1 = montant_dette
                else:
                    temp_montant_impaye_1 = money_of_cents_string("0")
            else:
                temp_montant_impaye_1 = dead_value
                raise EmptyError
    except EmptyError:
        temp_montant_impaye_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1054,
                                             start_column=10, end_line=1054,
                                             end_column=24,
                                             law_headings=["Quantification des impayés de dépense de logement",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_impaye = log_variable_definition(["ImpayéDépenseLogement",
                                              "montant_impayé"], temp_montant_impaye_1)
    return ImpayeDepenseLogementOut(montant_impaye_out=montant_impaye)


def base_mensuelle_allocations_familiales(base_mensuelle_allocations_familiales_in: BaseMensuelleAllocationsFamilialesIn):
    date_courante_1 = base_mensuelle_allocations_familiales_in.date_courante_in
    try:
        def temp_montant_6(_: Any):
            raise EmptyError

        def temp_montant_7(_: Any):
            return False

        def temp_montant_8(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                                 start_line=82, start_column=5, end_line=83, end_column=34,
                                                 law_headings=["Instruction interministérielle n°DSS/2B/2022/82 du 28 mars 2022 relative à la revalorisation au 1er avril 2022 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                               "Montant de la base mensuelle des allocations familiales"]), ((date_courante_1 >=
                                                                                                                              date_of_numbers(2022, 4, 1)) and (date_courante_1 <
                                                                                                                                                                date_of_numbers(2023, 4, 1)))):
                return money_of_cents_string("42228")
            else:
                raise EmptyError

        def temp_montant_9(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                                 start_line=64, start_column=5, end_line=65, end_column=34,
                                                 law_headings=["Instruction interministérielle n°DSS/2B/2021/65 du 19 mars 2021 relative à la revalorisation au 1er avril 2021 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à la Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                               "Montant de la base mensuelle des allocations familiales"]), ((date_courante_1 >=
                                                                                                                              date_of_numbers(2021, 4, 1)) and (date_courante_1 <
                                                                                                                                                                date_of_numbers(2022, 4, 1)))):
                return money_of_cents_string("41481")
            else:
                raise EmptyError

        def temp_montant_10(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                                 start_line=48, start_column=5, end_line=49, end_column=34,
                                                 law_headings=["Instruction interministérielle no DSS/SD2B/2020/33 du 18 février 2020 relative à la revalorisation au 1er avril 2020 des prestations familiales servies en métropole, en Guadeloupe, en Guyane, en Martinique, à La Réunion, à Saint-Barthélemy, à Saint-Martin et dans le département de Mayotte",
                                                               "Montant de la base mensuelle des allocations familiales"]), ((date_courante_1 >=
                                                                                                                              date_of_numbers(2020, 4, 1)) and (date_courante_1 <
                                                                                                                                                                date_of_numbers(2021, 4, 1)))):
                return money_of_cents_string("41440")
            else:
                raise EmptyError

        def temp_montant_11(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                                 start_line=28, start_column=5, end_line=29, end_column=34,
                                                 law_headings=["Instruction ministérielle N°DSS/SD2B/2019/65 du 25 mars 2019 relative à la revalorisation au 1er avril 2019 des prestations familiales servies en métropole",
                                                               "Montant de la base mensuelle des allocations familiales"]), ((date_courante_1 >=
                                                                                                                              date_of_numbers(2019, 4, 1)) and (date_courante_1 <
                                                                                                                                                                date_of_numbers(2020, 4, 1)))):
                return money_of_cents_string("41316")
            else:
                raise EmptyError
        temp_montant_12 = handle_default([temp_montant_11, temp_montant_10,
                                         temp_montant_9, temp_montant_8],
                                         temp_montant_7, temp_montant_6)
    except EmptyError:
        temp_montant_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                             start_line=6, start_column=10,
                                             end_line=6, end_column=17,
                                             law_headings=["Montant de la base mensuelle des allocations familiales"]))
    montant_2 = log_variable_definition(["BaseMensuelleAllocationsFamiliales",
                                         "montant"], temp_montant_12)
    return BaseMensuelleAllocationsFamilialesOut(montant_out=montant_2)


def smic(smic_in: SmicIn):
    date_courante_2 = smic_in.date_courante_in
    residence = smic_in.residence_in
    try:
        def temp_brut_horaire(_: Any):
            raise EmptyError

        def temp_brut_horaire_1(_: Any):
            return False

        def temp_brut_horaire_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=204, start_column=5, end_line=206, end_column=6,
                                                 law_headings=["Article 2",
                                                               "Arrêté du 19 avril 2022 relatif au relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2022, 5, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2022, 12, 31)) and (residence ==
                                                                                                                                                                                      Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                                                   Unit()))))):
                return money_of_cents_string("819")
            else:
                raise EmptyError

        def temp_brut_horaire_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=186, start_column=5, end_line=195, end_column=6,
                                                 law_headings=["Article 2",
                                                               "Arrêté du 19 avril 2022 relatif au relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2022, 5, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2022, 12, 31)) and ((residence ==
                                                                                                                                                                                       Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                                                      ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                                                  Unit())) or ((residence ==
                                                                                                                                                                                                                                Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                                           Unit())) or ((residence ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                                                        ((residence ==
                                                                                                                                                                                                                                                                          Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                                                         ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                                     Unit())) or (residence ==
                                                                                                                                                                                                                                                                                                                  Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                               Unit())))))))))))):
                return money_of_cents_string("1085")
            else:
                raise EmptyError

        def temp_brut_horaire_4(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=165, start_column=5, end_line=167, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2021-1741 du 22 décembre 2021 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2022, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2022, 4, 30)) and (residence ==
                                                                                                                                                                                     Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                                                  Unit()))))):
                return money_of_cents_string("798")
            else:
                raise EmptyError

        def temp_brut_horaire_5(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=146, start_column=5, end_line=155, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2021-1741 du 22 décembre 2021 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2022, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2022, 4, 30)) and ((residence ==
                                                                                                                                                                                      Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                                                     ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                                                 Unit())) or ((residence ==
                                                                                                                                                                                                                               Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                                              ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                                          Unit())) or ((residence ==
                                                                                                                                                                                                                                                                        Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                                                       ((residence ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                                                        ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                                    Unit())) or (residence ==
                                                                                                                                                                                                                                                                                                                 Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                              Unit())))))))))))):
                return money_of_cents_string("1057")
            else:
                raise EmptyError

        def temp_brut_horaire_6(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=125, start_column=5, end_line=127, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2020-1598 du 16 décembre 2020 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2021, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2021, 12, 31)) and (residence ==
                                                                                                                                                                                      Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                                                   Unit()))))):
                return money_of_cents_string("774")
            else:
                raise EmptyError

        def temp_brut_horaire_7(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=107, start_column=5, end_line=116, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2020-1598 du 16 décembre 2020 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2021, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2021, 12, 31)) and ((residence ==
                                                                                                                                                                                       Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                                                      ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                                                  Unit())) or ((residence ==
                                                                                                                                                                                                                                Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                                           Unit())) or ((residence ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                                                        ((residence ==
                                                                                                                                                                                                                                                                          Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                                                         ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                                     Unit())) or (residence ==
                                                                                                                                                                                                                                                                                                                  Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                               Unit())))))))))))):
                return money_of_cents_string("1025")
            else:
                raise EmptyError

        def temp_brut_horaire_8(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=86, start_column=5, end_line=88, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2019-1387 du 18 décembre 2019 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2020, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2020, 12, 31)) and (residence ==
                                                                                                                                                                                      Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                                                   Unit()))))):
                return money_of_cents_string("766")
            else:
                raise EmptyError

        def temp_brut_horaire_9(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=68, start_column=5, end_line=77, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2019-1387 du 18 décembre 2019 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2020, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2020, 12, 31)) and ((residence ==
                                                                                                                                                                                       Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                                                      ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                                                  Unit())) or ((residence ==
                                                                                                                                                                                                                                Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                                           Unit())) or ((residence ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                                                        ((residence ==
                                                                                                                                                                                                                                                                          Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                                                         ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                                     Unit())) or (residence ==
                                                                                                                                                                                                                                                                                                                  Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                               Unit())))))))))))):
                return money_of_cents_string("1015")
            else:
                raise EmptyError

        def temp_brut_horaire_10(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=47, start_column=5, end_line=49, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2018-1173 du 19 décembre 2018 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2019, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2019, 12, 31)) and (residence ==
                                                                                                                                                                                      Collectivite(Collectivite_Code.Mayotte,
                                                                                                                                                                                                   Unit()))))):
                return money_of_cents_string("757")
            else:
                raise EmptyError

        def temp_brut_horaire_11(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                                 start_line=29, start_column=5, end_line=38, end_column=6,
                                                 law_headings=["Article 1",
                                                               "Décret n° 2018-1173 du 19 décembre 2018 portant relèvement du salaire minimum de croissance",
                                                               "Montant du salaire minimum de croissance"]), ((date_courante_2 >=
                                                                                                               date_of_numbers(2019, 1, 1)) and ((date_courante_2 <=
                                                                                                                                                  date_of_numbers(2019, 12, 31)) and ((residence ==
                                                                                                                                                                                       Collectivite(Collectivite_Code.Metropole, Unit())) or
                                                                                                                                                                                      ((residence == Collectivite(Collectivite_Code.Guadeloupe,
                                                                                                                                                                                                                  Unit())) or ((residence ==
                                                                                                                                                                                                                                Collectivite(Collectivite_Code.Guyane, Unit())) or
                                                                                                                                                                                                                               ((residence == Collectivite(Collectivite_Code.Martinique,
                                                                                                                                                                                                                                                           Unit())) or ((residence ==
                                                                                                                                                                                                                                                                         Collectivite(Collectivite_Code.LaReunion, Unit())) or
                                                                                                                                                                                                                                                                        ((residence ==
                                                                                                                                                                                                                                                                          Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                                                                                                         ((residence == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                                                                                                     Unit())) or (residence ==
                                                                                                                                                                                                                                                                                                                  Collectivite(Collectivite_Code.SaintPierreEtMiquelon,
                                                                                                                                                                                                                                                                                                                               Unit())))))))))))):
                return money_of_cents_string("1003")
            else:
                raise EmptyError
        temp_brut_horaire_12 = handle_default([temp_brut_horaire_11,
                                              temp_brut_horaire_10,
                                              temp_brut_horaire_9,
                                              temp_brut_horaire_8,
                                              temp_brut_horaire_7,
                                              temp_brut_horaire_6,
                                              temp_brut_horaire_5,
                                              temp_brut_horaire_4,
                                              temp_brut_horaire_3,
                                              temp_brut_horaire_2],
                                              temp_brut_horaire_1,
                                              temp_brut_horaire)
    except EmptyError:
        temp_brut_horaire_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                             start_line=11, start_column=10,
                                             end_line=11, end_column=22,
                                             law_headings=["Prologue",
                                                           "Montant du salaire minimum de croissance"]))
    brut_horaire = log_variable_definition(["Smic", "brut_horaire"],
                                           temp_brut_horaire_12)
    return SmicOut(brut_horaire_out=brut_horaire)


def calcul_aide_personnalisee_logement_locatif(calcul_aide_personnalisee_logement_locatif_in: CalculAidePersonnaliseeLogementLocatifIn):
    loyer_principal = calcul_aide_personnalisee_logement_locatif_in.loyer_principal_in
    ressources_menage_arrondies_1 = calcul_aide_personnalisee_logement_locatif_in.ressources_menage_arrondies_in
    beneficiaire_aide_adulte_ou_enfant_handicapes = calcul_aide_personnalisee_logement_locatif_in.beneficiaire_aide_adulte_ou_enfant_handicapes_in
    date_courante_3 = calcul_aide_personnalisee_logement_locatif_in.date_courante_in
    nombre_personnes_a_charge_2 = calcul_aide_personnalisee_logement_locatif_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_2 = calcul_aide_personnalisee_logement_locatif_in.situation_familiale_calcul_apl_in
    zone = calcul_aide_personnalisee_logement_locatif_in.zone_in
    logement_est_chambre = calcul_aide_personnalisee_logement_locatif_in.logement_est_chambre_in
    agees_ou_handicap_adultes_hebergees_onereux_particuliers = calcul_aide_personnalisee_logement_locatif_in.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
    type_aide = calcul_aide_personnalisee_logement_locatif_in.type_aide_in
    colocation = calcul_aide_personnalisee_logement_locatif_in.colocation_in
    reduction_loyer_solidarite = calcul_aide_personnalisee_logement_locatif_in.reduction_loyer_solidarite_in
    try:
        temp_fraction_l832_3 = decimal_of_string("0.98")
    except EmptyError:
        temp_fraction_l832_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=580, start_column=11,
                                             end_line=580, end_column=26,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    fraction_l832_3 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                               "fraction_l832_3"], temp_fraction_l832_3)
    try:
        temp_montant_forfaitaire_d823_16 = money_of_cents_string("500")
    except EmptyError:
        temp_montant_forfaitaire_d823_16 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=583, start_column=11,
                                             end_line=583, end_column=38,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d823_16 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                           "montant_forfaitaire_d823_16"], temp_montant_forfaitaire_d823_16)
    try:
        temp_contributions_sociales_dot_date_courante = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                 "contributions_sociales.date_courante"], date_courante_3)
    except EmptyError:
        temp_contributions_sociales_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=545, start_column=10,
                                             end_line=545, end_column=23,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante = temp_contributions_sociales_dot_date_courante
    result = log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                           "contributions_sociales",
                           "ContributionsSocialesAidesPersonnelleLogement"],
                          log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                          "contributions_sociales",
                                          "ContributionsSocialesAidesPersonnelleLogement"],
                                         contributions_sociales_aides_personnelle_logement,
                                         ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in=contributions_sociales_dot_date_courante)))
    contributions_sociales_dot_montant = result.montant_out
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=222, start_column=14, end_line=222, end_column=40,
                                                 law_headings=["Article 14",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 >=
                                                                                                              date_of_numbers(2020, 10, 1)) and (date_courante_3 <
                                                                                                                                                 date_of_numbers(2021, 10, 1)))):
                if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                    match_arg_27 = situation_familiale_calcul_apl_2
                    if match_arg_27.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_27.value
                        temp_taux_composition_familiale = decimal_of_string(
                            "0.0283")
                    elif match_arg_27.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_27.value
                        temp_taux_composition_familiale = decimal_of_string(
                            "0.0315")
                else:
                    if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                        temp_taux_composition_familiale = decimal_of_string(
                            "0.027")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                            temp_taux_composition_familiale = decimal_of_string(
                                "0.0238")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                temp_taux_composition_familiale = decimal_of_string(
                                    "0.0201")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                        integer_of_string("4")):
                                    temp_taux_composition_familiale = decimal_of_string(
                                        "0.0185")
                                else:
                                    if (nombre_personnes_a_charge_2 ==
                                            integer_of_string("5")):
                                        temp_taux_composition_familiale = decimal_of_string(
                                            "0.0179")
                                    else:
                                        if (nombre_personnes_a_charge_2 ==
                                                integer_of_string("6")):
                                            temp_taux_composition_familiale = decimal_of_string(
                                                "0.0173")
                                        else:
                                            temp_taux_composition_familiale = (decimal_of_string("0.0173") -
                                                                               (decimal_of_string("0.0006") *
                                                                                decimal_of_integer((nombre_personnes_a_charge_2 -
                                                                                                    integer_of_string("6")))))
            else:
                temp_taux_composition_familiale = dead_value
                raise EmptyError
        except EmptyError:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=357, start_column=14, end_line=357, end_column=40,
                                                 law_headings=["Article 14",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                    match_arg_28 = situation_familiale_calcul_apl_2
                    if match_arg_28.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_28.value
                        temp_taux_composition_familiale = decimal_of_string(
                            "0.0283")
                    elif match_arg_28.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_28.value
                        temp_taux_composition_familiale = decimal_of_string(
                            "0.0315")
                else:
                    if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                        temp_taux_composition_familiale = decimal_of_string(
                            "0.027")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                            temp_taux_composition_familiale = decimal_of_string(
                                "0.0238")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                temp_taux_composition_familiale = decimal_of_string(
                                    "0.0201")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                        integer_of_string("4")):
                                    temp_taux_composition_familiale = decimal_of_string(
                                        "0.0185")
                                else:
                                    if (nombre_personnes_a_charge_2 ==
                                            integer_of_string("5")):
                                        temp_taux_composition_familiale = decimal_of_string(
                                            "0.0179")
                                    else:
                                        if (nombre_personnes_a_charge_2 ==
                                                integer_of_string("6")):
                                            temp_taux_composition_familiale = decimal_of_string(
                                                "0.0173")
                                        else:
                                            temp_taux_composition_familiale = (decimal_of_string("0.0173") -
                                                                               (decimal_of_string("0.0006") *
                                                                                decimal_of_integer((nombre_personnes_a_charge_2 -
                                                                                                    integer_of_string("6")))))
            else:
                temp_taux_composition_familiale = dead_value
                raise EmptyError
    except EmptyError:
        temp_taux_composition_familiale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=591, start_column=10,
                                             end_line=591, end_column=36,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_composition_familiale = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                          "taux_composition_familiale"], temp_taux_composition_familiale)
    try:
        def temp_abattement_forfaitaire_d823_17(_: Any):
            raise EmptyError

        def temp_abattement_forfaitaire_d823_17_1(_: Any):
            return False

        def temp_abattement_forfaitaire_d823_17_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=576, start_column=14, end_line=576, end_column=44,
                                                 law_headings=["Article 15",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er janvier 2020 au 1er janvier 2022",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 <
                                                                                                              date_of_numbers(2022, 1, 1)) and (date_courante_3 >=
                                                                                                                                                date_of_numbers(2020, 1, 1)))):
                if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                    match_arg_29 = situation_familiale_calcul_apl_2
                    if match_arg_29.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_29.value
                        return money_of_cents_string("458800")
                    elif match_arg_29.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_29.value
                        return money_of_cents_string("657200")
                else:
                    if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                        return money_of_cents_string("783900")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                            return money_of_cents_string("801500")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                return money_of_cents_string("832200")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                        integer_of_string("4")):
                                    return money_of_cents_string("863100")
                                else:
                                    if (nombre_personnes_a_charge_2 ==
                                            integer_of_string("5")):
                                        return money_of_cents_string("893800")
                                    else:
                                        if (nombre_personnes_a_charge_2 ==
                                                integer_of_string("6")):
                                            return money_of_cents_string("924600")
                                        else:
                                            return (money_of_cents_string("924600") +
                                                    (money_of_cents_string("30500") *
                                                     decimal_of_integer((nombre_personnes_a_charge_2 -
                                                                         integer_of_string("6")))))
            else:
                raise EmptyError

        def temp_abattement_forfaitaire_d823_17_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=474, start_column=14, end_line=474, end_column=44,
                                                 law_headings=["Article 15",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2022, 1, 1))):
                if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                    match_arg_30 = situation_familiale_calcul_apl_2
                    if match_arg_30.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_30.value
                        return money_of_cents_string("468300")
                    elif match_arg_30.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_30.value
                        return money_of_cents_string("670900")
                else:
                    if (nombre_personnes_a_charge_2 ==
                            integer_of_string("1")):
                        return money_of_cents_string("800200")
                    else:
                        if (nombre_personnes_a_charge_2 ==
                                integer_of_string("2")):
                            return money_of_cents_string("819200")
                        else:
                            if (nombre_personnes_a_charge_2 ==
                                    integer_of_string("3")):
                                return money_of_cents_string("849500")
                            else:
                                if (nombre_personnes_a_charge_2 ==
                                        integer_of_string("4")):
                                    return money_of_cents_string("881100")
                                else:
                                    if (nombre_personnes_a_charge_2 ==
                                            integer_of_string("5")):
                                        return money_of_cents_string("912400")
                                    else:
                                        if (nombre_personnes_a_charge_2 ==
                                                integer_of_string("6")):
                                            return money_of_cents_string("943900")
                                        else:
                                            return (money_of_cents_string("943900") +
                                                    (money_of_cents_string("31100") *
                                                     decimal_of_integer((nombre_personnes_a_charge_2 -
                                                                         integer_of_string("6")))))
            else:
                raise EmptyError
        temp_abattement_forfaitaire_d823_17_4 = handle_default([temp_abattement_forfaitaire_d823_17_3,
                                                               temp_abattement_forfaitaire_d823_17_2],
                                                               temp_abattement_forfaitaire_d823_17_1,
                                                               temp_abattement_forfaitaire_d823_17)
    except EmptyError:
        temp_abattement_forfaitaire_d823_17_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=585, start_column=11,
                                             end_line=585, end_column=41,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    abattement_forfaitaire_d823_17 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                              "abattement_forfaitaire_d823_17"],
                                                             temp_abattement_forfaitaire_d823_17_4)
    try:
        def temp_loyer_reference(_: Any):
            raise EmptyError

        def temp_loyer_reference_1(_: Any):
            return False

        def temp_loyer_reference_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=305, start_column=14, end_line=305, end_column=29,
                                                 law_headings=["Article 14",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 >=
                                                                                                              date_of_numbers(2020, 10, 1)) and (date_courante_3 <
                                                                                                                                                 date_of_numbers(2021, 10, 1)))):
                if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                    match_arg_31 = situation_familiale_calcul_apl_2
                    if match_arg_31.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_31.value
                        return money_of_cents_string("25869")
                    elif match_arg_31.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_31.value
                        return money_of_cents_string("31664")
                else:
                    return (money_of_cents_string("35630") +
                            (money_of_cents_string("5186") *
                             decimal_of_integer((nombre_personnes_a_charge_2 -
                                                 integer_of_string("1")))))
            else:
                raise EmptyError

        def temp_loyer_reference_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=440, start_column=14, end_line=440, end_column=29,
                                                 law_headings=["Article 14",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                if (nombre_personnes_a_charge_2 ==
                        integer_of_string("0")):
                    match_arg_32 = situation_familiale_calcul_apl_2
                    if match_arg_32.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_32.value
                        return money_of_cents_string("25978")
                    elif match_arg_32.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_32.value
                        return money_of_cents_string("31797")
                else:
                    return (money_of_cents_string("35780") +
                            (money_of_cents_string("5208") *
                             decimal_of_integer((nombre_personnes_a_charge_2 -
                                                 integer_of_string("1")))))
            else:
                raise EmptyError
        temp_loyer_reference_4 = handle_default([temp_loyer_reference_3,
                                                temp_loyer_reference_2],
                                                temp_loyer_reference_1,
                                                temp_loyer_reference)
    except EmptyError:
        temp_loyer_reference_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=579, start_column=11,
                                             end_line=579, end_column=26,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    loyer_reference = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                               "loyer_référence"], temp_loyer_reference_4)
    try:
        match_arg_33 = type_aide
        if match_arg_33.code == TypeAidesPersonnelleLogement_Code.AidePersonnaliseeLogement:
            _ = match_arg_33.value
            temp_montant_minimal_aide_d823_16 = money_of_cents_string("0")
        elif match_arg_33.code == TypeAidesPersonnelleLogement_Code.AllocationLogementFamiliale:
            _ = match_arg_33.value
            temp_montant_minimal_aide_d823_16 = money_of_cents_string("1000")
        elif match_arg_33.code == TypeAidesPersonnelleLogement_Code.AllocationLogementSociale:
            _ = match_arg_33.value
            temp_montant_minimal_aide_d823_16 = money_of_cents_string("1000")
    except EmptyError:
        temp_montant_minimal_aide_d823_16 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=584, start_column=11,
                                             end_line=584, end_column=39,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_minimal_aide_d823_16 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                            "montant_minimal_aide_d823_16"], temp_montant_minimal_aide_d823_16)
    try:
        def temp_plafond_loyer_d823_16_2(_: Any):
            def temp_plafond_loyer_d823_16_2_1(_: Any):
                raise EmptyError

            def temp_plafond_loyer_d823_16_2_2(_: Any):
                return False

            def temp_plafond_loyer_d823_16_2_3(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=57, start_column=5,
                                                     end_line=57, end_column=35, law_headings=["Article 7",
                                                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                               "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                                               date_of_numbers(2021, 10, 1)) and (date_courante_3 >=
                                                                                                                                                                                  date_of_numbers(2020, 10, 1))) and
                                                                                                                                             (nombre_personnes_a_charge_2 >=
                                                                                                                                              integer_of_string("1")))):
                    match_arg_34 = zone
                    if match_arg_34.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_34.value
                        return (money_of_cents_string("40460") +
                                (money_of_cents_string("5870") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_34.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_34.value
                        return (money_of_cents_string("35630") +
                                (money_of_cents_string("5186") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_34.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_34.value
                        return (money_of_cents_string("32956") +
                                (money_of_cents_string("4723") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_4(_: Any):
                match_arg_35 = situation_familiale_calcul_apl_2
                if match_arg_35.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_35.value
                    temp_plafond_loyer_d823_16_2_5 = False
                elif match_arg_35.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_35.value
                    temp_plafond_loyer_d823_16_2_5 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=47, start_column=5,
                                                     end_line=48, end_column=34, law_headings=["Article 7",
                                                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                               "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                                               date_of_numbers(2021, 10, 1)) and (date_courante_3 >=
                                                                                                                                                                                  date_of_numbers(2020, 10, 1))) and
                                                                                                                                             (temp_plafond_loyer_d823_16_2_5 and
                                                                                                                                              (nombre_personnes_a_charge_2 ==
                                                                                                                                               integer_of_string("0"))))):
                    match_arg_36 = zone
                    if match_arg_36.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_36.value
                        return money_of_cents_string("35799")
                    elif match_arg_36.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_36.value
                        return money_of_cents_string("31664")
                    elif match_arg_36.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_36.value
                        return money_of_cents_string("29392")
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_6(_: Any):
                match_arg_37 = situation_familiale_calcul_apl_2
                if match_arg_37.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_37.value
                    temp_plafond_loyer_d823_16_2_7 = True
                elif match_arg_37.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_37.value
                    temp_plafond_loyer_d823_16_2_7 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=37, start_column=5,
                                                     end_line=38, end_column=34, law_headings=["Article 7",
                                                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                               "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                                               date_of_numbers(2021, 10, 1)) and (date_courante_3 >=
                                                                                                                                                                                  date_of_numbers(2020, 10, 1))) and
                                                                                                                                             (temp_plafond_loyer_d823_16_2_7 and
                                                                                                                                              (nombre_personnes_a_charge_2 ==
                                                                                                                                               integer_of_string("0"))))):
                    match_arg_38 = zone
                    if match_arg_38.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_38.value
                        return money_of_cents_string("29682")
                    elif match_arg_38.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_38.value
                        return money_of_cents_string("25859")
                    elif match_arg_38.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_38.value
                        return money_of_cents_string("24246")
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_8(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=117, start_column=5,
                                                     end_line=117, end_column=35, law_headings=["Article 7",
                                                                                                "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_3 >=
                                                                                                                                                                                                                       date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                      (nombre_personnes_a_charge_2 >=
                                                                                                                                                                                                                       integer_of_string("1")))):
                    match_arg_39 = zone
                    if match_arg_39.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_39.value
                        return (money_of_cents_string("40630") +
                                (money_of_cents_string("5895") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_39.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_39.value
                        return (money_of_cents_string("35780") +
                                (money_of_cents_string("5208") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_39.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_39.value
                        return (money_of_cents_string("33094") +
                                (money_of_cents_string("4743") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_9(_: Any):
                match_arg_40 = situation_familiale_calcul_apl_2
                if match_arg_40.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_40.value
                    temp_plafond_loyer_d823_16_2_10 = False
                elif match_arg_40.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_40.value
                    temp_plafond_loyer_d823_16_2_10 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=107, start_column=5,
                                                     end_line=108, end_column=34, law_headings=["Article 7",
                                                                                                "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_3 >=
                                                                                                                                                                                                                       date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                      (temp_plafond_loyer_d823_16_2_10 and
                                                                                                                                                                                                                       (nombre_personnes_a_charge_2 ==
                                                                                                                                                                                                                        integer_of_string("0"))))):
                    match_arg_41 = zone
                    if match_arg_41.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_41.value
                        return money_of_cents_string("35949")
                    elif match_arg_41.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_41.value
                        return money_of_cents_string("31797")
                    elif match_arg_41.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_41.value
                        return money_of_cents_string("29515")
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_11(_: Any):
                match_arg_42 = situation_familiale_calcul_apl_2
                if match_arg_42.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_42.value
                    temp_plafond_loyer_d823_16_2_12 = True
                elif match_arg_42.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_42.value
                    temp_plafond_loyer_d823_16_2_12 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=97, start_column=5,
                                                     end_line=98, end_column=34, law_headings=["Article 7",
                                                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_3 >=
                                                                                                                                                                                                                      date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                     (temp_plafond_loyer_d823_16_2_12 and
                                                                                                                                                                                                                      (nombre_personnes_a_charge_2 ==
                                                                                                                                                                                                                       integer_of_string("0"))))):
                    match_arg_43 = zone
                    if match_arg_43.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_43.value
                        return money_of_cents_string("29807")
                    elif match_arg_43.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_43.value
                        return money_of_cents_string("25978")
                    elif match_arg_43.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_43.value
                        return money_of_cents_string("24348")
                else:
                    raise EmptyError
            return handle_default([temp_plafond_loyer_d823_16_2_11,
                                  temp_plafond_loyer_d823_16_2_9,
                                  temp_plafond_loyer_d823_16_2_8,
                                  temp_plafond_loyer_d823_16_2_6,
                                  temp_plafond_loyer_d823_16_2_4,
                                  temp_plafond_loyer_d823_16_2_3],
                                  temp_plafond_loyer_d823_16_2_2,
                                  temp_plafond_loyer_d823_16_2_1)

        def temp_plafond_loyer_d823_16_2_13(_: Any):
            return True

        def temp_plafond_loyer_d823_16_2_14(_: Any):
            try:
                def temp_plafond_loyer_d823_16_2_15(_: Any):
                    raise EmptyError

                def temp_plafond_loyer_d823_16_2_16(_: Any):
                    return False

                def temp_plafond_loyer_d823_16_2_17(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                         start_line=128, start_column=5,
                                                         end_line=128, end_column=61,
                                                         law_headings=["Article 8",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                       "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                       "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                       date_of_numbers(2021, 10, 1)) and ((date_courante_3 >=
                                                                                                                                                           date_of_numbers(2020, 10, 1)) and
                                                                                                                                                          logement_est_chambre)) and
                                                                                                                     agees_ou_handicap_adultes_hebergees_onereux_particuliers)):
                        match_arg_44 = zone
                        if match_arg_44.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_44.value
                            return money_of_cents_string("22262")
                        elif match_arg_44.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_44.value
                            return money_of_cents_string("19402")
                        elif match_arg_44.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_44.value
                            return money_of_cents_string("18185")
                    else:
                        raise EmptyError

                def temp_plafond_loyer_d823_16_2_18(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=189, start_column=5,
                                                         end_line=189, end_column=61,
                                                         law_headings=["Article 8",
                                                                       "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (((date_courante_3 >=
                                                                                                                                                                                               date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                              logement_est_chambre) and
                                                                                                                                                                                             agees_ou_handicap_adultes_hebergees_onereux_particuliers)):
                        match_arg_45 = zone
                        if match_arg_45.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_45.value
                            return money_of_cents_string("22355")
                        elif match_arg_45.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_45.value
                            return money_of_cents_string("19484")
                        elif match_arg_45.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_45.value
                            return money_of_cents_string("18261")
                    else:
                        raise EmptyError
                return handle_default([temp_plafond_loyer_d823_16_2_18,
                                      temp_plafond_loyer_d823_16_2_17],
                                      temp_plafond_loyer_d823_16_2_16,
                                      temp_plafond_loyer_d823_16_2_15)
            except EmptyError:
                def temp_plafond_loyer_d823_16_2_19(_: Any):
                    raise EmptyError

                def temp_plafond_loyer_d823_16_2_20(_: Any):
                    return False

                def temp_plafond_loyer_d823_16_2_21(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                         start_line=121, start_column=14,
                                                         end_line=121, end_column=37,
                                                         law_headings=["Article 8",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                       "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                       "Archives législatives et réglementaires"]), ((date_courante_3 <
                                                                                                                      date_of_numbers(2021, 10, 1)) and ((date_courante_3 >=
                                                                                                                                                          date_of_numbers(2020, 10, 1)) and
                                                                                                                                                         logement_est_chambre))):
                        match_arg_46 = zone
                        if match_arg_46.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_46.value
                            return money_of_cents_string("26714")
                        elif match_arg_46.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_46.value
                            return money_of_cents_string("23282")
                        elif match_arg_46.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_46.value
                            return money_of_cents_string("21821")
                    else:
                        raise EmptyError

                def temp_plafond_loyer_d823_16_2_22(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=182, start_column=14,
                                                         end_line=182, end_column=37,
                                                         law_headings=["Article 8",
                                                                       "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_3 >=
                                                                                                                                                                                              date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                             logement_est_chambre)):
                        match_arg_47 = zone
                        if match_arg_47.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_47.value
                            return money_of_cents_string("26826")
                        elif match_arg_47.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_47.value
                            return money_of_cents_string("23380")
                        elif match_arg_47.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_47.value
                            return money_of_cents_string("21913")
                    else:
                        raise EmptyError
                return handle_default([temp_plafond_loyer_d823_16_2_22,
                                      temp_plafond_loyer_d823_16_2_21],
                                      temp_plafond_loyer_d823_16_2_20,
                                      temp_plafond_loyer_d823_16_2_19)

        def temp_plafond_loyer_d823_16_2_23(_: Any):
            def temp_plafond_loyer_d823_16_2_24(_: Any):
                raise EmptyError

            def temp_plafond_loyer_d823_16_2_25(_: Any):
                return False

            def temp_plafond_loyer_d823_16_2_26(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=368, start_column=5,
                                                     end_line=368, end_column=35, law_headings=["Article 16",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                                "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                                "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                                                date_of_numbers(2021, 10, 1)) and ((date_courante_3 >=
                                                                                                                                                                                    date_of_numbers(2020, 10, 1)) and colocation)) and
                                                                                                                                              (nombre_personnes_a_charge_2 >=
                                                                                                                                               integer_of_string("1")))):
                    match_arg_48 = zone
                    if match_arg_48.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_48.value
                        return (money_of_cents_string("30345") +
                                (money_of_cents_string("4403") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_48.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_48.value
                        return (money_of_cents_string("26723") +
                                (money_of_cents_string("3890") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_48.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_48.value
                        return (money_of_cents_string("24717") +
                                (money_of_cents_string("3542") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_27(_: Any):
                match_arg_49 = situation_familiale_calcul_apl_2
                if match_arg_49.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_49.value
                    temp_plafond_loyer_d823_16_2_28 = False
                elif match_arg_49.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_49.value
                    temp_plafond_loyer_d823_16_2_28 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=359, start_column=5,
                                                     end_line=360, end_column=34, law_headings=["Article 16",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                                "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                                "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                                                date_of_numbers(2021, 10, 1)) and ((date_courante_3 >=
                                                                                                                                                                                    date_of_numbers(2020, 10, 1)) and colocation)) and
                                                                                                                                              (temp_plafond_loyer_d823_16_2_28 and
                                                                                                                                               (nombre_personnes_a_charge_2 ==
                                                                                                                                                integer_of_string("0"))))):
                    match_arg_50 = zone
                    if match_arg_50.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_50.value
                        return money_of_cents_string("26849")
                    elif match_arg_50.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_50.value
                        return money_of_cents_string("23748")
                    elif match_arg_50.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_50.value
                        return money_of_cents_string("22044")
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_29(_: Any):
                match_arg_51 = situation_familiale_calcul_apl_2
                if match_arg_51.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_51.value
                    temp_plafond_loyer_d823_16_2_30 = True
                elif match_arg_51.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_51.value
                    temp_plafond_loyer_d823_16_2_30 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=350, start_column=5,
                                                     end_line=351, end_column=34, law_headings=["Article 16",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                                "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                                "Archives législatives et réglementaires"]), (((date_courante_3 <
                                                                                                                                                date_of_numbers(2021, 10, 1)) and ((date_courante_3 >=
                                                                                                                                                                                    date_of_numbers(2020, 10, 1)) and colocation)) and
                                                                                                                                              (temp_plafond_loyer_d823_16_2_30 and
                                                                                                                                               (nombre_personnes_a_charge_2 ==
                                                                                                                                                integer_of_string("0"))))):
                    match_arg_52 = zone
                    if match_arg_52.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_52.value
                        return money_of_cents_string("22262")
                    elif match_arg_52.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_52.value
                        return money_of_cents_string("19402")
                    elif match_arg_52.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_52.value
                        return money_of_cents_string("18185")
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_31(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=552, start_column=5,
                                                     end_line=552, end_column=35, law_headings=["Article 16",
                                                                                                "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (((date_courante_3 >=
                                                                                                                                                                                                                        date_of_numbers(2021, 10, 1)) and colocation) and
                                                                                                                                                                                                                      (nombre_personnes_a_charge_2 >=
                                                                                                                                                                                                                       integer_of_string("1")))):
                    match_arg_53 = zone
                    if match_arg_53.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_53.value
                        return (money_of_cents_string("30473") +
                                (money_of_cents_string("4421") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_53.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_53.value
                        return (money_of_cents_string("26835") +
                                (money_of_cents_string("3906") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                    elif match_arg_53.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_53.value
                        return (money_of_cents_string("24821") +
                                (money_of_cents_string("3557") *
                                 decimal_of_integer((nombre_personnes_a_charge_2 -
                                                     integer_of_string("1")))))
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_32(_: Any):
                match_arg_54 = situation_familiale_calcul_apl_2
                if match_arg_54.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_54.value
                    temp_plafond_loyer_d823_16_2_33 = False
                elif match_arg_54.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_54.value
                    temp_plafond_loyer_d823_16_2_33 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=543, start_column=5,
                                                     end_line=544, end_column=34, law_headings=["Article 16",
                                                                                                "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (((date_courante_3 >=
                                                                                                                                                                                                                        date_of_numbers(2021, 10, 1)) and colocation) and
                                                                                                                                                                                                                      (temp_plafond_loyer_d823_16_2_33 and
                                                                                                                                                                                                                       (nombre_personnes_a_charge_2 ==
                                                                                                                                                                                                                        integer_of_string("0"))))):
                    match_arg_55 = zone
                    if match_arg_55.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_55.value
                        return money_of_cents_string("26962")
                    elif match_arg_55.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_55.value
                        return money_of_cents_string("23848")
                    elif match_arg_55.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_55.value
                        return money_of_cents_string("22136")
                else:
                    raise EmptyError

            def temp_plafond_loyer_d823_16_2_34(_: Any):
                match_arg_56 = situation_familiale_calcul_apl_2
                if match_arg_56.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_56.value
                    temp_plafond_loyer_d823_16_2_35 = True
                elif match_arg_56.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_56.value
                    temp_plafond_loyer_d823_16_2_35 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=534, start_column=5,
                                                     end_line=535, end_column=34, law_headings=["Article 16",
                                                                                                "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (((date_courante_3 >=
                                                                                                                                                                                                                        date_of_numbers(2021, 10, 1)) and colocation) and
                                                                                                                                                                                                                      (temp_plafond_loyer_d823_16_2_35 and
                                                                                                                                                                                                                       (nombre_personnes_a_charge_2 ==
                                                                                                                                                                                                                        integer_of_string("0"))))):
                    match_arg_57 = zone
                    if match_arg_57.code == ZoneDHabitation_Code.Zone1:
                        _ = match_arg_57.value
                        return money_of_cents_string("22355")
                    elif match_arg_57.code == ZoneDHabitation_Code.Zone2:
                        _ = match_arg_57.value
                        return money_of_cents_string("19484")
                    elif match_arg_57.code == ZoneDHabitation_Code.Zone3:
                        _ = match_arg_57.value
                        return money_of_cents_string("18261")
                else:
                    raise EmptyError
            return handle_default([temp_plafond_loyer_d823_16_2_34,
                                  temp_plafond_loyer_d823_16_2_32,
                                  temp_plafond_loyer_d823_16_2_31,
                                  temp_plafond_loyer_d823_16_2_29,
                                  temp_plafond_loyer_d823_16_2_27,
                                  temp_plafond_loyer_d823_16_2_26],
                                  temp_plafond_loyer_d823_16_2_25,
                                  temp_plafond_loyer_d823_16_2_24)
        temp_plafond_loyer_d823_16_2_36 = handle_default([temp_plafond_loyer_d823_16_2_23,
                                                         temp_plafond_loyer_d823_16_2_14],
                                                         temp_plafond_loyer_d823_16_2_13,
                                                         temp_plafond_loyer_d823_16_2)
    except EmptyError:
        temp_plafond_loyer_d823_16_2_36 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=589, start_column=10,
                                             end_line=589, end_column=33,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_loyer_d823_16_2 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                       "plafond_loyer_d823_16_2"], temp_plafond_loyer_d823_16_2_36)
    try:
        def temp_montant_forfaitaire_charges_d823_16(_: Any):
            raise EmptyError

        def temp_montant_forfaitaire_charges_d823_16_1(_: Any):
            return False

        def temp_montant_forfaitaire_charges_d823_16_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=394, start_column=14, end_line=394, end_column=49,
                                                 law_headings=["Article 16",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 <
                                                                                                              date_of_numbers(2021, 10, 1)) and ((date_courante_3 >=
                                                                                                                                                  date_of_numbers(2020, 10, 1)) and
                                                                                                                                                 colocation))):
                match_arg_58 = situation_familiale_calcul_apl_2
                if match_arg_58.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_58.value
                    temp_montant_forfaitaire_charges_d823_16_3 = money_of_cents_string(
                        "2699")
                elif match_arg_58.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_58.value
                    temp_montant_forfaitaire_charges_d823_16_3 = money_of_cents_string(
                        "5399")
                return (temp_montant_forfaitaire_charges_d823_16_3 +
                        (money_of_cents_string("1224") *
                         decimal_of_integer(nombre_personnes_a_charge_2)))
            else:
                raise EmptyError

        def temp_montant_forfaitaire_charges_d823_16_4(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=163, start_column=14, end_line=163, end_column=49,
                                                 law_headings=["Article 9",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 <
                                                                                                              date_of_numbers(2021, 10, 1)) and (date_courante_3 >=
                                                                                                                                                 date_of_numbers(2020, 10, 1)))):
                return (money_of_cents_string("5399") +
                        (money_of_cents_string("1224") *
                         decimal_of_integer(nombre_personnes_a_charge_2)))
            else:
                raise EmptyError

        def temp_montant_forfaitaire_charges_d823_16_5(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=577, start_column=14, end_line=577, end_column=49,
                                                 law_headings=["Article 16",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_3 >=
                                                                                                                                                                                      date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                     colocation)):
                match_arg_59 = situation_familiale_calcul_apl_2
                if match_arg_59.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_59.value
                    temp_montant_forfaitaire_charges_d823_16_6 = money_of_cents_string(
                        "2710")
                elif match_arg_59.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_59.value
                    temp_montant_forfaitaire_charges_d823_16_6 = money_of_cents_string(
                        "5422")
                return (temp_montant_forfaitaire_charges_d823_16_6 +
                        (money_of_cents_string("1229") *
                         decimal_of_integer(nombre_personnes_a_charge_2)))
            else:
                raise EmptyError

        def temp_montant_forfaitaire_charges_d823_16_7(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=224, start_column=14, end_line=224, end_column=49,
                                                 law_headings=["Article 9",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                return (money_of_cents_string("5422") +
                        (money_of_cents_string("1229") *
                         decimal_of_integer(nombre_personnes_a_charge_2)))
            else:
                raise EmptyError
        temp_montant_forfaitaire_charges_d823_16_8 = handle_default([temp_montant_forfaitaire_charges_d823_16_7,
                                                                    temp_montant_forfaitaire_charges_d823_16_5,
                                                                    temp_montant_forfaitaire_charges_d823_16_4,
                                                                    temp_montant_forfaitaire_charges_d823_16_2],
                                                                    temp_montant_forfaitaire_charges_d823_16_1,
                                                                    temp_montant_forfaitaire_charges_d823_16)
    except EmptyError:
        temp_montant_forfaitaire_charges_d823_16_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=588, start_column=10,
                                             end_line=588, end_column=45,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_charges_d823_16 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                   "montant_forfaitaire_charges_d823_16"],
                                                                  temp_montant_forfaitaire_charges_d823_16_8)
    try:
        match_arg_60 = zone
        if match_arg_60.code == ZoneDHabitation_Code.Zone1:
            _ = match_arg_60.value
            temp_plafond_suppression_d823_16 = (plafond_loyer_d823_16_2 *
                                                decimal_of_string("4."))
        elif match_arg_60.code == ZoneDHabitation_Code.Zone2:
            _ = match_arg_60.value
            temp_plafond_suppression_d823_16 = (plafond_loyer_d823_16_2 *
                                                decimal_of_string("3.1"))
        elif match_arg_60.code == ZoneDHabitation_Code.Zone3:
            _ = match_arg_60.value
            temp_plafond_suppression_d823_16 = (plafond_loyer_d823_16_2 *
                                                decimal_of_string("3.1"))
    except EmptyError:
        temp_plafond_suppression_d823_16 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=582, start_column=11,
                                             end_line=582, end_column=38,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_suppression_d823_16 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                           "plafond_suppression_d823_16"], temp_plafond_suppression_d823_16)
    try:
        match_arg_61 = zone
        if match_arg_61.code == ZoneDHabitation_Code.Zone1:
            _ = match_arg_61.value
            temp_plafond_degressivite_d823_16 = (plafond_loyer_d823_16_2 *
                                                 decimal_of_string("3.4"))
        elif match_arg_61.code == ZoneDHabitation_Code.Zone2:
            _ = match_arg_61.value
            temp_plafond_degressivite_d823_16 = (plafond_loyer_d823_16_2 *
                                                 decimal_of_string("2.5"))
        elif match_arg_61.code == ZoneDHabitation_Code.Zone3:
            _ = match_arg_61.value
            temp_plafond_degressivite_d823_16 = (plafond_loyer_d823_16_2 *
                                                 decimal_of_string("2.5"))
    except EmptyError:
        temp_plafond_degressivite_d823_16 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=581, start_column=11,
                                             end_line=581, end_column=39,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_degressivite_d823_16 = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                            "plafond_dégressivité_d823_16"], temp_plafond_degressivite_d823_16)
    try:
        if (loyer_principal >
                plafond_loyer_d823_16_2):
            temp_loyer_eligible = plafond_loyer_d823_16_2
        else:
            temp_loyer_eligible = loyer_principal
    except EmptyError:
        temp_loyer_eligible = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=574, start_column=11,
                                             end_line=574, end_column=25,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    loyer_eligible = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                              "loyer_éligible"], temp_loyer_eligible)
    try:
        def temp_traitement_aide_finale_diminue(param_1: Money):
            try:
                try:
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1926, start_column=5,
                                                         end_line=1926, end_column=50,
                                                         law_headings=["Article D823-16",
                                                                       "Sous-section 2 : Calcul de l'aide en secteur locatif",
                                                                       "Section 1 : Calcul, liquidation et versement des aides",
                                                                       "Chapitre III : Modalités de liquidation et de versement",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), beneficiaire_aide_adulte_ou_enfant_handicapes):
                        return param_1
                    else:
                        raise EmptyError
                except EmptyError:
                    if (loyer_principal >
                            plafond_suppression_d823_16):
                        return money_of_cents_string("0")
                    else:
                        if (loyer_principal >
                                plafond_degressivite_d823_16):
                            return (param_1 - (param_1 * ((loyer_principal -
                                                           plafond_degressivite_d823_16) /
                                                          (plafond_suppression_d823_16 -
                                                           plafond_degressivite_d823_16))))
                        else:
                            return param_1
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=600,
                                                     start_column=10,
                                                     end_line=600,
                                                     end_column=17,
                                                     law_headings=["Secteur locatif",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_diminue = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=600, start_column=10,
                                             end_line=600, end_column=17,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_diminue = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                              "traitement_aide_finale_diminué"],
                                                             temp_traitement_aide_finale_diminue)
    try:
        def temp_participation_minimale(_: Any):
            raise EmptyError

        def temp_participation_minimale_1(_: Any):
            return False

        def temp_participation_minimale_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=177, start_column=14, end_line=177, end_column=36,
                                                 law_headings=["Article 13",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 <
                                                                                                              date_of_numbers(2021, 10, 1)) and (date_courante_3 >=
                                                                                                                                                 date_of_numbers(2020, 10, 1)))):
                if (((loyer_eligible + montant_forfaitaire_charges_d823_16) *
                    decimal_of_string("0.085")) >=
                        money_of_cents_string("3524")):
                    return ((loyer_eligible +
                             montant_forfaitaire_charges_d823_16) *
                            decimal_of_string("0.085"))
                else:
                    return money_of_cents_string("3524")
            else:
                raise EmptyError

        def temp_participation_minimale_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=296, start_column=14, end_line=296, end_column=36,
                                                 law_headings=["Article 13",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                if (((loyer_eligible + montant_forfaitaire_charges_d823_16) *
                    decimal_of_string("0.085")) >=
                        money_of_cents_string("3539")):
                    return ((loyer_eligible +
                             montant_forfaitaire_charges_d823_16) *
                            decimal_of_string("0.085"))
                else:
                    return money_of_cents_string("3539")
            else:
                raise EmptyError
        temp_participation_minimale_4 = handle_default([temp_participation_minimale_3,
                                                       temp_participation_minimale_2],
                                                       temp_participation_minimale_1,
                                                       temp_participation_minimale)
    except EmptyError:
        temp_participation_minimale_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=590, start_column=10,
                                             end_line=590, end_column=32,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    participation_minimale = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                      "participation_minimale"], temp_participation_minimale_4)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=256, start_column=14, end_line=256, end_column=28,
                                                 law_headings=["Article 14",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 >=
                                                                                                              date_of_numbers(2020, 10, 1)) and (date_courante_3 <
                                                                                                                                                 date_of_numbers(2021, 10, 1)))):
                temp_rapport_loyers = (decimal_round(((loyer_eligible /
                                                       loyer_reference) * decimal_of_string("100."))) /
                                       decimal_of_string("100."))
            else:
                temp_rapport_loyers = dead_value
                raise EmptyError
        except EmptyError:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=390, start_column=14, end_line=390, end_column=28,
                                                 law_headings=["Article 14",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                temp_rapport_loyers = (decimal_round(((loyer_eligible /
                                                       loyer_reference) * decimal_of_string("100."))) /
                                       decimal_of_string("100."))
            else:
                temp_rapport_loyers = dead_value
                raise EmptyError
    except EmptyError:
        temp_rapport_loyers = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=578, start_column=11,
                                             end_line=578, end_column=25,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    rapport_loyers = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                              "rapport_loyers"], temp_rapport_loyers)
    try:
        def temp_traitement_aide_finale_minoration_forfaitaire(param_2: Money):
            try:
                if ((log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                    "traitement_aide_finale_diminué"],
                                  log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                           "traitement_aide_finale_diminué", "output"],
                                                          log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                          "traitement_aide_finale_diminué"],
                                                                         traitement_aide_finale_diminue,
                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                  "traitement_aide_finale_diminué", "input"],
                                                                                                 param_2)))) - montant_forfaitaire_d823_16) >=
                        money_of_cents_string("0")):
                    return (log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                          "traitement_aide_finale_diminué"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                  "traitement_aide_finale_diminué", "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                 "traitement_aide_finale_diminué"],
                                                                                traitement_aide_finale_diminue,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                         "traitement_aide_finale_diminué", "input"],
                                                                                                        param_2)))) - montant_forfaitaire_d823_16)
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=601,
                                                     start_column=10,
                                                     end_line=601,
                                                     end_column=32,
                                                     law_headings=["Secteur locatif",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_minoration_forfaitaire = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=601, start_column=10,
                                             end_line=601, end_column=32,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                             "traitement_aide_finale_minoration_forfaitaire"],
                                                                            temp_traitement_aide_finale_minoration_forfaitaire)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=280, start_column=14, end_line=280, end_column=33,
                                                 law_headings=["Article 14",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 >=
                                                                                                              date_of_numbers(2020, 10, 1)) and (date_courante_3 <
                                                                                                                                                 date_of_numbers(2021, 10, 1)))):
                if (rapport_loyers <
                        decimal_of_string("0.45")):
                    temp_taux_loyer_eligible_formule = decimal_of_string("0.")
                else:
                    if ((rapport_loyers >= decimal_of_string("0.45")) and
                        (rapport_loyers <
                            decimal_of_string("0.75"))):
                        temp_taux_loyer_eligible_formule = (decimal_of_string("0.0045") *
                                                            (rapport_loyers - decimal_of_string("0.0045")))
                    else:
                        if (rapport_loyers >=
                                decimal_of_string("0.75")):
                            temp_taux_loyer_eligible_formule = ((decimal_of_string("0.0045") *
                                                                 decimal_of_string("0.3")) +
                                                                (decimal_of_string("0.0068") *
                                                                 (rapport_loyers -
                                                                  decimal_of_string("0.75"))))
                        else:
                            temp_taux_loyer_eligible_formule = decimal_of_string(
                                "0.")
            else:
                temp_taux_loyer_eligible_formule = dead_value
                raise EmptyError
        except EmptyError:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=416, start_column=14, end_line=416, end_column=33,
                                                 law_headings=["Article 14",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                if (rapport_loyers <
                        decimal_of_string("0.45")):
                    temp_taux_loyer_eligible_formule = decimal_of_string("0.")
                else:
                    if ((rapport_loyers >= decimal_of_string("0.45")) and
                        (rapport_loyers <
                            decimal_of_string("0.75"))):
                        temp_taux_loyer_eligible_formule = (decimal_of_string("0.0045") *
                                                            (rapport_loyers - decimal_of_string("0.0045")))
                    else:
                        if (rapport_loyers >=
                                decimal_of_string("0.75")):
                            temp_taux_loyer_eligible_formule = ((decimal_of_string("0.0045") *
                                                                 decimal_of_string("0.3")) +
                                                                (decimal_of_string("0.0068") *
                                                                 (rapport_loyers -
                                                                  decimal_of_string("0.75"))))
                        else:
                            temp_taux_loyer_eligible_formule = decimal_of_string(
                                "0.")
            else:
                temp_taux_loyer_eligible_formule = dead_value
                raise EmptyError
    except EmptyError:
        temp_taux_loyer_eligible_formule = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=576, start_column=10,
                                             end_line=576, end_column=17,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_loyer_eligible_formule = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                           "taux_loyer_éligible_formule"], temp_taux_loyer_eligible_formule)
    try:
        def temp_traitement_aide_finale_contributions_sociales_arrondi(param_3: Money):
            try:
                if ((money_round(((log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                    "traitement_aide_finale_minoration_forfaitaire"],
                                                log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                         "traitement_aide_finale_minoration_forfaitaire",
                                                                         "output"],
                                                                        log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                        "traitement_aide_finale_minoration_forfaitaire"],
                                                                                       traitement_aide_finale_minoration_forfaitaire,
                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                "input"], param_3)))) -
                                   log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                 "montant"],
                                 log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                         log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant,
                                                                        log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                              "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                         "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                         "output"],
                                                                                                                        log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                        "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                       traitement_aide_finale_minoration_forfaitaire,
                                                                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                                "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                "input"], param_3))))))))) -
                                  money_of_cents_string("50"))) +
                     log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                  "montant"],
                                  log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                          log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant,
                                                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                 log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                              "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                      "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                       "output"],
                                                                                                                                      log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                     traitement_aide_finale_minoration_forfaitaire,
                                                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                              "input"], param_3))))))))) >=
                        money_of_cents_string("0")):
                    return (money_round(((log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                                        "traitement_aide_finale_minoration_forfaitaire"],
                                                       log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                "traitement_aide_finale_minoration_forfaitaire",
                                                                                "output"],
                                                                               log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                               "traitement_aide_finale_minoration_forfaitaire"],
                                                                                              traitement_aide_finale_minoration_forfaitaire,
                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                       "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                       "input"], param_3)))) -
                                          log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                        "montant"],
                                                       log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                "montant", "output"],
                                                                               log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                               "montant"], contributions_sociales_dot_montant,
                                                                                              log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                                       "montant", "input"],
                                                                                                                      log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                    "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                   log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                            "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                            "output"],
                                                                                                                                                           log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                                           "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                                          traitement_aide_finale_minoration_forfaitaire,
                                                                                                                                                                          log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                                                                   "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                                                   "input"], param_3))))))))) -
                                         money_of_cents_string("50"))) +
                            log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                          "montant"],
                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                  "montant", "output"],
                                                                 log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                 "montant"], contributions_sociales_dot_montant,
                                                                                log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                         "montant", "input"],
                                                                                                        log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                      "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                              "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                              "output"],
                                                                                                                                             log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                            traitement_aide_finale_minoration_forfaitaire,
                                                                                                                                                            log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                                     "input"], param_3)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=602,
                                                     start_column=10,
                                                     end_line=602,
                                                     end_column=40,
                                                     law_headings=["Secteur locatif",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_contributions_sociales_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=602, start_column=10,
                                             end_line=602, end_column=40,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                     "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                                    temp_traitement_aide_finale_contributions_sociales_arrondi)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=287, start_column=14, end_line=287, end_column=33,
                                                 law_headings=["Article 14",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_3 >=
                                                                                                              date_of_numbers(2020, 10, 1)) and (date_courante_3 <
                                                                                                                                                 date_of_numbers(2021, 10, 1)))):
                temp_taux_loyer_eligible_arrondi = (decimal_round((taux_loyer_eligible_formule *
                                                                   decimal_of_string("100000."))) /
                                                    decimal_of_string("100000."))
            else:
                temp_taux_loyer_eligible_arrondi = dead_value
                raise EmptyError
        except EmptyError:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=423, start_column=14, end_line=423, end_column=33,
                                                 law_headings=["Article 14",
                                                               "Chapitre III : Calcul des aides personnelles au logement en secteur locatif",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_3 >=
                                                                                                                                                                                     date_of_numbers(2021, 10, 1))):
                temp_taux_loyer_eligible_arrondi = (decimal_round((taux_loyer_eligible_formule *
                                                                   decimal_of_string("100000."))) /
                                                    decimal_of_string("100000."))
            else:
                temp_taux_loyer_eligible_arrondi = dead_value
                raise EmptyError
    except EmptyError:
        temp_taux_loyer_eligible_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=577, start_column=10,
                                             end_line=577, end_column=17,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_loyer_eligible_arrondi = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                           "taux_loyer_éligible_arrondi"], temp_taux_loyer_eligible_arrondi)
    try:
        def temp_traitement_aide_finale_reduction_loyer_solidarite(param_4: Money):
            try:
                if ((log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                    "traitement_aide_finale_contributions_sociales_arrondi"],
                                  log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                           "traitement_aide_finale_contributions_sociales_arrondi",
                                                           "output"],
                                                          log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                          "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                         traitement_aide_finale_contributions_sociales_arrondi,
                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                  "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                  "input"], param_4)))) - (reduction_loyer_solidarite *
                                                                                                                           fraction_l832_3)) >=
                        money_of_cents_string("0")):
                    return (log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                          "traitement_aide_finale_contributions_sociales_arrondi"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                  "traitement_aide_finale_contributions_sociales_arrondi",
                                                                  "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                 "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                                traitement_aide_finale_contributions_sociales_arrondi,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                         "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                         "input"], param_4)))) - (reduction_loyer_solidarite *
                                                                                                                                  fraction_l832_3))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=603,
                                                     start_column=10,
                                                     end_line=603,
                                                     end_column=36,
                                                     law_headings=["Secteur locatif",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_reduction_loyer_solidarite = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=603, start_column=10,
                                             end_line=603, end_column=36,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_reduction_loyer_solidarite = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                 "traitement_aide_finale_réduction_loyer_solidarité"],
                                                                                temp_traitement_aide_finale_reduction_loyer_solidarite)
    try:
        temp_taux_prise_compte_ressources = (taux_composition_familiale +
                                             taux_loyer_eligible_arrondi)
    except EmptyError:
        temp_taux_prise_compte_ressources = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=586, start_column=11,
                                             end_line=586, end_column=39,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_prise_compte_ressources = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                            "taux_prise_compte_ressources"], temp_taux_prise_compte_ressources)
    try:
        def temp_traitement_aide_finale_montant_minimal(param_5: Money):
            try:
                if (log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                    "traitement_aide_finale_réduction_loyer_solidarité"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                          "traitement_aide_finale_réduction_loyer_solidarité",
                                                          "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                         "traitement_aide_finale_réduction_loyer_solidarité"],
                                                                        traitement_aide_finale_reduction_loyer_solidarite,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                 "traitement_aide_finale_réduction_loyer_solidarité",
                                                                                                 "input"], param_5)))) <
                        montant_minimal_aide_d823_16):
                    return money_of_cents_string("0")
                else:
                    return log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                         "traitement_aide_finale_réduction_loyer_solidarité"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                 "traitement_aide_finale_réduction_loyer_solidarité",
                                                                 "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                "traitement_aide_finale_réduction_loyer_solidarité"],
                                                                               traitement_aide_finale_reduction_loyer_solidarite,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                        "traitement_aide_finale_réduction_loyer_solidarité",
                                                                                                        "input"], param_5))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=604,
                                                     start_column=10,
                                                     end_line=604,
                                                     end_column=25,
                                                     law_headings=["Secteur locatif",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_montant_minimal = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=604, start_column=10,
                                             end_line=604, end_column=25,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                      "traitement_aide_finale_montant_minimal"],
                                                                     temp_traitement_aide_finale_montant_minimal)
    try:
        temp_participation_personnelle = (participation_minimale +
                                          ((ressources_menage_arrondies_1 -
                                            abattement_forfaitaire_d823_17) * taux_prise_compte_ressources))
    except EmptyError:
        temp_participation_personnelle = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=592, start_column=10,
                                             end_line=592, end_column=35,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    participation_personnelle = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                         "participation_personnelle"], temp_participation_personnelle)
    try:
        if (((loyer_eligible + montant_forfaitaire_charges_d823_16) -
            participation_personnelle) <
                money_of_cents_string("0")):
            temp_aide_finale_formule = money_of_cents_string("0")
        else:
            temp_aide_finale_formule = ((loyer_eligible +
                                         montant_forfaitaire_charges_d823_16) -
                                        participation_personnelle)
    except EmptyError:
        temp_aide_finale_formule = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=597, start_column=10,
                                             end_line=597, end_column=29,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule = log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                   "aide_finale_formule"], temp_aide_finale_formule)
    try:
        temp___1 = (plafond_degressivite_d823_16 >=
                    (plafond_loyer_d823_16_2 * decimal_of_string("2.5")))
    except EmptyError:
        temp___1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1929,
                                             start_column=13, end_line=1929,
                                             end_column=76,
                                             law_headings=["Article D823-16",
                                                           "Sous-section 2 : Calcul de l'aide en secteur locatif",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___1
    try:
        temp___2 = ((fraction_l832_3 >= decimal_of_string("0.9")) and
                    (fraction_l832_3 <= decimal_of_string("0.98")))
    except EmptyError:
        temp___2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=833, start_column=13,
                                             end_line=833, end_column=63,
                                             law_headings=["Article L832-3",
                                                           "Chapitre Ier : Champ d'application",
                                                           "Titre III : Aide personnalisée au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___2
    return CalculAidePersonnaliseeLogementLocatifOut(montant_forfaitaire_charges_d823_16_out=montant_forfaitaire_charges_d823_16,
                                                     plafond_loyer_d823_16_2_out=plafond_loyer_d823_16_2,
                                                     participation_minimale_out=participation_minimale,
                                                     taux_composition_familiale_out=taux_composition_familiale,
                                                     participation_personnelle_out=participation_personnelle,
                                                     aide_finale_formule_out=aide_finale_formule,
                                                     traitement_aide_finale_montant_minimal_out=traitement_aide_finale_montant_minimal)


def calcul_aide_personnalisee_logement_foyer(calcul_aide_personnalisee_logement_foyer_in: CalculAidePersonnaliseeLogementFoyerIn):
    mode_occupation_1 = calcul_aide_personnalisee_logement_foyer_in.mode_occupation_in
    ressources_menage_arrondies_2 = calcul_aide_personnalisee_logement_foyer_in.ressources_menage_arrondies_in
    nombre_personnes_a_charge_3 = calcul_aide_personnalisee_logement_foyer_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_3 = calcul_aide_personnalisee_logement_foyer_in.situation_familiale_calcul_apl_in
    zone_1 = calcul_aide_personnalisee_logement_foyer_in.zone_in
    date_courante_4 = calcul_aide_personnalisee_logement_foyer_in.date_courante_in
    redevance = calcul_aide_personnalisee_logement_foyer_in.redevance_in
    condition_2_du_832_25_2 = calcul_aide_personnalisee_logement_foyer_in.condition_2_du_832_25_in
    n_nombre_parts_d832_25_2 = calcul_aide_personnalisee_logement_foyer_in.n_nombre_parts_d832_25_in
    try:
        temp_coefficient_r_d832_25 = money_of_cents_string("121726")
    except EmptyError:
        temp_coefficient_r_d832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=644, start_column=10,
                                             end_line=644, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_r_d832_25 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                     "coefficient_r_d832_25"], temp_coefficient_r_d832_25)
    try:
        temp_montant_forfaitaire_d832_24 = money_of_cents_string("500")
    except EmptyError:
        temp_montant_forfaitaire_d832_24 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=651, start_column=11,
                                             end_line=651, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d832_24 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                           "montant_forfaitaire_d832_24"], temp_montant_forfaitaire_d832_24)
    try:
        temp_montant_minimal_aide_d823_24 = money_of_cents_string("1000")
    except EmptyError:
        temp_montant_minimal_aide_d823_24 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=653, start_column=11,
                                             end_line=653, end_column=39,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_minimal_aide_d823_24 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                            "montant_minimal_aide_d823_24"], temp_montant_minimal_aide_d823_24)
    try:
        try:
            temp_condition_2_du_832_25 = condition_2_du_832_25_2(Unit())
        except EmptyError:
            match_arg_62 = mode_occupation_1
            if match_arg_62.code == ModeOccupation_Code.Locataire:
                _ = match_arg_62.value
                temp_condition_2_du_832_25 = False
            elif match_arg_62.code == ModeOccupation_Code.ResidentLogementFoyer:
                logement_foyer = match_arg_62.value
                match_arg_63 = logement_foyer.type
                if match_arg_63.code == TypeLogementFoyer_Code.LogementPersonnesAgeesOuHandicapees:
                    _ = match_arg_63.value
                    temp_condition_2_du_832_25 = False
                elif match_arg_63.code == TypeLogementFoyer_Code.ResidenceSociale:
                    _ = match_arg_63.value
                    temp_condition_2_du_832_25 = (logement_foyer.date_conventionnement >=
                                                  date_of_numbers(1994, 12, 31))
                elif match_arg_63.code == TypeLogementFoyer_Code.FoyerJeunesTrvailleursOuMigrantsConventionneL353_2Avant1995:
                    _ = match_arg_63.value
                    temp_condition_2_du_832_25 = (logement_foyer.date_conventionnement >=
                                                  date_of_numbers(1990, 9, 30))
                elif match_arg_63.code == TypeLogementFoyer_Code.Autre:
                    _ = match_arg_63.value
                    temp_condition_2_du_832_25 = False
            elif match_arg_62.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_62.value
                temp_condition_2_du_832_25 = False
            elif match_arg_62.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_62.value
                temp_condition_2_du_832_25 = False
            elif match_arg_62.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_62.value
                temp_condition_2_du_832_25 = False
    except EmptyError:
        temp_condition_2_du_832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=641, start_column=12,
                                             end_line=641, end_column=33,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_2_du_832_25_3 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                       "condition_2_du_832_25"], temp_condition_2_du_832_25)
    try:
        temp_contributions_sociales_dot_date_courante_1 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                   "contributions_sociales.date_courante"], date_courante_4)
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=545, start_column=10,
                                             end_line=545, end_column=23,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_1 = temp_contributions_sociales_dot_date_courante_1
    result_1 = log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                             "contributions_sociales",
                             "ContributionsSocialesAidesPersonnelleLogement"],
                            log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                            "contributions_sociales",
                                            "ContributionsSocialesAidesPersonnelleLogement"],
                                           contributions_sociales_aides_personnelle_logement,
                                           ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in=contributions_sociales_dot_date_courante_1)))
    contributions_sociales_dot_montant_1 = result_1.montant_out
    try:
        def temp_plafond_equivalence_loyer_eligible(_: Any):
            raise EmptyError

        def temp_plafond_equivalence_loyer_eligible_1(_: Any):
            return False

        def temp_plafond_equivalence_loyer_eligible_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=501, start_column=14, end_line=501, end_column=48,
                                                 law_headings=["Article 27",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_4 <
                                                                                                              date_of_numbers(2021, 10, 1)) and (date_courante_4 >=
                                                                                                                                                 date_of_numbers(2020, 10, 1)))):
                match_arg_64 = zone_1
                if match_arg_64.code == ZoneDHabitation_Code.Zone1:
                    _ = match_arg_64.value
                    if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                        match_arg_65 = situation_familiale_calcul_apl_3
                        if match_arg_65.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_65.value
                            return money_of_cents_string("44443")
                        elif match_arg_65.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_65.value
                            return money_of_cents_string("52101")
                    else:
                        if (nombre_personnes_a_charge_3 ==
                                integer_of_string("1")):
                            return money_of_cents_string("55555")
                        else:
                            if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("2")):
                                return money_of_cents_string("59454")
                            else:
                                if (nombre_personnes_a_charge_3 ==
                                        integer_of_string("3")):
                                    return money_of_cents_string("63369")
                                else:
                                    return (money_of_cents_string("68350") +
                                            (money_of_cents_string("7089") *
                                             decimal_of_integer((nombre_personnes_a_charge_3 -
                                                                 integer_of_string("4")))))
                elif match_arg_64.code == ZoneDHabitation_Code.Zone2:
                    _ = match_arg_64.value
                    if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                        match_arg_66 = situation_familiale_calcul_apl_3
                        if match_arg_66.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_66.value
                            return money_of_cents_string("40643")
                        elif match_arg_66.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_66.value
                            return money_of_cents_string("47433")
                    else:
                        if (nombre_personnes_a_charge_3 ==
                                integer_of_string("1")):
                            return money_of_cents_string("50575")
                        else:
                            if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("2")):
                                return money_of_cents_string("54138")
                            else:
                                if (nombre_personnes_a_charge_3 ==
                                        integer_of_string("3")):
                                    return money_of_cents_string("57687")
                                else:
                                    return (money_of_cents_string("61469") +
                                            (money_of_cents_string("6407") *
                                             decimal_of_integer((nombre_personnes_a_charge_3 -
                                                                 integer_of_string("4")))))
                elif match_arg_64.code == ZoneDHabitation_Code.Zone3:
                    _ = match_arg_64.value
                    if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                        match_arg_67 = situation_familiale_calcul_apl_3
                        if match_arg_67.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_67.value
                            return money_of_cents_string("38578")
                        elif match_arg_67.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_67.value
                            return money_of_cents_string("44869")
                    else:
                        if (nombre_personnes_a_charge_3 ==
                                integer_of_string("1")):
                            return money_of_cents_string("47602")
                        else:
                            if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("2")):
                                return money_of_cents_string("50744")
                            else:
                                if (nombre_personnes_a_charge_3 ==
                                        integer_of_string("3")):
                                    return money_of_cents_string("53884")
                                else:
                                    return (money_of_cents_string("57416") +
                                            (money_of_cents_string("5946") *
                                             decimal_of_integer((nombre_personnes_a_charge_3 -
                                                                 integer_of_string("4")))))
            else:
                raise EmptyError

        def temp_plafond_equivalence_loyer_eligible_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=2717, start_column=14,
                                                 end_line=2717, end_column=48, law_headings=["Article 27",
                                                                                             "Chapitre V : Calcul de l'aide personnalisée au logement en secteur logement-foyer",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_4 >=
                                                                                                                                                                                                                   date_of_numbers(2021, 10, 1))):
                match_arg_68 = zone_1
                if match_arg_68.code == ZoneDHabitation_Code.Zone1:
                    _ = match_arg_68.value
                    if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                        match_arg_69 = situation_familiale_calcul_apl_3
                        if match_arg_69.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_69.value
                            return money_of_cents_string("44630")
                        elif match_arg_69.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_69.value
                            return money_of_cents_string("52321")
                    else:
                        if (nombre_personnes_a_charge_3 ==
                                integer_of_string("1")):
                            return money_of_cents_string("55788")
                        else:
                            if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("2")):
                                return money_of_cents_string("59704")
                            else:
                                if (nombre_personnes_a_charge_3 ==
                                        integer_of_string("3")):
                                    return money_of_cents_string("63635")
                                else:
                                    return (money_of_cents_string("68637") +
                                            (money_of_cents_string("7119") *
                                             decimal_of_integer((nombre_personnes_a_charge_3 -
                                                                 integer_of_string("4")))))
                elif match_arg_68.code == ZoneDHabitation_Code.Zone2:
                    _ = match_arg_68.value
                    if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                        match_arg_70 = situation_familiale_calcul_apl_3
                        if match_arg_70.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_70.value
                            return money_of_cents_string("40814")
                        elif match_arg_70.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_70.value
                            return money_of_cents_string("47632")
                    else:
                        if (nombre_personnes_a_charge_3 ==
                                integer_of_string("1")):
                            return money_of_cents_string("50787")
                        else:
                            if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("2")):
                                return money_of_cents_string("54365")
                            else:
                                if (nombre_personnes_a_charge_3 ==
                                        integer_of_string("3")):
                                    return money_of_cents_string("57929")
                                else:
                                    return (money_of_cents_string("61727") +
                                            (money_of_cents_string("6434") *
                                             decimal_of_integer((nombre_personnes_a_charge_3 -
                                                                 integer_of_string("4")))))
                elif match_arg_68.code == ZoneDHabitation_Code.Zone3:
                    _ = match_arg_68.value
                    if (nombre_personnes_a_charge_3 ==
                            integer_of_string("0")):
                        match_arg_71 = situation_familiale_calcul_apl_3
                        if match_arg_71.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                            _ = match_arg_71.value
                            return money_of_cents_string("38740")
                        elif match_arg_71.code == SituationFamilialeCalculAPL_Code.Couple:
                            _ = match_arg_71.value
                            return money_of_cents_string("45057")
                    else:
                        if (nombre_personnes_a_charge_3 ==
                                integer_of_string("1")):
                            return money_of_cents_string("47802")
                        else:
                            if (nombre_personnes_a_charge_3 ==
                                    integer_of_string("2")):
                                return money_of_cents_string("50957")
                            else:
                                if (nombre_personnes_a_charge_3 ==
                                        integer_of_string("3")):
                                    return money_of_cents_string("54110")
                                else:
                                    return (money_of_cents_string("57657") +
                                            (money_of_cents_string("5971") *
                                             decimal_of_integer((nombre_personnes_a_charge_3 -
                                                                 integer_of_string("4")))))
            else:
                raise EmptyError
        temp_plafond_equivalence_loyer_eligible_4 = handle_default([temp_plafond_equivalence_loyer_eligible_3,
                                                                   temp_plafond_equivalence_loyer_eligible_2],
                                                                   temp_plafond_equivalence_loyer_eligible_1,
                                                                   temp_plafond_equivalence_loyer_eligible)
    except EmptyError:
        temp_plafond_equivalence_loyer_eligible_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=647, start_column=10,
                                             end_line=647, end_column=44,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_equivalence_loyer_eligible = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                  "plafond_équivalence_loyer_éligible"],
                                                                 temp_plafond_equivalence_loyer_eligible_4)
    try:
        def temp_traitement_aide_finale_minoration_forfaitaire_1(param_6: Money):
            try:
                if ((param_6 - montant_forfaitaire_d832_24) >=
                        money_of_cents_string("0")):
                    return (param_6 - montant_forfaitaire_d832_24)
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=669,
                                                     start_column=10,
                                                     end_line=669,
                                                     end_column=32,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_minoration_forfaitaire_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=669, start_column=10,
                                             end_line=669, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_1 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                               "traitement_aide_finale_minoration_forfaitaire"],
                                                                              temp_traitement_aide_finale_minoration_forfaitaire_1)
    try:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                      "calcul_nombre_parts.condition_2_du_832_25"],
                                                                                     condition_2_du_832_25_3)
    except EmptyError:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=626, start_column=10,
                                             end_line=626, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_condition_2_du_832_25 = temp_calcul_nombre_parts_dot_condition_2_du_832_25
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                          "calcul_nombre_parts.nombre_personnes_à_charge"],
                                                                                         nombre_personnes_a_charge_3)
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=627, start_column=10,
                                             end_line=627, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                               "calcul_nombre_parts.situation_familiale_calcul_apl"],
                                                                                              situation_familiale_calcul_apl_3)
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=628, start_column=10,
                                             end_line=628, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl
    result_2 = log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                             "calcul_nombre_parts", "CalculNombrePartLogementFoyer"],
                            log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                            "calcul_nombre_parts", "CalculNombrePartLogementFoyer"],
                                           calcul_nombre_part_logement_foyer,
                                           CalculNombrePartLogementFoyerIn(condition_2_du_832_25_in=calcul_nombre_parts_dot_condition_2_du_832_25,
                                                                           nombre_personnes_a_charge_in=calcul_nombre_parts_dot_nombre_personnes_a_charge,
                                                                           situation_familiale_calcul_apl_in=calcul_nombre_parts_dot_situation_familiale_calcul_apl)))
    calcul_nombre_parts_dot_n_nombre_parts_d832_25 = result_2.n_nombre_parts_d832_25_out
    try:
        if condition_2_du_832_25_3:
            temp_montant_forfaitaire_d832_27 = money_of_cents_string("1500")
        else:
            temp_montant_forfaitaire_d832_27 = money_of_cents_string("2668")
    except EmptyError:
        temp_montant_forfaitaire_d832_27 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=652, start_column=11,
                                             end_line=652, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d832_27 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                           "montant_forfaitaire_d832_27"], temp_montant_forfaitaire_d832_27)
    try:
        if condition_2_du_832_25_3:
            temp_coefficient_multiplicateur_d832_25 = money_of_cents_string(
                "2142091")
        else:
            temp_coefficient_multiplicateur_d832_25 = money_of_cents_string(
                "1339340")
    except EmptyError:
        temp_coefficient_multiplicateur_d832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=643, start_column=10,
                                             end_line=643, end_column=44,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_25 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                  "coefficient_multiplicateur_d832_25"],
                                                                 temp_coefficient_multiplicateur_d832_25)
    try:
        if (redevance >=
                plafond_equivalence_loyer_eligible):
            temp_equivalence_loyer_eligible = plafond_equivalence_loyer_eligible
        else:
            temp_equivalence_loyer_eligible = redevance
    except EmptyError:
        temp_equivalence_loyer_eligible = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=646, start_column=10,
                                             end_line=646, end_column=36,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    equivalence_loyer_eligible = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                          "équivalence_loyer_éligible"], temp_equivalence_loyer_eligible)
    try:
        try:
            temp_n_nombre_parts_d832_25_1 = n_nombre_parts_d832_25_2(Unit())
        except EmptyError:
            temp_n_nombre_parts_d832_25_1 = calcul_nombre_parts_dot_n_nombre_parts_d832_25
    except EmptyError:
        temp_n_nombre_parts_d832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=645, start_column=19,
                                             end_line=645, end_column=41,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    n_nombre_parts_d832_25_3 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                        "n_nombre_parts_d832_25"], temp_n_nombre_parts_d832_25_1)
    try:
        def temp_depense_nette_minimale_d832_27(param_7: Money):
            try:
                return (equivalence_loyer_eligible - param_7)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=650,
                                                     start_column=11,
                                                     end_line=650,
                                                     end_column=41,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_depense_nette_minimale_d832_27 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=650, start_column=11,
                                             end_line=650, end_column=41,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    depense_nette_minimale_d832_27 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                              "dépense_nette_minimale_d832_27"],
                                                             temp_depense_nette_minimale_d832_27)
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                          "calcul_équivalence_loyer_minimale.ressources_ménage_arrondies"],
                                                                                                         ressources_menage_arrondies_2)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=614, start_column=10,
                                             end_line=614, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                    "calcul_équivalence_loyer_minimale.condition_2_du_832_25"],
                                                                                                   condition_2_du_832_25_3)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=615, start_column=10,
                                             end_line=615, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                     "calcul_équivalence_loyer_minimale.n_nombre_parts_d832_25"],
                                                                                                    n_nombre_parts_d832_25_3)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=616, start_column=10,
                                             end_line=616, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25
    result_3 = log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                             "calcul_équivalence_loyer_minimale",
                             "CalculÉquivalenceLoyerMinimale"],
                            log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                            "calcul_équivalence_loyer_minimale",
                                            "CalculÉquivalenceLoyerMinimale"],
                                           calcul_equivalence_loyer_minimale,
                                           CalculEquivalenceLoyerMinimaleIn(ressources_menage_arrondies_in=calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies,
                                                                            condition_2_du_832_25_in=calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25,
                                                                            n_nombre_parts_d832_25_in=calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25)))
    calcul_equivalence_loyer_minimale_dot_montant = result_3.montant_out
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4022, start_column=5,
                                                 end_line=4022, end_column=26,
                                                 law_headings=["Article D832-25",
                                                               "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), condition_2_du_832_25_3):
                temp_coefficient_prise_en_charge_d832_25_formule = (decimal_of_string("0.9") -
                                                                    (ressources_menage_arrondies_2 /
                                                                     (coefficient_multiplicateur_d832_25 *
                                                                      n_nombre_parts_d832_25_3)))
            else:
                temp_coefficient_prise_en_charge_d832_25_formule = dead_value
                raise EmptyError
        except EmptyError:
            temp_coefficient_prise_en_charge_d832_25_formule = (decimal_of_string("0.95") -
                                                                ((ressources_menage_arrondies_2 - (coefficient_r_d832_25 *
                                                                                                   n_nombre_parts_d832_25_3)) /
                                                                 (coefficient_multiplicateur_d832_25 *
                                                                  n_nombre_parts_d832_25_3)))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_25_formule = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=663, start_column=10,
                                             end_line=663, end_column=17,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_25_formule = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                           "coefficient_prise_en_charge_d832_25_formule"],
                                                                          temp_coefficient_prise_en_charge_d832_25_formule)
    try:
        def temp_abattement_depense_nette_minimale_d832_27(param_8: Money):
            try:
                if (log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                    "dépense_nette_minimale_d832_27"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                          "dépense_nette_minimale_d832_27", "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                         "dépense_nette_minimale_d832_27"],
                                                                        depense_nette_minimale_d832_27,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                 "dépense_nette_minimale_d832_27", "input"],
                                                                                                param_8)))) <=
                        montant_forfaitaire_d832_27):
                    return (montant_forfaitaire_d832_27 -
                            log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                          "dépense_nette_minimale_d832_27"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                  "dépense_nette_minimale_d832_27", "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                 "dépense_nette_minimale_d832_27"],
                                                                                depense_nette_minimale_d832_27,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                         "dépense_nette_minimale_d832_27", "input"],
                                                                                                        param_8)))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=648,
                                                     start_column=11,
                                                     end_line=648,
                                                     end_column=52,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_abattement_depense_nette_minimale_d832_27 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=648, start_column=11,
                                             end_line=648, end_column=52,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    abattement_depense_nette_minimale_d832_27 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                         "abattement_dépense_nette_minimale_d832_27"],
                                                                        temp_abattement_depense_nette_minimale_d832_27)
    try:
        temp_equivalence_loyer_minimale = calcul_equivalence_loyer_minimale_dot_montant
    except EmptyError:
        temp_equivalence_loyer_minimale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=654, start_column=10,
                                             end_line=654, end_column=36,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    equivalence_loyer_minimale = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                          "équivalence_loyer_minimale"], temp_equivalence_loyer_minimale)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4039, start_column=5,
                                                 end_line=4039, end_column=26,
                                                 law_headings=["Article D832-25",
                                                               "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), condition_2_du_832_25_3):
                temp_coefficient_prise_en_charge_d832_25_arrondi = (decimal_round(((coefficient_prise_en_charge_d832_25_formule -
                                                                                    decimal_of_string("0.005")) *
                                                                                   decimal_of_string("100."))) / decimal_of_string("100."))
            else:
                temp_coefficient_prise_en_charge_d832_25_arrondi = dead_value
                raise EmptyError
        except EmptyError:
            temp_coefficient_prise_en_charge_d832_25_arrondi = (decimal_round(((coefficient_prise_en_charge_d832_25_formule -
                                                                                decimal_of_string("0.005")) * decimal_of_string("100."))) /
                                                                decimal_of_string("100."))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_25_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=664, start_column=10,
                                             end_line=664, end_column=17,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_25_arrondi = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                           "coefficient_prise_en_charge_d832_25_arrondi"],
                                                                          temp_coefficient_prise_en_charge_d832_25_arrondi)
    try:
        def temp_traitement_aide_finale_abattement(param_9: Money):
            try:
                if ((log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                    "traitement_aide_finale_minoration_forfaitaire"],
                                  log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                           "traitement_aide_finale_minoration_forfaitaire",
                                                           "output"],
                                                          log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                          "traitement_aide_finale_minoration_forfaitaire"],
                                                                         traitement_aide_finale_minoration_forfaitaire_1,
                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                                                  "input"], param_9)))) -
                     log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                  "abattement_dépense_nette_minimale_d832_27"],
                                  log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                          "abattement_dépense_nette_minimale_d832_27", "output"],
                                                          log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                         "abattement_dépense_nette_minimale_d832_27"],
                                                                         abattement_depense_nette_minimale_d832_27,
                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                 "abattement_dépense_nette_minimale_d832_27", "input"],
                                                                                                 log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                              "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                      "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                       "output"],
                                                                                                                                      log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                     traitement_aide_finale_minoration_forfaitaire_1,
                                                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                              "input"], param_9))))))))) >=
                        money_of_cents_string("0")):
                    return (log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                          "traitement_aide_finale_minoration_forfaitaire"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                  "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                 "traitement_aide_finale_minoration_forfaitaire"],
                                                                                traitement_aide_finale_minoration_forfaitaire_1,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                         "traitement_aide_finale_minoration_forfaitaire",
                                                                                                         "input"], param_9)))) -
                            log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                          "abattement_dépense_nette_minimale_d832_27"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                  "abattement_dépense_nette_minimale_d832_27",
                                                                  "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                 "abattement_dépense_nette_minimale_d832_27"],
                                                                                abattement_depense_nette_minimale_d832_27,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                         "abattement_dépense_nette_minimale_d832_27",
                                                                                                         "input"],
                                                                                                        log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                      "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                              "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                              "output"],
                                                                                                                                             log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                            traitement_aide_finale_minoration_forfaitaire_1,
                                                                                                                                                            log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                                     "input"], param_9)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=670,
                                                     start_column=10,
                                                     end_line=670,
                                                     end_column=20,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_abattement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=670, start_column=10,
                                             end_line=670, end_column=20,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_abattement = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                 "traitement_aide_finale_abattement"],
                                                                temp_traitement_aide_finale_abattement)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4045, start_column=5,
                                                 end_line=4045, end_column=26,
                                                 law_headings=["Article D832-25",
                                                               "Sous-Section 2 : Conditions d'octroi de l'aide personnalisée au logement aux personnes résidant dans un logement-foyer",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), condition_2_du_832_25_3):
                if (coefficient_prise_en_charge_d832_25_arrondi >=
                        decimal_of_string("0.9")):
                    temp_coefficient_prise_en_charge_d832_25_seuil = decimal_of_string(
                        "0.9")
                else:
                    temp_coefficient_prise_en_charge_d832_25_seuil = coefficient_prise_en_charge_d832_25_arrondi
            else:
                temp_coefficient_prise_en_charge_d832_25_seuil = dead_value
                raise EmptyError
        except EmptyError:
            if (coefficient_prise_en_charge_d832_25_arrondi >=
                    decimal_of_string("0.95")):
                temp_coefficient_prise_en_charge_d832_25_seuil = decimal_of_string(
                    "0.95")
            else:
                temp_coefficient_prise_en_charge_d832_25_seuil = coefficient_prise_en_charge_d832_25_arrondi
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_25_seuil = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=665, start_column=10,
                                             end_line=665, end_column=15,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_25_seuil = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                         "coefficient_prise_en_charge_d832_25_seuil"],
                                                                        temp_coefficient_prise_en_charge_d832_25_seuil)
    try:
        def temp_traitement_aide_finale_contributions_sociales_arrondi_1(param_10: Money):
            try:
                if ((money_round(((log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                    "traitement_aide_finale_abattement"],
                                                log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                         "traitement_aide_finale_abattement", "output"],
                                                                        log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                        "traitement_aide_finale_abattement"],
                                                                                       traitement_aide_finale_abattement,
                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                "traitement_aide_finale_abattement", "input"],
                                                                                                               param_10)))) -
                                   log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                 "montant"],
                                 log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                         log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_1,
                                                                        log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                              "traitement_aide_finale_abattement"],
                                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                         "traitement_aide_finale_abattement", "output"],
                                                                                                                        log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                        "traitement_aide_finale_abattement"],
                                                                                                                                       traitement_aide_finale_abattement,
                                                                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                "traitement_aide_finale_abattement", "input"],
                                                                                                                                       param_10))))))))) - money_of_cents_string("50"))) +
                     log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                  "montant"],
                                  log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                          log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_1,
                                                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                 log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                              "traitement_aide_finale_abattement"],
                                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                      "traitement_aide_finale_abattement", "output"],
                                                                                                                                      log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                     "traitement_aide_finale_abattement"],
                                                                                                                                                     traitement_aide_finale_abattement,
                                                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                             "traitement_aide_finale_abattement", "input"],
                                                                                                                                                                             param_10))))))))) >=
                        money_of_cents_string("0")):
                    return (money_round(((log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                        "traitement_aide_finale_abattement"],
                                                       log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                "traitement_aide_finale_abattement", "output"],
                                                                               log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                               "traitement_aide_finale_abattement"],
                                                                                              traitement_aide_finale_abattement,
                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                       "traitement_aide_finale_abattement", "input"],
                                                                                                                      param_10)))) -
                                          log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                        "montant"],
                                                       log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                "montant", "output"],
                                                                               log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                               "montant"], contributions_sociales_dot_montant_1,
                                                                                              log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                                       "montant", "input"],
                                                                                                                      log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                    "traitement_aide_finale_abattement"],
                                                                                                                                   log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                            "traitement_aide_finale_abattement", "output"],
                                                                                                                                                           log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                           "traitement_aide_finale_abattement"],
                                                                                                                                                                          traitement_aide_finale_abattement,
                                                                                                                                                                          log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                                                   "traitement_aide_finale_abattement", "input"],
                                                                                                                                                                                                  param_10))))))))) - money_of_cents_string("50"))) +
                            log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                          "montant"],
                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                  "montant", "output"],
                                                                 log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                 "montant"], contributions_sociales_dot_montant_1,
                                                                                log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                         "montant", "input"],
                                                                                                        log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                      "traitement_aide_finale_abattement"],
                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                              "traitement_aide_finale_abattement", "output"],
                                                                                                                                             log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                             "traitement_aide_finale_abattement"],
                                                                                                                                                            traitement_aide_finale_abattement,
                                                                                                                                                            log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                                                                                                     "traitement_aide_finale_abattement", "input"],
                                                                                                                                                                                    param_10)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=671,
                                                     start_column=10,
                                                     end_line=671,
                                                     end_column=40,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_contributions_sociales_arrondi_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=671, start_column=10,
                                             end_line=671, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_1 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                       "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                                      temp_traitement_aide_finale_contributions_sociales_arrondi_1)
    try:
        if (((equivalence_loyer_eligible - equivalence_loyer_minimale) *
            coefficient_prise_en_charge_d832_25_seuil) <
                money_of_cents_string("0")):
            temp_aide_finale_formule_1 = money_of_cents_string("0")
        else:
            temp_aide_finale_formule_1 = ((equivalence_loyer_eligible -
                                           equivalence_loyer_minimale) *
                                          coefficient_prise_en_charge_d832_25_seuil)
    except EmptyError:
        temp_aide_finale_formule_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=667, start_column=10,
                                             end_line=667, end_column=29,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_1 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                     "aide_finale_formule"], temp_aide_finale_formule_1)
    try:
        def temp_traitement_aide_finale_montant_minimal_1(param_11: Money):
            try:
                if (log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                    "traitement_aide_finale_contributions_sociales_arrondi"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                          "traitement_aide_finale_contributions_sociales_arrondi",
                                                          "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                        traitement_aide_finale_contributions_sociales_arrondi_1,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                 "input"], param_11)))) <
                        montant_minimal_aide_d823_24):
                    return money_of_cents_string("0")
                else:
                    return log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                 "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                               traitement_aide_finale_contributions_sociales_arrondi_1,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                        "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                        "input"], param_11))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=672,
                                                     start_column=10,
                                                     end_line=672,
                                                     end_column=25,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_montant_minimal_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=672, start_column=10,
                                             end_line=672, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_1 = log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                        "traitement_aide_finale_montant_minimal"],
                                                                       temp_traitement_aide_finale_montant_minimal_1)
    return CalculAidePersonnaliseeLogementFoyerOut(coefficient_multiplicateur_d832_25_out=coefficient_multiplicateur_d832_25,
                                                   coefficient_r_d832_25_out=coefficient_r_d832_25,
                                                   n_nombre_parts_d832_25_out=n_nombre_parts_d832_25_3,
                                                   equivalence_loyer_eligible_out=equivalence_loyer_eligible,
                                                   plafond_equivalence_loyer_eligible_out=plafond_equivalence_loyer_eligible,
                                                   equivalence_loyer_minimale_out=equivalence_loyer_minimale,
                                                   coefficient_prise_en_charge_d832_25_seuil_out=coefficient_prise_en_charge_d832_25_seuil,
                                                   aide_finale_formule_out=aide_finale_formule_1,
                                                   traitement_aide_finale_montant_minimal_out=traitement_aide_finale_montant_minimal_1)


def calcul_aide_personnalisee_logement_accession_propriete(calcul_aide_personnalisee_logement_accession_propriete_in: CalculAidePersonnaliseeLogementAccessionProprieteIn):
    mensualite_principale = calcul_aide_personnalisee_logement_accession_propriete_in.mensualite_principale_in
    ressources_menage_arrondies_3 = calcul_aide_personnalisee_logement_accession_propriete_in.ressources_menage_arrondies_in
    nombre_personnes_a_charge_4 = calcul_aide_personnalisee_logement_accession_propriete_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_4 = calcul_aide_personnalisee_logement_accession_propriete_in.situation_familiale_calcul_apl_in
    type_travaux_logement = calcul_aide_personnalisee_logement_accession_propriete_in.type_travaux_logement_in
    date_signature_pret = calcul_aide_personnalisee_logement_accession_propriete_in.date_signature_pret_in
    local_habite_premiere_fois_beneficiaire = calcul_aide_personnalisee_logement_accession_propriete_in.local_habite_premiere_fois_beneficiaire_in
    date_entree_logement = calcul_aide_personnalisee_logement_accession_propriete_in.date_entree_logement_in
    copropriete = calcul_aide_personnalisee_logement_accession_propriete_in.copropriete_in
    situation_r822_11_13_17 = calcul_aide_personnalisee_logement_accession_propriete_in.situation_r822_11_13_17_in
    zone_2 = calcul_aide_personnalisee_logement_accession_propriete_in.zone_in
    type_pret = calcul_aide_personnalisee_logement_accession_propriete_in.type_pret_in
    anciennete_logement = calcul_aide_personnalisee_logement_accession_propriete_in.anciennete_logement_in
    date_courante_5 = calcul_aide_personnalisee_logement_accession_propriete_in.date_courante_in
    try:
        temp_montant_forfaitaire_d832_10 = money_of_cents_string("500")
    except EmptyError:
        temp_montant_forfaitaire_d832_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=721, start_column=11,
                                             end_line=721, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d832_10 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                           "montant_forfaitaire_d832_10"], temp_montant_forfaitaire_d832_10)
    try:
        temp_montant_minimal_aide_d832_10 = money_of_cents_string("1000")
    except EmptyError:
        temp_montant_minimal_aide_d832_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=722, start_column=11,
                                             end_line=722, end_column=39,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_minimal_aide_d832_10 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                            "montant_minimal_aide_d832_10"], temp_montant_minimal_aide_d832_10)
    try:
        temp_coefficient_multiplicateur_d832_11 = money_of_cents_string(
            "2211133")
    except EmptyError:
        temp_coefficient_multiplicateur_d832_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=724, start_column=11,
                                             end_line=724, end_column=45,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_11 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                  "coefficient_multiplicateur_d832_11"],
                                                                 temp_coefficient_multiplicateur_d832_11)
    try:
        temp_coefficient_multiplicateur_d832_18 = decimal_of_string("16.25")
    except EmptyError:
        temp_coefficient_multiplicateur_d832_18 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=725, start_column=11,
                                             end_line=725, end_column=45,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_18 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                  "coefficient_multiplicateur_d832_18"],
                                                                 temp_coefficient_multiplicateur_d832_18)
    try:
        temp_montant_limite_tranches_d832_15_1 = money_of_cents_string(
            "560085")
    except EmptyError:
        temp_montant_limite_tranches_d832_15_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=726, start_column=11,
                                             end_line=726, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_limite_tranches_d832_15_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                 "montant_limite_tranches_d832_15_1"],
                                                                temp_montant_limite_tranches_d832_15_1)
    try:
        temp_taux_tranche_inferieure_d832_15_1 = decimal_of_string("0.208")
    except EmptyError:
        temp_taux_tranche_inferieure_d832_15_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=727, start_column=11,
                                             end_line=727, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_tranche_inferieure_d832_15_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                 "taux_tranche_inférieure_d832_15_1"],
                                                                temp_taux_tranche_inferieure_d832_15_1)
    try:
        temp_taux_tranche_superieure_d832_15_1 = decimal_of_string("0.416")
    except EmptyError:
        temp_taux_tranche_superieure_d832_15_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=728, start_column=11,
                                             end_line=728, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_tranche_superieure_d832_15_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                 "taux_tranche_supérieure_d832_15_1"],
                                                                temp_taux_tranche_superieure_d832_15_1)
    try:
        temp_taux_francs_vers_euros = (decimal_of_string("1.") /
                                       decimal_of_string("6.55957"))
    except EmptyError:
        temp_taux_francs_vers_euros = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=729, start_column=11,
                                             end_line=729, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    taux_francs_vers_euros = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                      "taux_francs_vers_euros"], temp_taux_francs_vers_euros)
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                            "calcul_nombre_parts.nombre_personnes_à_charge"],
                                                                                           nombre_personnes_a_charge_4)
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=682, start_column=10,
                                             end_line=682, end_column=35,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge_1 = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_1
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                 "calcul_nombre_parts.situation_familiale_calcul_apl"],
                                                                                                situation_familiale_calcul_apl_4)
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=683, start_column=10,
                                             end_line=683, end_column=40,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl_1 = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_1
    result_4 = log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                             "calcul_nombre_parts", "CalculNombrePartsAccessionPropriété"],
                            log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                            "calcul_nombre_parts", "CalculNombrePartsAccessionPropriété"],
                                           calcul_nombre_parts_accession_propriete,
                                           CalculNombrePartsAccessionProprieteIn(nombre_personnes_a_charge_in=calcul_nombre_parts_dot_nombre_personnes_a_charge_1,
                                                                                 situation_familiale_calcul_apl_in=calcul_nombre_parts_dot_situation_familiale_calcul_apl_1)))
    calcul_nombre_parts_dot_n_nombre_parts_d832_11 = result_4.n_nombre_parts_d832_11_out
    try:
        match_arg_72 = anciennete_logement
        if match_arg_72.code == NeufOuAncien_Code.Neuf:
            _ = match_arg_72.value
            if (date_signature_pret <=
                    date_of_numbers(1998, 10, 1)):
                temp_coefficient_multiplicateur_d832_17_3 = decimal_of_string(
                    "0.0226")
            else:
                temp_coefficient_multiplicateur_d832_17_3 = decimal_of_string(
                    "0.0234")
        elif match_arg_72.code == NeufOuAncien_Code.Ancien:
            ameliore_par_occupant = match_arg_72.value
            match_arg_73 = ameliore_par_occupant
            if match_arg_73.code == AmelioreParOccupant_Code.Oui:
                _ = match_arg_73.value
                temp_coefficient_multiplicateur_d832_17_3 = decimal_of_string(
                    "0.0172")
            elif match_arg_73.code == AmelioreParOccupant_Code.Non:
                _ = match_arg_73.value
                if (date_signature_pret <=
                        date_of_numbers(1998, 10, 1)):
                    temp_coefficient_multiplicateur_d832_17_3 = decimal_of_string(
                        "0.0226")
                else:
                    temp_coefficient_multiplicateur_d832_17_3 = decimal_of_string(
                        "0.0234")
    except EmptyError:
        temp_coefficient_multiplicateur_d832_17_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=723, start_column=11,
                                             end_line=723, end_column=47,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_multiplicateur_d832_17_3 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                    "coefficient_multiplicateur_d832_17_3"],
                                                                   temp_coefficient_multiplicateur_d832_17_3)
    try:
        temp_contributions_sociales_dot_date_courante_2 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                   "contributions_sociales.date_courante"], date_courante_5)
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=545, start_column=10,
                                             end_line=545, end_column=23,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_2 = temp_contributions_sociales_dot_date_courante_2
    result_5 = log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                             "contributions_sociales",
                             "ContributionsSocialesAidesPersonnelleLogement"],
                            log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                            "contributions_sociales",
                                            "ContributionsSocialesAidesPersonnelleLogement"],
                                           contributions_sociales_aides_personnelle_logement,
                                           ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in=contributions_sociales_dot_date_courante_2)))
    contributions_sociales_dot_montant_2 = result_5.montant_out
    try:
        try:
            def temp_montant_forfaitaire_charges_d832_10(_: Any):
                raise EmptyError

            def temp_montant_forfaitaire_charges_d832_10_1(_: Any):
                return False

            def temp_montant_forfaitaire_charges_d832_10_2(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=464, start_column=7,
                                                     end_line=464, end_column=18, law_headings=["Article 24",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                                "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                                "Archives législatives et réglementaires"]), (((date_courante_5 <
                                                                                                                                                date_of_numbers(2021, 10, 1)) and (date_courante_5 >=
                                                                                                                                                                                   date_of_numbers(2020, 10, 1))) and
                                                                                                                                              copropriete)):
                    match_arg_74 = situation_familiale_calcul_apl_4
                    if match_arg_74.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_74.value
                        temp_montant_forfaitaire_charges_d832_10_3 = money_of_cents_string(
                            "2699")
                    elif match_arg_74.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_74.value
                        temp_montant_forfaitaire_charges_d832_10_3 = money_of_cents_string(
                            "5399")
                    return (temp_montant_forfaitaire_charges_d832_10_3 +
                            (money_of_cents_string("1224") *
                             decimal_of_integer(nombre_personnes_a_charge_4)))
                else:
                    raise EmptyError

            def temp_montant_forfaitaire_charges_d832_10_4(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=2646, start_column=7,
                                                     end_line=2646, end_column=18, law_headings=["Article 24",
                                                                                                 "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                                                 "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_5 >=
                                                                                                                                                                                                                        date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                       copropriete)):
                    match_arg_75 = situation_familiale_calcul_apl_4
                    if match_arg_75.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_75.value
                        temp_montant_forfaitaire_charges_d832_10_5 = money_of_cents_string(
                            "2710")
                    elif match_arg_75.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_75.value
                        temp_montant_forfaitaire_charges_d832_10_5 = money_of_cents_string(
                            "5422")
                    return (temp_montant_forfaitaire_charges_d832_10_5 +
                            (money_of_cents_string("1229") *
                             decimal_of_integer(nombre_personnes_a_charge_4)))
                else:
                    raise EmptyError
            temp_montant_forfaitaire_charges_d832_10_6 = handle_default(
                [temp_montant_forfaitaire_charges_d832_10_4,
                 temp_montant_forfaitaire_charges_d832_10_2],
                temp_montant_forfaitaire_charges_d832_10_1,
                temp_montant_forfaitaire_charges_d832_10)
        except EmptyError:
            def temp_montant_forfaitaire_charges_d832_10_7(_: Any):
                raise EmptyError

            def temp_montant_forfaitaire_charges_d832_10_8(_: Any):
                return False

            def temp_montant_forfaitaire_charges_d832_10_9(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                     start_line=429, start_column=29,
                                                     end_line=429, end_column=64, law_headings=["Article 19",
                                                                                                "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                                                                "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                                                                "Archives législatives et réglementaires"]), ((date_courante_5 <
                                                                                                                                               date_of_numbers(2021, 10, 1)) and (date_courante_5 >=
                                                                                                                                                                                  date_of_numbers(2020, 10, 1)))):
                    return (money_of_cents_string("5399") +
                            (money_of_cents_string("1224") *
                             decimal_of_integer(nombre_personnes_a_charge_4)))
                else:
                    raise EmptyError

            def temp_montant_forfaitaire_charges_d832_10_10(_: Any):
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=2567, start_column=29,
                                                     end_line=2567, end_column=64, law_headings=["Article 19",
                                                                                                 "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                                                 "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_5 >=
                                                                                                                                                                                                                       date_of_numbers(2021, 10, 1))):
                    return (money_of_cents_string("5422") +
                            (money_of_cents_string("1229") *
                             decimal_of_integer(nombre_personnes_a_charge_4)))
                else:
                    raise EmptyError
            temp_montant_forfaitaire_charges_d832_10_6 = handle_default(
                [temp_montant_forfaitaire_charges_d832_10_10,
                 temp_montant_forfaitaire_charges_d832_10_9],
                temp_montant_forfaitaire_charges_d832_10_8,
                temp_montant_forfaitaire_charges_d832_10_7)
    except EmptyError:
        temp_montant_forfaitaire_charges_d832_10_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=720, start_column=11,
                                             end_line=720, end_column=46,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_charges_d832_10 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                   "montant_forfaitaire_charges_d832_10"],
                                                                  temp_montant_forfaitaire_charges_d832_10_6)
    try:
        def temp_traitement_aide_finale_minoration_forfaitaire_2(param_12: Money):
            try:
                if ((param_12 - montant_forfaitaire_d832_10) >=
                        money_of_cents_string("0")):
                    return (param_12 - montant_forfaitaire_d832_10)
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=739,
                                                     start_column=10,
                                                     end_line=739,
                                                     end_column=32,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_minoration_forfaitaire_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=739, start_column=10,
                                             end_line=739, end_column=32,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_2 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                               "traitement_aide_finale_minoration_forfaitaire"],
                                                                              temp_traitement_aide_finale_minoration_forfaitaire_2)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=3660, start_column=5,
                                                 end_line=3660, end_column=28,
                                                 law_headings=["Article D832-18",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), situation_r822_11_13_17):
                temp_ressources_menage_avec_d832_18 = ressources_menage_arrondies_3
            else:
                temp_ressources_menage_avec_d832_18 = dead_value
                raise EmptyError
        except EmptyError:
            if (ressources_menage_arrondies_3 <= (mensualite_principale *
                                                  coefficient_multiplicateur_d832_18)):
                temp_ressources_menage_avec_d832_18 = (mensualite_principale *
                                                       coefficient_multiplicateur_d832_18)
            else:
                temp_ressources_menage_avec_d832_18 = ressources_menage_arrondies_3
    except EmptyError:
        temp_ressources_menage_avec_d832_18 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=719, start_column=11,
                                             end_line=719, end_column=41,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    ressources_menage_avec_d832_18 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                              "ressources_ménage_avec_d832_18"],
                                                             temp_ressources_menage_avec_d832_18)
    try:
        def temp_calcul_plafond_mensualite_d832_10_3(param_13: Date):
            try:
                def temp_calcul_plafond_mensualite_d832_10_3_1(_: Any):
                    raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_2(_: Any):
                    return False

                def temp_calcul_plafond_mensualite_d832_10_3_3(_: Any):
                    match_arg_76 = type_pret
                    if match_arg_76.code == TypePret_Code.D331_32:
                        _ = match_arg_76.value
                        temp_calcul_plafond_mensualite_d832_10_3_4 = False
                    elif match_arg_76.code == TypePret_Code.D331_63_64:
                        _ = match_arg_76.value
                        temp_calcul_plafond_mensualite_d832_10_3_4 = True
                    elif match_arg_76.code == TypePret_Code.D331_59_8:
                        _ = match_arg_76.value
                        temp_calcul_plafond_mensualite_d832_10_3_4 = False
                    elif match_arg_76.code == TypePret_Code.D331_76_1:
                        _ = match_arg_76.value
                        temp_calcul_plafond_mensualite_d832_10_3_4 = False
                    elif match_arg_76.code == TypePret_Code.Autre:
                        _ = match_arg_76.value
                        temp_calcul_plafond_mensualite_d832_10_3_4 = False
                    match_arg_77 = anciennete_logement
                    if match_arg_77.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_77.value
                        temp_calcul_plafond_mensualite_d832_10_3_5 = False
                    elif match_arg_77.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_77.value
                        temp_calcul_plafond_mensualite_d832_10_3_5 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2517, start_column=5,
                                                         end_line=2519, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2019, 9, 30)) and
                                                                                                                                                                                             (temp_calcul_plafond_mensualite_d832_10_3_5 and
                                                                                                                                                                                              temp_calcul_plafond_mensualite_d832_10_3_4))):
                        match_arg_78 = zone_2
                        if match_arg_78.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_78.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_79 = situation_familiale_calcul_apl_4
                                if match_arg_79.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_79.value
                                    return money_of_cents_string("29986")
                                elif match_arg_79.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_79.value
                                    return money_of_cents_string("36187")
                            else:
                                return (money_of_cents_string("42386") +
                                        (money_of_cents_string("6201") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_78.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_78.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_80 = situation_familiale_calcul_apl_4
                                if match_arg_80.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_80.value
                                    return money_of_cents_string("26730")
                                elif match_arg_80.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_80.value
                                    return money_of_cents_string("32193")
                            else:
                                return (money_of_cents_string("37656") +
                                        (money_of_cents_string("5463") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_78.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_78.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_81 = situation_familiale_calcul_apl_4
                                if match_arg_81.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_81.value
                                    return money_of_cents_string("24964")
                                elif match_arg_81.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_81.value
                                    return money_of_cents_string("29948")
                            else:
                                return (money_of_cents_string("34934") +
                                        (money_of_cents_string("4986") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_6(_: Any):
                    match_arg_82 = type_pret
                    if match_arg_82.code == TypePret_Code.D331_32:
                        _ = match_arg_82.value
                        temp_calcul_plafond_mensualite_d832_10_3_7 = False
                    elif match_arg_82.code == TypePret_Code.D331_63_64:
                        _ = match_arg_82.value
                        temp_calcul_plafond_mensualite_d832_10_3_7 = True
                    elif match_arg_82.code == TypePret_Code.D331_59_8:
                        _ = match_arg_82.value
                        temp_calcul_plafond_mensualite_d832_10_3_7 = False
                    elif match_arg_82.code == TypePret_Code.D331_76_1:
                        _ = match_arg_82.value
                        temp_calcul_plafond_mensualite_d832_10_3_7 = False
                    elif match_arg_82.code == TypePret_Code.Autre:
                        _ = match_arg_82.value
                        temp_calcul_plafond_mensualite_d832_10_3_7 = False
                    match_arg_83 = anciennete_logement
                    if match_arg_83.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_83.value
                        temp_calcul_plafond_mensualite_d832_10_3_8 = True
                    elif match_arg_83.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_83.value
                        temp_calcul_plafond_mensualite_d832_10_3_8 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2474, start_column=5,
                                                         end_line=2476, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2019, 9, 30)) and
                                                                                                                                                                                             (temp_calcul_plafond_mensualite_d832_10_3_8 and
                                                                                                                                                                                              temp_calcul_plafond_mensualite_d832_10_3_7))):
                        match_arg_84 = zone_2
                        if match_arg_84.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_84.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_85 = situation_familiale_calcul_apl_4
                                if match_arg_85.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_85.value
                                    return money_of_cents_string("37252")
                                elif match_arg_85.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_85.value
                                    return money_of_cents_string("44941")
                            else:
                                return (money_of_cents_string("52629") +
                                        (money_of_cents_string("7687") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_84.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_84.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_86 = situation_familiale_calcul_apl_4
                                if match_arg_86.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_86.value
                                    return money_of_cents_string("33244")
                                elif match_arg_86.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_86.value
                                    return money_of_cents_string("40013")
                            else:
                                return (money_of_cents_string("46783") +
                                        (money_of_cents_string("6768") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_84.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_84.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_87 = situation_familiale_calcul_apl_4
                                if match_arg_87.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_87.value
                                    return money_of_cents_string("31036")
                                elif match_arg_87.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_87.value
                                    return money_of_cents_string("37215")
                            else:
                                return (money_of_cents_string("43394") +
                                        (money_of_cents_string("6179") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_9(_: Any):
                    match_arg_88 = type_pret
                    if match_arg_88.code == TypePret_Code.D331_32:
                        _ = match_arg_88.value
                        temp_calcul_plafond_mensualite_d832_10_3_10 = False
                    elif match_arg_88.code == TypePret_Code.D331_63_64:
                        _ = match_arg_88.value
                        temp_calcul_plafond_mensualite_d832_10_3_10 = True
                    elif match_arg_88.code == TypePret_Code.D331_59_8:
                        _ = match_arg_88.value
                        temp_calcul_plafond_mensualite_d832_10_3_10 = False
                    elif match_arg_88.code == TypePret_Code.D331_76_1:
                        _ = match_arg_88.value
                        temp_calcul_plafond_mensualite_d832_10_3_10 = False
                    elif match_arg_88.code == TypePret_Code.Autre:
                        _ = match_arg_88.value
                        temp_calcul_plafond_mensualite_d832_10_3_10 = False
                    match_arg_89 = anciennete_logement
                    if match_arg_89.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_89.value
                        temp_calcul_plafond_mensualite_d832_10_3_11 = False
                    elif match_arg_89.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_89.value
                        temp_calcul_plafond_mensualite_d832_10_3_11 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2429, start_column=5,
                                                         end_line=2432, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2017, 9, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2019, 9, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_11 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_10)))):
                        match_arg_90 = zone_2
                        if match_arg_90.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_90.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_91 = situation_familiale_calcul_apl_4
                                if match_arg_91.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_91.value
                                    return money_of_cents_string("29897")
                                elif match_arg_91.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_91.value
                                    return money_of_cents_string("36079")
                            else:
                                return (money_of_cents_string("42260") +
                                        (money_of_cents_string("6182") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_90.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_90.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_92 = situation_familiale_calcul_apl_4
                                if match_arg_92.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_92.value
                                    return money_of_cents_string("26650")
                                elif match_arg_92.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_92.value
                                    return money_of_cents_string("32097")
                            else:
                                return (money_of_cents_string("37543") +
                                        (money_of_cents_string("5447") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_90.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_90.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_93 = situation_familiale_calcul_apl_4
                                if match_arg_93.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_93.value
                                    return money_of_cents_string("24889")
                                elif match_arg_93.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_93.value
                                    return money_of_cents_string("29858")
                            else:
                                return (money_of_cents_string("34829") +
                                        (money_of_cents_string("4971") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_12(_: Any):
                    match_arg_94 = type_pret
                    if match_arg_94.code == TypePret_Code.D331_32:
                        _ = match_arg_94.value
                        temp_calcul_plafond_mensualite_d832_10_3_13 = False
                    elif match_arg_94.code == TypePret_Code.D331_63_64:
                        _ = match_arg_94.value
                        temp_calcul_plafond_mensualite_d832_10_3_13 = True
                    elif match_arg_94.code == TypePret_Code.D331_59_8:
                        _ = match_arg_94.value
                        temp_calcul_plafond_mensualite_d832_10_3_13 = False
                    elif match_arg_94.code == TypePret_Code.D331_76_1:
                        _ = match_arg_94.value
                        temp_calcul_plafond_mensualite_d832_10_3_13 = False
                    elif match_arg_94.code == TypePret_Code.Autre:
                        _ = match_arg_94.value
                        temp_calcul_plafond_mensualite_d832_10_3_13 = False
                    match_arg_95 = anciennete_logement
                    if match_arg_95.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_95.value
                        temp_calcul_plafond_mensualite_d832_10_3_14 = True
                    elif match_arg_95.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_95.value
                        temp_calcul_plafond_mensualite_d832_10_3_14 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2385, start_column=5,
                                                         end_line=2388, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2017, 9, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2019, 9, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_14 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_13)))):
                        match_arg_96 = zone_2
                        if match_arg_96.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_96.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_97 = situation_familiale_calcul_apl_4
                                if match_arg_97.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_97.value
                                    return money_of_cents_string("37140")
                                elif match_arg_97.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_97.value
                                    return money_of_cents_string("44807")
                            else:
                                return (money_of_cents_string("52472") +
                                        (money_of_cents_string("7664") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_96.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_96.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_98 = situation_familiale_calcul_apl_4
                                if match_arg_98.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_98.value
                                    return money_of_cents_string("33145")
                                elif match_arg_98.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_98.value
                                    return money_of_cents_string("39893")
                            else:
                                return (money_of_cents_string("46643") +
                                        (money_of_cents_string("6748") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_96.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_96.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_99 = situation_familiale_calcul_apl_4
                                if match_arg_99.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_99.value
                                    return money_of_cents_string("30943")
                                elif match_arg_99.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_99.value
                                    return money_of_cents_string("37103")
                            else:
                                return (money_of_cents_string("43264") +
                                        (money_of_cents_string("6161") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_15(_: Any):
                    match_arg_100 = type_pret
                    if match_arg_100.code == TypePret_Code.D331_32:
                        _ = match_arg_100.value
                        temp_calcul_plafond_mensualite_d832_10_3_16 = False
                    elif match_arg_100.code == TypePret_Code.D331_63_64:
                        _ = match_arg_100.value
                        temp_calcul_plafond_mensualite_d832_10_3_16 = True
                    elif match_arg_100.code == TypePret_Code.D331_59_8:
                        _ = match_arg_100.value
                        temp_calcul_plafond_mensualite_d832_10_3_16 = False
                    elif match_arg_100.code == TypePret_Code.D331_76_1:
                        _ = match_arg_100.value
                        temp_calcul_plafond_mensualite_d832_10_3_16 = False
                    elif match_arg_100.code == TypePret_Code.Autre:
                        _ = match_arg_100.value
                        temp_calcul_plafond_mensualite_d832_10_3_16 = False
                    match_arg_101 = anciennete_logement
                    if match_arg_101.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_101.value
                        temp_calcul_plafond_mensualite_d832_10_3_17 = False
                    elif match_arg_101.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_101.value
                        temp_calcul_plafond_mensualite_d832_10_3_17 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2340, start_column=5,
                                                         end_line=2343, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2015, 9, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2017, 9, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_17 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_16)))):
                        match_arg_102 = zone_2
                        if match_arg_102.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_102.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_103 = situation_familiale_calcul_apl_4
                                if match_arg_103.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_103.value
                                    return money_of_cents_string("29674")
                                elif match_arg_103.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_103.value
                                    return money_of_cents_string("35810")
                            else:
                                return (money_of_cents_string("41945") +
                                        (money_of_cents_string("6136") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_102.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_102.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_104 = situation_familiale_calcul_apl_4
                                if match_arg_104.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_104.value
                                    return money_of_cents_string("26452")
                                elif match_arg_104.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_104.value
                                    return money_of_cents_string("31858")
                            else:
                                return (money_of_cents_string("37264") +
                                        (money_of_cents_string("5406") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_102.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_102.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_105 = situation_familiale_calcul_apl_4
                                if match_arg_105.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_105.value
                                    return money_of_cents_string("24704")
                                elif match_arg_105.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_105.value
                                    return money_of_cents_string("29636")
                            else:
                                return (money_of_cents_string("34570") +
                                        (money_of_cents_string("4934") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_18(_: Any):
                    match_arg_106 = type_pret
                    if match_arg_106.code == TypePret_Code.D331_32:
                        _ = match_arg_106.value
                        temp_calcul_plafond_mensualite_d832_10_3_19 = False
                    elif match_arg_106.code == TypePret_Code.D331_63_64:
                        _ = match_arg_106.value
                        temp_calcul_plafond_mensualite_d832_10_3_19 = True
                    elif match_arg_106.code == TypePret_Code.D331_59_8:
                        _ = match_arg_106.value
                        temp_calcul_plafond_mensualite_d832_10_3_19 = False
                    elif match_arg_106.code == TypePret_Code.D331_76_1:
                        _ = match_arg_106.value
                        temp_calcul_plafond_mensualite_d832_10_3_19 = False
                    elif match_arg_106.code == TypePret_Code.Autre:
                        _ = match_arg_106.value
                        temp_calcul_plafond_mensualite_d832_10_3_19 = False
                    match_arg_107 = anciennete_logement
                    if match_arg_107.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_107.value
                        temp_calcul_plafond_mensualite_d832_10_3_20 = True
                    elif match_arg_107.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_107.value
                        temp_calcul_plafond_mensualite_d832_10_3_20 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2296, start_column=5,
                                                         end_line=2299, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2015, 9, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2017, 9, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_20 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_19)))):
                        match_arg_108 = zone_2
                        if match_arg_108.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_108.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_109 = situation_familiale_calcul_apl_4
                                if match_arg_109.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_109.value
                                    return money_of_cents_string("36864")
                                elif match_arg_109.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_109.value
                                    return money_of_cents_string("44473")
                            else:
                                return (money_of_cents_string("52081") +
                                        (money_of_cents_string("7607") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_108.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_108.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_110 = situation_familiale_calcul_apl_4
                                if match_arg_110.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_110.value
                                    return money_of_cents_string("32898")
                                elif match_arg_110.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_110.value
                                    return money_of_cents_string("39596")
                            else:
                                return (money_of_cents_string("46296") +
                                        (money_of_cents_string("6698") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_108.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_108.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_111 = situation_familiale_calcul_apl_4
                                if match_arg_111.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_111.value
                                    return money_of_cents_string("30713")
                                elif match_arg_111.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_111.value
                                    return money_of_cents_string("36827")
                            else:
                                return (money_of_cents_string("42942") +
                                        (money_of_cents_string("6115") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_21(_: Any):
                    match_arg_112 = type_pret
                    if match_arg_112.code == TypePret_Code.D331_32:
                        _ = match_arg_112.value
                        temp_calcul_plafond_mensualite_d832_10_3_22 = False
                    elif match_arg_112.code == TypePret_Code.D331_63_64:
                        _ = match_arg_112.value
                        temp_calcul_plafond_mensualite_d832_10_3_22 = True
                    elif match_arg_112.code == TypePret_Code.D331_59_8:
                        _ = match_arg_112.value
                        temp_calcul_plafond_mensualite_d832_10_3_22 = False
                    elif match_arg_112.code == TypePret_Code.D331_76_1:
                        _ = match_arg_112.value
                        temp_calcul_plafond_mensualite_d832_10_3_22 = False
                    elif match_arg_112.code == TypePret_Code.Autre:
                        _ = match_arg_112.value
                        temp_calcul_plafond_mensualite_d832_10_3_22 = False
                    match_arg_113 = anciennete_logement
                    if match_arg_113.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_113.value
                        temp_calcul_plafond_mensualite_d832_10_3_23 = False
                    elif match_arg_113.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_113.value
                        temp_calcul_plafond_mensualite_d832_10_3_23 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2251, start_column=5,
                                                         end_line=2254, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2014, 9, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2015, 9, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_23 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_22)))):
                        match_arg_114 = zone_2
                        if match_arg_114.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_114.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_115 = situation_familiale_calcul_apl_4
                                if match_arg_115.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_115.value
                                    return money_of_cents_string("29650")
                                elif match_arg_115.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_115.value
                                    return money_of_cents_string("35781")
                            else:
                                return (money_of_cents_string("41911") +
                                        (money_of_cents_string("6131") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_114.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_114.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_116 = situation_familiale_calcul_apl_4
                                if match_arg_116.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_116.value
                                    return money_of_cents_string("26431")
                                elif match_arg_116.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_116.value
                                    return money_of_cents_string("31833")
                            else:
                                return (money_of_cents_string("37234") +
                                        (money_of_cents_string("5402") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_114.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_114.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_117 = situation_familiale_calcul_apl_4
                                if match_arg_117.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_117.value
                                    return money_of_cents_string("24684")
                                elif match_arg_117.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_117.value
                                    return money_of_cents_string("29612")
                            else:
                                return (money_of_cents_string("34542") +
                                        (money_of_cents_string("4930") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_24(_: Any):
                    match_arg_118 = type_pret
                    if match_arg_118.code == TypePret_Code.D331_32:
                        _ = match_arg_118.value
                        temp_calcul_plafond_mensualite_d832_10_3_25 = False
                    elif match_arg_118.code == TypePret_Code.D331_63_64:
                        _ = match_arg_118.value
                        temp_calcul_plafond_mensualite_d832_10_3_25 = True
                    elif match_arg_118.code == TypePret_Code.D331_59_8:
                        _ = match_arg_118.value
                        temp_calcul_plafond_mensualite_d832_10_3_25 = False
                    elif match_arg_118.code == TypePret_Code.D331_76_1:
                        _ = match_arg_118.value
                        temp_calcul_plafond_mensualite_d832_10_3_25 = False
                    elif match_arg_118.code == TypePret_Code.Autre:
                        _ = match_arg_118.value
                        temp_calcul_plafond_mensualite_d832_10_3_25 = False
                    match_arg_119 = anciennete_logement
                    if match_arg_119.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_119.value
                        temp_calcul_plafond_mensualite_d832_10_3_26 = True
                    elif match_arg_119.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_119.value
                        temp_calcul_plafond_mensualite_d832_10_3_26 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2207, start_column=5,
                                                         end_line=2210, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2014, 9, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2015, 9, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_26 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_25)))):
                        match_arg_120 = zone_2
                        if match_arg_120.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_120.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_121 = situation_familiale_calcul_apl_4
                                if match_arg_121.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_121.value
                                    return money_of_cents_string("36835")
                                elif match_arg_121.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_121.value
                                    return money_of_cents_string("44437")
                            else:
                                return (money_of_cents_string("52039") +
                                        (money_of_cents_string("7601") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_120.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_120.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_122 = situation_familiale_calcul_apl_4
                                if match_arg_122.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_122.value
                                    return money_of_cents_string("32872")
                                elif match_arg_122.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_122.value
                                    return money_of_cents_string("39564")
                            else:
                                return (money_of_cents_string("46259") +
                                        (money_of_cents_string("6693") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_120.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_120.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_123 = situation_familiale_calcul_apl_4
                                if match_arg_123.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_123.value
                                    return money_of_cents_string("30688")
                                elif match_arg_123.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_123.value
                                    return money_of_cents_string("36798")
                            else:
                                return (money_of_cents_string("42908") +
                                        (money_of_cents_string("6110") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_27(_: Any):
                    match_arg_124 = type_pret
                    if match_arg_124.code == TypePret_Code.D331_32:
                        _ = match_arg_124.value
                        temp_calcul_plafond_mensualite_d832_10_3_28 = False
                    elif match_arg_124.code == TypePret_Code.D331_63_64:
                        _ = match_arg_124.value
                        temp_calcul_plafond_mensualite_d832_10_3_28 = True
                    elif match_arg_124.code == TypePret_Code.D331_59_8:
                        _ = match_arg_124.value
                        temp_calcul_plafond_mensualite_d832_10_3_28 = False
                    elif match_arg_124.code == TypePret_Code.D331_76_1:
                        _ = match_arg_124.value
                        temp_calcul_plafond_mensualite_d832_10_3_28 = False
                    elif match_arg_124.code == TypePret_Code.Autre:
                        _ = match_arg_124.value
                        temp_calcul_plafond_mensualite_d832_10_3_28 = False
                    match_arg_125 = anciennete_logement
                    if match_arg_125.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_125.value
                        temp_calcul_plafond_mensualite_d832_10_3_29 = False
                    elif match_arg_125.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_125.value
                        temp_calcul_plafond_mensualite_d832_10_3_29 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2162, start_column=5,
                                                         end_line=2165, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2012, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2014, 9, 30)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_29 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_28)))):
                        match_arg_126 = zone_2
                        if match_arg_126.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_126.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_127 = situation_familiale_calcul_apl_4
                                if match_arg_127.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_127.value
                                    return money_of_cents_string("29482")
                                elif match_arg_127.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_127.value
                                    return money_of_cents_string("35578")
                            else:
                                return (money_of_cents_string("41673") +
                                        (money_of_cents_string("6096") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_126.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_126.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_128 = situation_familiale_calcul_apl_4
                                if match_arg_128.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_128.value
                                    return money_of_cents_string("26281")
                                elif match_arg_128.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_128.value
                                    return money_of_cents_string("31653")
                            else:
                                return (money_of_cents_string("37023") +
                                        (money_of_cents_string("5371") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_126.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_126.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_129 = situation_familiale_calcul_apl_4
                                if match_arg_129.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_129.value
                                    return money_of_cents_string("24544")
                                elif match_arg_129.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_129.value
                                    return money_of_cents_string("29444")
                            else:
                                return (money_of_cents_string("34346") +
                                        (money_of_cents_string("4902") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_30(_: Any):
                    match_arg_130 = type_pret
                    if match_arg_130.code == TypePret_Code.D331_32:
                        _ = match_arg_130.value
                        temp_calcul_plafond_mensualite_d832_10_3_31 = False
                    elif match_arg_130.code == TypePret_Code.D331_63_64:
                        _ = match_arg_130.value
                        temp_calcul_plafond_mensualite_d832_10_3_31 = True
                    elif match_arg_130.code == TypePret_Code.D331_59_8:
                        _ = match_arg_130.value
                        temp_calcul_plafond_mensualite_d832_10_3_31 = False
                    elif match_arg_130.code == TypePret_Code.D331_76_1:
                        _ = match_arg_130.value
                        temp_calcul_plafond_mensualite_d832_10_3_31 = False
                    elif match_arg_130.code == TypePret_Code.Autre:
                        _ = match_arg_130.value
                        temp_calcul_plafond_mensualite_d832_10_3_31 = False
                    match_arg_131 = anciennete_logement
                    if match_arg_131.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_131.value
                        temp_calcul_plafond_mensualite_d832_10_3_32 = True
                    elif match_arg_131.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_131.value
                        temp_calcul_plafond_mensualite_d832_10_3_32 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2118, start_column=5,
                                                         end_line=2121, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2012, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2014, 9, 30)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_32 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_31)))):
                        match_arg_132 = zone_2
                        if match_arg_132.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_132.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_133 = situation_familiale_calcul_apl_4
                                if match_arg_133.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_133.value
                                    return money_of_cents_string("36626")
                                elif match_arg_133.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_133.value
                                    return money_of_cents_string("44185")
                            else:
                                return (money_of_cents_string("51744") +
                                        (money_of_cents_string("7558") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_132.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_132.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_134 = situation_familiale_calcul_apl_4
                                if match_arg_134.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_134.value
                                    return money_of_cents_string("32686")
                                elif match_arg_134.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_134.value
                                    return money_of_cents_string("39340")
                            else:
                                return (money_of_cents_string("45997") +
                                        (money_of_cents_string("6655") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_132.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_132.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_135 = situation_familiale_calcul_apl_4
                                if match_arg_135.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_135.value
                                    return money_of_cents_string("30514")
                                elif match_arg_135.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_135.value
                                    return money_of_cents_string("36589")
                            else:
                                return (money_of_cents_string("42665") +
                                        (money_of_cents_string("6075") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_33(_: Any):
                    match_arg_136 = type_pret
                    if match_arg_136.code == TypePret_Code.D331_32:
                        _ = match_arg_136.value
                        temp_calcul_plafond_mensualite_d832_10_3_34 = False
                    elif match_arg_136.code == TypePret_Code.D331_63_64:
                        _ = match_arg_136.value
                        temp_calcul_plafond_mensualite_d832_10_3_34 = True
                    elif match_arg_136.code == TypePret_Code.D331_59_8:
                        _ = match_arg_136.value
                        temp_calcul_plafond_mensualite_d832_10_3_34 = False
                    elif match_arg_136.code == TypePret_Code.D331_76_1:
                        _ = match_arg_136.value
                        temp_calcul_plafond_mensualite_d832_10_3_34 = False
                    elif match_arg_136.code == TypePret_Code.Autre:
                        _ = match_arg_136.value
                        temp_calcul_plafond_mensualite_d832_10_3_34 = False
                    match_arg_137 = anciennete_logement
                    if match_arg_137.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_137.value
                        temp_calcul_plafond_mensualite_d832_10_3_35 = False
                    elif match_arg_137.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_137.value
                        temp_calcul_plafond_mensualite_d832_10_3_35 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=2071, start_column=5,
                                                         end_line=2074, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2011, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2012, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_35 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_34)))):
                        match_arg_138 = zone_2
                        if match_arg_138.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_138.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_139 = situation_familiale_calcul_apl_4
                                if match_arg_139.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_139.value
                                    return money_of_cents_string("28861")
                                elif match_arg_139.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_139.value
                                    return money_of_cents_string("34829")
                            else:
                                return (money_of_cents_string("40796") +
                                        (money_of_cents_string("5968") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_138.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_138.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_140 = situation_familiale_calcul_apl_4
                                if match_arg_140.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_140.value
                                    return money_of_cents_string("25728")
                                elif match_arg_140.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_140.value
                                    return money_of_cents_string("30987")
                            else:
                                return (money_of_cents_string("36244") +
                                        (money_of_cents_string("5258") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_138.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_138.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_141 = situation_familiale_calcul_apl_4
                                if match_arg_141.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_141.value
                                    return money_of_cents_string("24027")
                                elif match_arg_141.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_141.value
                                    return money_of_cents_string("28824")
                            else:
                                return (money_of_cents_string("33623") +
                                        (money_of_cents_string("4799") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_36(_: Any):
                    match_arg_142 = type_pret
                    if match_arg_142.code == TypePret_Code.D331_32:
                        _ = match_arg_142.value
                        temp_calcul_plafond_mensualite_d832_10_3_37 = False
                    elif match_arg_142.code == TypePret_Code.D331_63_64:
                        _ = match_arg_142.value
                        temp_calcul_plafond_mensualite_d832_10_3_37 = True
                    elif match_arg_142.code == TypePret_Code.D331_59_8:
                        _ = match_arg_142.value
                        temp_calcul_plafond_mensualite_d832_10_3_37 = False
                    elif match_arg_142.code == TypePret_Code.D331_76_1:
                        _ = match_arg_142.value
                        temp_calcul_plafond_mensualite_d832_10_3_37 = False
                    elif match_arg_142.code == TypePret_Code.Autre:
                        _ = match_arg_142.value
                        temp_calcul_plafond_mensualite_d832_10_3_37 = False
                    match_arg_143 = anciennete_logement
                    if match_arg_143.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_143.value
                        temp_calcul_plafond_mensualite_d832_10_3_38 = True
                    elif match_arg_143.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_143.value
                        temp_calcul_plafond_mensualite_d832_10_3_38 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1996, start_column=5,
                                                         end_line=1999, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2011, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2012, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_38 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_37)))):
                        match_arg_144 = zone_2
                        if match_arg_144.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_144.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_145 = situation_familiale_calcul_apl_4
                                if match_arg_145.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_145.value
                                    return money_of_cents_string("35855")
                                elif match_arg_145.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_145.value
                                    return money_of_cents_string("43255")
                            else:
                                return (money_of_cents_string("50655") +
                                        (money_of_cents_string("7399") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_144.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_144.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_146 = situation_familiale_calcul_apl_4
                                if match_arg_146.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_146.value
                                    return money_of_cents_string("31998")
                                elif match_arg_146.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_146.value
                                    return money_of_cents_string("38512")
                            else:
                                return (money_of_cents_string("45029") +
                                        (money_of_cents_string("6515") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_144.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_144.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_147 = situation_familiale_calcul_apl_4
                                if match_arg_147.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_147.value
                                    return money_of_cents_string("29872")
                                elif match_arg_147.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_147.value
                                    return money_of_cents_string("35819")
                            else:
                                return (money_of_cents_string("41767") +
                                        (money_of_cents_string("5947") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_39(_: Any):
                    match_arg_148 = type_pret
                    if match_arg_148.code == TypePret_Code.D331_32:
                        _ = match_arg_148.value
                        temp_calcul_plafond_mensualite_d832_10_3_40 = False
                    elif match_arg_148.code == TypePret_Code.D331_63_64:
                        _ = match_arg_148.value
                        temp_calcul_plafond_mensualite_d832_10_3_40 = True
                    elif match_arg_148.code == TypePret_Code.D331_59_8:
                        _ = match_arg_148.value
                        temp_calcul_plafond_mensualite_d832_10_3_40 = False
                    elif match_arg_148.code == TypePret_Code.D331_76_1:
                        _ = match_arg_148.value
                        temp_calcul_plafond_mensualite_d832_10_3_40 = False
                    elif match_arg_148.code == TypePret_Code.Autre:
                        _ = match_arg_148.value
                        temp_calcul_plafond_mensualite_d832_10_3_40 = False
                    match_arg_149 = anciennete_logement
                    if match_arg_149.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_149.value
                        temp_calcul_plafond_mensualite_d832_10_3_41 = False
                    elif match_arg_149.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_149.value
                        temp_calcul_plafond_mensualite_d832_10_3_41 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1951, start_column=5,
                                                         end_line=1954, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2010, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2011, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_41 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_40)))):
                        match_arg_150 = zone_2
                        if match_arg_150.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_150.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_151 = situation_familiale_calcul_apl_4
                                if match_arg_151.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_151.value
                                    return money_of_cents_string("28575")
                                elif match_arg_151.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_151.value
                                    return money_of_cents_string("34484")
                            else:
                                return (money_of_cents_string("40392") +
                                        (money_of_cents_string("5909") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_150.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_150.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_152 = situation_familiale_calcul_apl_4
                                if match_arg_152.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_152.value
                                    return money_of_cents_string("25473")
                                elif match_arg_152.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_152.value
                                    return money_of_cents_string("30680")
                            else:
                                return (money_of_cents_string("35885") +
                                        (money_of_cents_string("5206") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_150.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_150.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_153 = situation_familiale_calcul_apl_4
                                if match_arg_153.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_153.value
                                    return money_of_cents_string("23789")
                                elif match_arg_153.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_153.value
                                    return money_of_cents_string("28539")
                            else:
                                return (money_of_cents_string("33290") +
                                        (money_of_cents_string("4751") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_42(_: Any):
                    match_arg_154 = type_pret
                    if match_arg_154.code == TypePret_Code.D331_32:
                        _ = match_arg_154.value
                        temp_calcul_plafond_mensualite_d832_10_3_43 = False
                    elif match_arg_154.code == TypePret_Code.D331_63_64:
                        _ = match_arg_154.value
                        temp_calcul_plafond_mensualite_d832_10_3_43 = True
                    elif match_arg_154.code == TypePret_Code.D331_59_8:
                        _ = match_arg_154.value
                        temp_calcul_plafond_mensualite_d832_10_3_43 = False
                    elif match_arg_154.code == TypePret_Code.D331_76_1:
                        _ = match_arg_154.value
                        temp_calcul_plafond_mensualite_d832_10_3_43 = False
                    elif match_arg_154.code == TypePret_Code.Autre:
                        _ = match_arg_154.value
                        temp_calcul_plafond_mensualite_d832_10_3_43 = False
                    match_arg_155 = anciennete_logement
                    if match_arg_155.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_155.value
                        temp_calcul_plafond_mensualite_d832_10_3_44 = True
                    elif match_arg_155.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_155.value
                        temp_calcul_plafond_mensualite_d832_10_3_44 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1907, start_column=5,
                                                         end_line=1910, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2010, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2011, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_44 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_43)))):
                        match_arg_156 = zone_2
                        if match_arg_156.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_156.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_157 = situation_familiale_calcul_apl_4
                                if match_arg_157.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_157.value
                                    return money_of_cents_string("35500")
                                elif match_arg_157.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_157.value
                                    return money_of_cents_string("42827")
                            else:
                                return (money_of_cents_string("50153") +
                                        (money_of_cents_string("7326") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_156.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_156.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_158 = situation_familiale_calcul_apl_4
                                if match_arg_158.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_158.value
                                    return money_of_cents_string("31681")
                                elif match_arg_158.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_158.value
                                    return money_of_cents_string("38131")
                            else:
                                return (money_of_cents_string("44583") +
                                        (money_of_cents_string("6450") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_156.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_156.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_159 = situation_familiale_calcul_apl_4
                                if match_arg_159.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_159.value
                                    return money_of_cents_string("29576")
                                elif match_arg_159.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_159.value
                                    return money_of_cents_string("35464")
                            else:
                                return (money_of_cents_string("41353") +
                                        (money_of_cents_string("5888") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_45(_: Any):
                    match_arg_160 = type_pret
                    if match_arg_160.code == TypePret_Code.D331_32:
                        _ = match_arg_160.value
                        temp_calcul_plafond_mensualite_d832_10_3_46 = False
                    elif match_arg_160.code == TypePret_Code.D331_63_64:
                        _ = match_arg_160.value
                        temp_calcul_plafond_mensualite_d832_10_3_46 = True
                    elif match_arg_160.code == TypePret_Code.D331_59_8:
                        _ = match_arg_160.value
                        temp_calcul_plafond_mensualite_d832_10_3_46 = False
                    elif match_arg_160.code == TypePret_Code.D331_76_1:
                        _ = match_arg_160.value
                        temp_calcul_plafond_mensualite_d832_10_3_46 = False
                    elif match_arg_160.code == TypePret_Code.Autre:
                        _ = match_arg_160.value
                        temp_calcul_plafond_mensualite_d832_10_3_46 = False
                    match_arg_161 = anciennete_logement
                    if match_arg_161.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_161.value
                        temp_calcul_plafond_mensualite_d832_10_3_47 = False
                    elif match_arg_161.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_161.value
                        temp_calcul_plafond_mensualite_d832_10_3_47 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1862, start_column=5,
                                                         end_line=1865, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2009, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2010, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_47 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_46)))):
                        match_arg_162 = zone_2
                        if match_arg_162.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_162.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_163 = situation_familiale_calcul_apl_4
                                if match_arg_163.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_163.value
                                    return money_of_cents_string("28264")
                                elif match_arg_163.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_163.value
                                    return money_of_cents_string("34109")
                            else:
                                return (money_of_cents_string("39953") +
                                        (money_of_cents_string("5845") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_162.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_162.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_164 = situation_familiale_calcul_apl_4
                                if match_arg_164.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_164.value
                                    return money_of_cents_string("25196")
                                elif match_arg_164.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_164.value
                                    return money_of_cents_string("30346")
                            else:
                                return (money_of_cents_string("35495") +
                                        (money_of_cents_string("5149") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_162.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_162.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_165 = situation_familiale_calcul_apl_4
                                if match_arg_165.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_165.value
                                    return money_of_cents_string("23530")
                                elif match_arg_165.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_165.value
                                    return money_of_cents_string("28228")
                            else:
                                return (money_of_cents_string("32928") +
                                        (money_of_cents_string("4699") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_48(_: Any):
                    match_arg_166 = type_pret
                    if match_arg_166.code == TypePret_Code.D331_32:
                        _ = match_arg_166.value
                        temp_calcul_plafond_mensualite_d832_10_3_49 = False
                    elif match_arg_166.code == TypePret_Code.D331_63_64:
                        _ = match_arg_166.value
                        temp_calcul_plafond_mensualite_d832_10_3_49 = True
                    elif match_arg_166.code == TypePret_Code.D331_59_8:
                        _ = match_arg_166.value
                        temp_calcul_plafond_mensualite_d832_10_3_49 = False
                    elif match_arg_166.code == TypePret_Code.D331_76_1:
                        _ = match_arg_166.value
                        temp_calcul_plafond_mensualite_d832_10_3_49 = False
                    elif match_arg_166.code == TypePret_Code.Autre:
                        _ = match_arg_166.value
                        temp_calcul_plafond_mensualite_d832_10_3_49 = False
                    match_arg_167 = anciennete_logement
                    if match_arg_167.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_167.value
                        temp_calcul_plafond_mensualite_d832_10_3_50 = True
                    elif match_arg_167.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_167.value
                        temp_calcul_plafond_mensualite_d832_10_3_50 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1818, start_column=5,
                                                         end_line=1821, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2009, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2010, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_50 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_49)))):
                        match_arg_168 = zone_2
                        if match_arg_168.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_168.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_169 = situation_familiale_calcul_apl_4
                                if match_arg_169.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_169.value
                                    return money_of_cents_string("35114")
                                elif match_arg_169.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_169.value
                                    return money_of_cents_string("42361")
                            else:
                                return (money_of_cents_string("49607") +
                                        (money_of_cents_string("7246") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_168.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_168.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_170 = situation_familiale_calcul_apl_4
                                if match_arg_170.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_170.value
                                    return money_of_cents_string("31336")
                                elif match_arg_170.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_170.value
                                    return money_of_cents_string("37716")
                            else:
                                return (money_of_cents_string("44098") +
                                        (money_of_cents_string("6380") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_168.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_168.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_171 = situation_familiale_calcul_apl_4
                                if match_arg_171.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_171.value
                                    return money_of_cents_string("29254")
                                elif match_arg_171.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_171.value
                                    return money_of_cents_string("35078")
                            else:
                                return (money_of_cents_string("40903") +
                                        (money_of_cents_string("5824") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_51(_: Any):
                    match_arg_172 = type_pret
                    if match_arg_172.code == TypePret_Code.D331_32:
                        _ = match_arg_172.value
                        temp_calcul_plafond_mensualite_d832_10_3_52 = False
                    elif match_arg_172.code == TypePret_Code.D331_63_64:
                        _ = match_arg_172.value
                        temp_calcul_plafond_mensualite_d832_10_3_52 = True
                    elif match_arg_172.code == TypePret_Code.D331_59_8:
                        _ = match_arg_172.value
                        temp_calcul_plafond_mensualite_d832_10_3_52 = False
                    elif match_arg_172.code == TypePret_Code.D331_76_1:
                        _ = match_arg_172.value
                        temp_calcul_plafond_mensualite_d832_10_3_52 = False
                    elif match_arg_172.code == TypePret_Code.Autre:
                        _ = match_arg_172.value
                        temp_calcul_plafond_mensualite_d832_10_3_52 = False
                    match_arg_173 = anciennete_logement
                    if match_arg_173.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_173.value
                        temp_calcul_plafond_mensualite_d832_10_3_53 = False
                    elif match_arg_173.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_173.value
                        temp_calcul_plafond_mensualite_d832_10_3_53 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1773, start_column=5,
                                                         end_line=1776, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2008, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2009, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_53 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_52)))):
                        match_arg_174 = zone_2
                        if match_arg_174.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_174.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_175 = situation_familiale_calcul_apl_4
                                if match_arg_175.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_175.value
                                    return money_of_cents_string("28174")
                                elif match_arg_175.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_175.value
                                    return money_of_cents_string("34000")
                            else:
                                return (money_of_cents_string("39826") +
                                        (money_of_cents_string("5826") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_174.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_174.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_176 = situation_familiale_calcul_apl_4
                                if match_arg_176.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_176.value
                                    return money_of_cents_string("25116")
                                elif match_arg_176.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_176.value
                                    return money_of_cents_string("30249")
                            else:
                                return (money_of_cents_string("35382") +
                                        (money_of_cents_string("5133") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_174.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_174.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_177 = situation_familiale_calcul_apl_4
                                if match_arg_177.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_177.value
                                    return money_of_cents_string("23455")
                                elif match_arg_177.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_177.value
                                    return money_of_cents_string("28138")
                            else:
                                return (money_of_cents_string("32823") +
                                        (money_of_cents_string("4684") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_54(_: Any):
                    match_arg_178 = type_pret
                    if match_arg_178.code == TypePret_Code.D331_32:
                        _ = match_arg_178.value
                        temp_calcul_plafond_mensualite_d832_10_3_55 = False
                    elif match_arg_178.code == TypePret_Code.D331_63_64:
                        _ = match_arg_178.value
                        temp_calcul_plafond_mensualite_d832_10_3_55 = True
                    elif match_arg_178.code == TypePret_Code.D331_59_8:
                        _ = match_arg_178.value
                        temp_calcul_plafond_mensualite_d832_10_3_55 = False
                    elif match_arg_178.code == TypePret_Code.D331_76_1:
                        _ = match_arg_178.value
                        temp_calcul_plafond_mensualite_d832_10_3_55 = False
                    elif match_arg_178.code == TypePret_Code.Autre:
                        _ = match_arg_178.value
                        temp_calcul_plafond_mensualite_d832_10_3_55 = False
                    match_arg_179 = anciennete_logement
                    if match_arg_179.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_179.value
                        temp_calcul_plafond_mensualite_d832_10_3_56 = True
                    elif match_arg_179.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_179.value
                        temp_calcul_plafond_mensualite_d832_10_3_56 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1729, start_column=5,
                                                         end_line=1732, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2008, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2009, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_56 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_55)))):
                        match_arg_180 = zone_2
                        if match_arg_180.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_180.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_181 = situation_familiale_calcul_apl_4
                                if match_arg_181.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_181.value
                                    return money_of_cents_string("35002")
                                elif match_arg_181.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_181.value
                                    return money_of_cents_string("42226")
                            else:
                                return (money_of_cents_string("49449") +
                                        (money_of_cents_string("7223") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_180.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_180.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_182 = situation_familiale_calcul_apl_4
                                if match_arg_182.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_182.value
                                    return money_of_cents_string("31236")
                                elif match_arg_182.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_182.value
                                    return money_of_cents_string("37596")
                            else:
                                return (money_of_cents_string("43957") +
                                        (money_of_cents_string("6360") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_180.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_180.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_183 = situation_familiale_calcul_apl_4
                                if match_arg_183.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_183.value
                                    return money_of_cents_string("29161")
                                elif match_arg_183.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_183.value
                                    return money_of_cents_string("34966")
                            else:
                                return (money_of_cents_string("40773") +
                                        (money_of_cents_string("5805") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_57(_: Any):
                    match_arg_184 = type_pret
                    if match_arg_184.code == TypePret_Code.D331_32:
                        _ = match_arg_184.value
                        temp_calcul_plafond_mensualite_d832_10_3_58 = False
                    elif match_arg_184.code == TypePret_Code.D331_63_64:
                        _ = match_arg_184.value
                        temp_calcul_plafond_mensualite_d832_10_3_58 = True
                    elif match_arg_184.code == TypePret_Code.D331_59_8:
                        _ = match_arg_184.value
                        temp_calcul_plafond_mensualite_d832_10_3_58 = False
                    elif match_arg_184.code == TypePret_Code.D331_76_1:
                        _ = match_arg_184.value
                        temp_calcul_plafond_mensualite_d832_10_3_58 = False
                    elif match_arg_184.code == TypePret_Code.Autre:
                        _ = match_arg_184.value
                        temp_calcul_plafond_mensualite_d832_10_3_58 = False
                    match_arg_185 = anciennete_logement
                    if match_arg_185.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_185.value
                        temp_calcul_plafond_mensualite_d832_10_3_59 = False
                    elif match_arg_185.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_185.value
                        temp_calcul_plafond_mensualite_d832_10_3_59 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1684, start_column=5,
                                                         end_line=1687, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2007, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2008, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_59 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_58)))):
                        match_arg_186 = zone_2
                        if match_arg_186.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_186.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_187 = situation_familiale_calcul_apl_4
                                if match_arg_187.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_187.value
                                    return money_of_cents_string("27367")
                                elif match_arg_187.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_187.value
                                    return money_of_cents_string("33026")
                            else:
                                return (money_of_cents_string("38685") +
                                        (money_of_cents_string("5659") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_186.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_186.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_188 = situation_familiale_calcul_apl_4
                                if match_arg_188.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_188.value
                                    return money_of_cents_string("24396")
                                elif match_arg_188.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_188.value
                                    return money_of_cents_string("29382")
                            else:
                                return (money_of_cents_string("34368") +
                                        (money_of_cents_string("4986") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_186.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_186.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_189 = situation_familiale_calcul_apl_4
                                if match_arg_189.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_189.value
                                    return money_of_cents_string("22783")
                                elif match_arg_189.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_189.value
                                    return money_of_cents_string("27332")
                            else:
                                return (money_of_cents_string("31882") +
                                        (money_of_cents_string("4550") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_60(_: Any):
                    match_arg_190 = type_pret
                    if match_arg_190.code == TypePret_Code.D331_32:
                        _ = match_arg_190.value
                        temp_calcul_plafond_mensualite_d832_10_3_61 = False
                    elif match_arg_190.code == TypePret_Code.D331_63_64:
                        _ = match_arg_190.value
                        temp_calcul_plafond_mensualite_d832_10_3_61 = True
                    elif match_arg_190.code == TypePret_Code.D331_59_8:
                        _ = match_arg_190.value
                        temp_calcul_plafond_mensualite_d832_10_3_61 = False
                    elif match_arg_190.code == TypePret_Code.D331_76_1:
                        _ = match_arg_190.value
                        temp_calcul_plafond_mensualite_d832_10_3_61 = False
                    elif match_arg_190.code == TypePret_Code.Autre:
                        _ = match_arg_190.value
                        temp_calcul_plafond_mensualite_d832_10_3_61 = False
                    match_arg_191 = anciennete_logement
                    if match_arg_191.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_191.value
                        temp_calcul_plafond_mensualite_d832_10_3_62 = True
                    elif match_arg_191.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_191.value
                        temp_calcul_plafond_mensualite_d832_10_3_62 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1640, start_column=5,
                                                         end_line=1643, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2007, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2008, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_62 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_61)))):
                        match_arg_192 = zone_2
                        if match_arg_192.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_192.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_193 = situation_familiale_calcul_apl_4
                                if match_arg_193.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_193.value
                                    return money_of_cents_string("33999")
                                elif match_arg_193.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_193.value
                                    return money_of_cents_string("41016")
                            else:
                                return (money_of_cents_string("48032") +
                                        (money_of_cents_string("7016") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_192.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_192.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_194 = situation_familiale_calcul_apl_4
                                if match_arg_194.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_194.value
                                    return money_of_cents_string("30341")
                                elif match_arg_194.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_194.value
                                    return money_of_cents_string("36519")
                            else:
                                return (money_of_cents_string("42697") +
                                        (money_of_cents_string("6178") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_192.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_192.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_195 = situation_familiale_calcul_apl_4
                                if match_arg_195.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_195.value
                                    return money_of_cents_string("28325")
                                elif match_arg_195.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_195.value
                                    return money_of_cents_string("33964")
                            else:
                                return (money_of_cents_string("39605") +
                                        (money_of_cents_string("5639") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_63(_: Any):
                    match_arg_196 = type_pret
                    if match_arg_196.code == TypePret_Code.D331_32:
                        _ = match_arg_196.value
                        temp_calcul_plafond_mensualite_d832_10_3_64 = False
                    elif match_arg_196.code == TypePret_Code.D331_63_64:
                        _ = match_arg_196.value
                        temp_calcul_plafond_mensualite_d832_10_3_64 = True
                    elif match_arg_196.code == TypePret_Code.D331_59_8:
                        _ = match_arg_196.value
                        temp_calcul_plafond_mensualite_d832_10_3_64 = False
                    elif match_arg_196.code == TypePret_Code.D331_76_1:
                        _ = match_arg_196.value
                        temp_calcul_plafond_mensualite_d832_10_3_64 = False
                    elif match_arg_196.code == TypePret_Code.Autre:
                        _ = match_arg_196.value
                        temp_calcul_plafond_mensualite_d832_10_3_64 = False
                    match_arg_197 = anciennete_logement
                    if match_arg_197.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_197.value
                        temp_calcul_plafond_mensualite_d832_10_3_65 = False
                    elif match_arg_197.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_197.value
                        temp_calcul_plafond_mensualite_d832_10_3_65 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1595, start_column=5,
                                                         end_line=1598, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2006, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2007, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_65 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_64)))):
                        match_arg_198 = zone_2
                        if match_arg_198.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_198.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_199 = situation_familiale_calcul_apl_4
                                if match_arg_199.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_199.value
                                    return money_of_cents_string("26632")
                                elif match_arg_199.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_199.value
                                    return money_of_cents_string("32139")
                            else:
                                return (money_of_cents_string("37646") +
                                        (money_of_cents_string("5507") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_198.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_198.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_200 = situation_familiale_calcul_apl_4
                                if match_arg_200.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_200.value
                                    return money_of_cents_string("23741")
                                elif match_arg_200.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_200.value
                                    return money_of_cents_string("28593")
                            else:
                                return (money_of_cents_string("33445") +
                                        (money_of_cents_string("4852") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_198.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_198.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_201 = situation_familiale_calcul_apl_4
                                if match_arg_201.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_201.value
                                    return money_of_cents_string("22171")
                                elif match_arg_201.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_201.value
                                    return money_of_cents_string("36598")
                            else:
                                return (money_of_cents_string("31026") +
                                        (money_of_cents_string("4428") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_66(_: Any):
                    match_arg_202 = type_pret
                    if match_arg_202.code == TypePret_Code.D331_32:
                        _ = match_arg_202.value
                        temp_calcul_plafond_mensualite_d832_10_3_67 = False
                    elif match_arg_202.code == TypePret_Code.D331_63_64:
                        _ = match_arg_202.value
                        temp_calcul_plafond_mensualite_d832_10_3_67 = True
                    elif match_arg_202.code == TypePret_Code.D331_59_8:
                        _ = match_arg_202.value
                        temp_calcul_plafond_mensualite_d832_10_3_67 = False
                    elif match_arg_202.code == TypePret_Code.D331_76_1:
                        _ = match_arg_202.value
                        temp_calcul_plafond_mensualite_d832_10_3_67 = False
                    elif match_arg_202.code == TypePret_Code.Autre:
                        _ = match_arg_202.value
                        temp_calcul_plafond_mensualite_d832_10_3_67 = False
                    match_arg_203 = anciennete_logement
                    if match_arg_203.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_203.value
                        temp_calcul_plafond_mensualite_d832_10_3_68 = True
                    elif match_arg_203.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_203.value
                        temp_calcul_plafond_mensualite_d832_10_3_68 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1551, start_column=5,
                                                         end_line=1554, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2006, 12, 31)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2007, 12, 31)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_68 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_67)))):
                        match_arg_204 = zone_2
                        if match_arg_204.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_204.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_205 = situation_familiale_calcul_apl_4
                                if match_arg_205.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_205.value
                                    return money_of_cents_string("33026")
                                elif match_arg_205.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_205.value
                                    return money_of_cents_string("39914")
                            else:
                                return (money_of_cents_string("46742") +
                                        (money_of_cents_string("6828") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_204.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_204.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_206 = situation_familiale_calcul_apl_4
                                if match_arg_206.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_206.value
                                    return money_of_cents_string("29526")
                                elif match_arg_206.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_206.value
                                    return money_of_cents_string("35538")
                            else:
                                return (money_of_cents_string("41550") +
                                        (money_of_cents_string("6012") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_204.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_204.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_207 = situation_familiale_calcul_apl_4
                                if match_arg_207.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_207.value
                                    return money_of_cents_string("27564")
                                elif match_arg_207.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_207.value
                                    return money_of_cents_string("33052")
                            else:
                                return (money_of_cents_string("38541") +
                                        (money_of_cents_string("5488") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_69(_: Any):
                    match_arg_208 = type_pret
                    if match_arg_208.code == TypePret_Code.D331_32:
                        _ = match_arg_208.value
                        temp_calcul_plafond_mensualite_d832_10_3_70 = False
                    elif match_arg_208.code == TypePret_Code.D331_63_64:
                        _ = match_arg_208.value
                        temp_calcul_plafond_mensualite_d832_10_3_70 = True
                    elif match_arg_208.code == TypePret_Code.D331_59_8:
                        _ = match_arg_208.value
                        temp_calcul_plafond_mensualite_d832_10_3_70 = False
                    elif match_arg_208.code == TypePret_Code.D331_76_1:
                        _ = match_arg_208.value
                        temp_calcul_plafond_mensualite_d832_10_3_70 = False
                    elif match_arg_208.code == TypePret_Code.Autre:
                        _ = match_arg_208.value
                        temp_calcul_plafond_mensualite_d832_10_3_70 = False
                    match_arg_209 = anciennete_logement
                    if match_arg_209.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_209.value
                        temp_calcul_plafond_mensualite_d832_10_3_71 = False
                    elif match_arg_209.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_209.value
                        temp_calcul_plafond_mensualite_d832_10_3_71 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1506, start_column=5,
                                                         end_line=1509, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2005, 8, 31)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2006, 12, 31)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_71 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_70)))):
                        match_arg_210 = zone_2
                        if match_arg_210.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_210.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_211 = situation_familiale_calcul_apl_4
                                if match_arg_211.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_211.value
                                    return money_of_cents_string("25907")
                                elif match_arg_211.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_211.value
                                    return money_of_cents_string("31264")
                            else:
                                return (money_of_cents_string("36621") +
                                        (money_of_cents_string("5357") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_210.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_210.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_212 = situation_familiale_calcul_apl_4
                                if match_arg_212.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_212.value
                                    return money_of_cents_string("23094")
                                elif match_arg_212.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_212.value
                                    return money_of_cents_string("27814")
                            else:
                                return (money_of_cents_string("32534") +
                                        (money_of_cents_string("4720") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_210.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_210.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_213 = situation_familiale_calcul_apl_4
                                if match_arg_213.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_213.value
                                    return money_of_cents_string("21567")
                                elif match_arg_213.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_213.value
                                    return money_of_cents_string("25874")
                            else:
                                return (money_of_cents_string("30881") +
                                        (money_of_cents_string("4307") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_72(_: Any):
                    match_arg_214 = type_pret
                    if match_arg_214.code == TypePret_Code.D331_32:
                        _ = match_arg_214.value
                        temp_calcul_plafond_mensualite_d832_10_3_73 = False
                    elif match_arg_214.code == TypePret_Code.D331_63_64:
                        _ = match_arg_214.value
                        temp_calcul_plafond_mensualite_d832_10_3_73 = True
                    elif match_arg_214.code == TypePret_Code.D331_59_8:
                        _ = match_arg_214.value
                        temp_calcul_plafond_mensualite_d832_10_3_73 = False
                    elif match_arg_214.code == TypePret_Code.D331_76_1:
                        _ = match_arg_214.value
                        temp_calcul_plafond_mensualite_d832_10_3_73 = False
                    elif match_arg_214.code == TypePret_Code.Autre:
                        _ = match_arg_214.value
                        temp_calcul_plafond_mensualite_d832_10_3_73 = False
                    match_arg_215 = anciennete_logement
                    if match_arg_215.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_215.value
                        temp_calcul_plafond_mensualite_d832_10_3_74 = True
                    elif match_arg_215.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_215.value
                        temp_calcul_plafond_mensualite_d832_10_3_74 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1462, start_column=5,
                                                         end_line=1465, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2005, 8, 31)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2006, 12, 31)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_74 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_73)))):
                        match_arg_216 = zone_2
                        if match_arg_216.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_216.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_217 = situation_familiale_calcul_apl_4
                                if match_arg_217.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_217.value
                                    return money_of_cents_string("32185")
                                elif match_arg_217.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_217.value
                                    return money_of_cents_string("38827")
                            else:
                                return (money_of_cents_string("45469") +
                                        (money_of_cents_string("6642") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_216.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_216.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_218 = situation_familiale_calcul_apl_4
                                if match_arg_218.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_218.value
                                    return money_of_cents_string("28722")
                                elif match_arg_218.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_218.value
                                    return money_of_cents_string("34570")
                            else:
                                return (money_of_cents_string("40418") +
                                        (money_of_cents_string("5848") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_216.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_216.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_219 = situation_familiale_calcul_apl_4
                                if match_arg_219.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_219.value
                                    return money_of_cents_string("26813")
                                elif match_arg_219.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_219.value
                                    return money_of_cents_string("32152")
                            else:
                                return (money_of_cents_string("37491") +
                                        (money_of_cents_string("5339") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_75(_: Any):
                    match_arg_220 = type_pret
                    if match_arg_220.code == TypePret_Code.D331_32:
                        _ = match_arg_220.value
                        temp_calcul_plafond_mensualite_d832_10_3_76 = False
                    elif match_arg_220.code == TypePret_Code.D331_63_64:
                        _ = match_arg_220.value
                        temp_calcul_plafond_mensualite_d832_10_3_76 = True
                    elif match_arg_220.code == TypePret_Code.D331_59_8:
                        _ = match_arg_220.value
                        temp_calcul_plafond_mensualite_d832_10_3_76 = False
                    elif match_arg_220.code == TypePret_Code.D331_76_1:
                        _ = match_arg_220.value
                        temp_calcul_plafond_mensualite_d832_10_3_76 = False
                    elif match_arg_220.code == TypePret_Code.Autre:
                        _ = match_arg_220.value
                        temp_calcul_plafond_mensualite_d832_10_3_76 = False
                    match_arg_221 = anciennete_logement
                    if match_arg_221.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_221.value
                        temp_calcul_plafond_mensualite_d832_10_3_77 = False
                    elif match_arg_221.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_221.value
                        temp_calcul_plafond_mensualite_d832_10_3_77 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1417, start_column=5,
                                                         end_line=1420, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2003, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2005, 8, 31)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_77 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_76)))):
                        match_arg_222 = zone_2
                        if match_arg_222.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_222.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_223 = situation_familiale_calcul_apl_4
                                if match_arg_223.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_223.value
                                    return money_of_cents_string("25449")
                                elif match_arg_223.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_223.value
                                    return money_of_cents_string("30711")
                            else:
                                return (money_of_cents_string("35973") +
                                        (money_of_cents_string("5262") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_222.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_222.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_224 = situation_familiale_calcul_apl_4
                                if match_arg_224.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_224.value
                                    return money_of_cents_string("22686")
                                elif match_arg_224.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_224.value
                                    return money_of_cents_string("27323")
                            else:
                                return (money_of_cents_string("31960") +
                                        (money_of_cents_string("4637") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_222.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_222.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_225 = situation_familiale_calcul_apl_4
                                if match_arg_225.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_225.value
                                    return money_of_cents_string("21186")
                                elif match_arg_225.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_225.value
                                    return money_of_cents_string("25417")
                            else:
                                return (money_of_cents_string("26948") +
                                        (money_of_cents_string("4231") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_78(_: Any):
                    match_arg_226 = type_pret
                    if match_arg_226.code == TypePret_Code.D331_32:
                        _ = match_arg_226.value
                        temp_calcul_plafond_mensualite_d832_10_3_79 = False
                    elif match_arg_226.code == TypePret_Code.D331_63_64:
                        _ = match_arg_226.value
                        temp_calcul_plafond_mensualite_d832_10_3_79 = True
                    elif match_arg_226.code == TypePret_Code.D331_59_8:
                        _ = match_arg_226.value
                        temp_calcul_plafond_mensualite_d832_10_3_79 = False
                    elif match_arg_226.code == TypePret_Code.D331_76_1:
                        _ = match_arg_226.value
                        temp_calcul_plafond_mensualite_d832_10_3_79 = False
                    elif match_arg_226.code == TypePret_Code.Autre:
                        _ = match_arg_226.value
                        temp_calcul_plafond_mensualite_d832_10_3_79 = False
                    match_arg_227 = anciennete_logement
                    if match_arg_227.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_227.value
                        temp_calcul_plafond_mensualite_d832_10_3_80 = True
                    elif match_arg_227.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_227.value
                        temp_calcul_plafond_mensualite_d832_10_3_80 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1373, start_column=5,
                                                         end_line=1376, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2003, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2005, 8, 31)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_80 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_79)))):
                        match_arg_228 = zone_2
                        if match_arg_228.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_228.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_229 = situation_familiale_calcul_apl_4
                                if match_arg_229.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_229.value
                                    return money_of_cents_string("31616")
                                elif match_arg_229.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_229.value
                                    return money_of_cents_string("38141")
                            else:
                                return (money_of_cents_string("44666") +
                                        (money_of_cents_string("6525") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_228.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_228.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_230 = situation_familiale_calcul_apl_4
                                if match_arg_230.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_230.value
                                    return money_of_cents_string("28214")
                                elif match_arg_230.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_230.value
                                    return money_of_cents_string("33959")
                            else:
                                return (money_of_cents_string("39704") +
                                        (money_of_cents_string("5745") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_228.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_228.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_231 = situation_familiale_calcul_apl_4
                                if match_arg_231.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_231.value
                                    return money_of_cents_string("26339")
                                elif match_arg_231.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_231.value
                                    return money_of_cents_string("31584")
                            else:
                                return (money_of_cents_string("36829") +
                                        (money_of_cents_string("5245") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_81(_: Any):
                    match_arg_232 = type_pret
                    if match_arg_232.code == TypePret_Code.D331_32:
                        _ = match_arg_232.value
                        temp_calcul_plafond_mensualite_d832_10_3_82 = False
                    elif match_arg_232.code == TypePret_Code.D331_63_64:
                        _ = match_arg_232.value
                        temp_calcul_plafond_mensualite_d832_10_3_82 = True
                    elif match_arg_232.code == TypePret_Code.D331_59_8:
                        _ = match_arg_232.value
                        temp_calcul_plafond_mensualite_d832_10_3_82 = False
                    elif match_arg_232.code == TypePret_Code.D331_76_1:
                        _ = match_arg_232.value
                        temp_calcul_plafond_mensualite_d832_10_3_82 = False
                    elif match_arg_232.code == TypePret_Code.Autre:
                        _ = match_arg_232.value
                        temp_calcul_plafond_mensualite_d832_10_3_82 = False
                    match_arg_233 = anciennete_logement
                    if match_arg_233.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_233.value
                        temp_calcul_plafond_mensualite_d832_10_3_83 = False
                    elif match_arg_233.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_233.value
                        temp_calcul_plafond_mensualite_d832_10_3_83 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1328, start_column=5,
                                                         end_line=1331, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2002, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2003, 6, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_83 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_82)))):
                        match_arg_234 = zone_2
                        if match_arg_234.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_234.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_235 = situation_familiale_calcul_apl_4
                                if match_arg_235.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_235.value
                                    return money_of_cents_string("25147")
                                elif match_arg_235.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_235.value
                                    return money_of_cents_string("30347")
                            else:
                                return (money_of_cents_string("35547") +
                                        (money_of_cents_string("5200") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_234.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_234.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_236 = situation_familiale_calcul_apl_4
                                if match_arg_236.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_236.value
                                    return money_of_cents_string("22417")
                                elif match_arg_236.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_236.value
                                    return money_of_cents_string("26999")
                            else:
                                return (money_of_cents_string("31581") +
                                        (money_of_cents_string("4582") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_234.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_234.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_237 = situation_familiale_calcul_apl_4
                                if match_arg_237.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_237.value
                                    return money_of_cents_string("20935")
                                elif match_arg_237.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_237.value
                                    return money_of_cents_string("25116")
                            else:
                                return (money_of_cents_string("29297") +
                                        (money_of_cents_string("4181") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_84(_: Any):
                    match_arg_238 = type_pret
                    if match_arg_238.code == TypePret_Code.D331_32:
                        _ = match_arg_238.value
                        temp_calcul_plafond_mensualite_d832_10_3_85 = False
                    elif match_arg_238.code == TypePret_Code.D331_63_64:
                        _ = match_arg_238.value
                        temp_calcul_plafond_mensualite_d832_10_3_85 = True
                    elif match_arg_238.code == TypePret_Code.D331_59_8:
                        _ = match_arg_238.value
                        temp_calcul_plafond_mensualite_d832_10_3_85 = False
                    elif match_arg_238.code == TypePret_Code.D331_76_1:
                        _ = match_arg_238.value
                        temp_calcul_plafond_mensualite_d832_10_3_85 = False
                    elif match_arg_238.code == TypePret_Code.Autre:
                        _ = match_arg_238.value
                        temp_calcul_plafond_mensualite_d832_10_3_85 = False
                    match_arg_239 = anciennete_logement
                    if match_arg_239.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_239.value
                        temp_calcul_plafond_mensualite_d832_10_3_86 = True
                    elif match_arg_239.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_239.value
                        temp_calcul_plafond_mensualite_d832_10_3_86 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1284, start_column=5,
                                                         end_line=1287, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2002, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(2003, 6, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_86 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_85)))):
                        match_arg_240 = zone_2
                        if match_arg_240.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_240.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_241 = situation_familiale_calcul_apl_4
                                if match_arg_241.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_241.value
                                    return money_of_cents_string("31241")
                                elif match_arg_241.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_241.value
                                    return money_of_cents_string("37689")
                            else:
                                return (money_of_cents_string("44137") +
                                        (money_of_cents_string("6448") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_240.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_240.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_242 = situation_familiale_calcul_apl_4
                                if match_arg_242.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_242.value
                                    return money_of_cents_string("27879")
                                elif match_arg_242.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_242.value
                                    return money_of_cents_string("33556")
                            else:
                                return (money_of_cents_string("39233") +
                                        (money_of_cents_string("5677") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_240.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_240.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_243 = situation_familiale_calcul_apl_4
                                if match_arg_243.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_243.value
                                    return money_of_cents_string("26027")
                                elif match_arg_243.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_243.value
                                    return money_of_cents_string("31210")
                            else:
                                return (money_of_cents_string("36393") +
                                        (money_of_cents_string("5183") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_87(_: Any):
                    match_arg_244 = type_pret
                    if match_arg_244.code == TypePret_Code.D331_32:
                        _ = match_arg_244.value
                        temp_calcul_plafond_mensualite_d832_10_3_88 = False
                    elif match_arg_244.code == TypePret_Code.D331_63_64:
                        _ = match_arg_244.value
                        temp_calcul_plafond_mensualite_d832_10_3_88 = True
                    elif match_arg_244.code == TypePret_Code.D331_59_8:
                        _ = match_arg_244.value
                        temp_calcul_plafond_mensualite_d832_10_3_88 = False
                    elif match_arg_244.code == TypePret_Code.D331_76_1:
                        _ = match_arg_244.value
                        temp_calcul_plafond_mensualite_d832_10_3_88 = False
                    elif match_arg_244.code == TypePret_Code.Autre:
                        _ = match_arg_244.value
                        temp_calcul_plafond_mensualite_d832_10_3_88 = False
                    match_arg_245 = anciennete_logement
                    if match_arg_245.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_245.value
                        temp_calcul_plafond_mensualite_d832_10_3_89 = False
                    elif match_arg_245.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_245.value
                        temp_calcul_plafond_mensualite_d832_10_3_89 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1239, start_column=5,
                                                         end_line=1242, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2002, 1, 1)) and ((param_13 <
                                                                                                                                                                                                                                 date_of_numbers(2002, 6, 30)) and
                                                                                                                                                                                                                                (temp_calcul_plafond_mensualite_d832_10_3_89 and
                                                                                                                                                                                                                                 temp_calcul_plafond_mensualite_d832_10_3_88)))):
                        match_arg_246 = zone_2
                        if match_arg_246.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_246.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_247 = situation_familiale_calcul_apl_4
                                if match_arg_247.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_247.value
                                    return money_of_cents_string("24849")
                                elif match_arg_247.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_247.value
                                    return money_of_cents_string("29987")
                            else:
                                return (money_of_cents_string("35125") +
                                        (money_of_cents_string("5138") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_246.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_246.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_248 = situation_familiale_calcul_apl_4
                                if match_arg_248.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_248.value
                                    return money_of_cents_string("22151")
                                elif match_arg_248.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_248.value
                                    return money_of_cents_string("26679")
                            else:
                                return (money_of_cents_string("31207") +
                                        (money_of_cents_string("4528") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_246.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_246.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_249 = situation_familiale_calcul_apl_4
                                if match_arg_249.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_249.value
                                    return money_of_cents_string("20687")
                                elif match_arg_249.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_249.value
                                    return money_of_cents_string("24818")
                            else:
                                return (money_of_cents_string("28949") +
                                        (money_of_cents_string("4131") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_90(_: Any):
                    match_arg_250 = type_pret
                    if match_arg_250.code == TypePret_Code.D331_32:
                        _ = match_arg_250.value
                        temp_calcul_plafond_mensualite_d832_10_3_91 = False
                    elif match_arg_250.code == TypePret_Code.D331_63_64:
                        _ = match_arg_250.value
                        temp_calcul_plafond_mensualite_d832_10_3_91 = True
                    elif match_arg_250.code == TypePret_Code.D331_59_8:
                        _ = match_arg_250.value
                        temp_calcul_plafond_mensualite_d832_10_3_91 = False
                    elif match_arg_250.code == TypePret_Code.D331_76_1:
                        _ = match_arg_250.value
                        temp_calcul_plafond_mensualite_d832_10_3_91 = False
                    elif match_arg_250.code == TypePret_Code.Autre:
                        _ = match_arg_250.value
                        temp_calcul_plafond_mensualite_d832_10_3_91 = False
                    match_arg_251 = anciennete_logement
                    if match_arg_251.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_251.value
                        temp_calcul_plafond_mensualite_d832_10_3_92 = False
                    elif match_arg_251.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_251.value
                        temp_calcul_plafond_mensualite_d832_10_3_92 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1196, start_column=5,
                                                         end_line=1199, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2001, 7, 1)) and ((param_13 <
                                                                                                                                                                                                                                 date_of_numbers(2001, 12, 31)) and
                                                                                                                                                                                                                                (temp_calcul_plafond_mensualite_d832_10_3_92 and
                                                                                                                                                                                                                                 temp_calcul_plafond_mensualite_d832_10_3_91)))):
                        match_arg_252 = zone_2
                        if match_arg_252.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_252.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_253 = situation_familiale_calcul_apl_4
                                if match_arg_253.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_253.value
                                    temp_calcul_plafond_mensualite_d832_10_3_93 = money_of_cents_string(
                                        "163000")
                                elif match_arg_253.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_253.value
                                    temp_calcul_plafond_mensualite_d832_10_3_93 = money_of_cents_string(
                                        "196700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_93 = (money_of_cents_string("230400") +
                                                                               (money_of_cents_string("33700") *
                                                                                decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                    integer_of_string("1")))))
                        elif match_arg_252.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_252.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_254 = situation_familiale_calcul_apl_4
                                if match_arg_254.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_254.value
                                    temp_calcul_plafond_mensualite_d832_10_3_93 = money_of_cents_string(
                                        "145300")
                                elif match_arg_254.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_254.value
                                    temp_calcul_plafond_mensualite_d832_10_3_93 = money_of_cents_string(
                                        "175000")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_93 = (money_of_cents_string("204700") +
                                                                               (money_of_cents_string("29700") *
                                                                                decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                    integer_of_string("1")))))
                        elif match_arg_252.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_252.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_255 = situation_familiale_calcul_apl_4
                                if match_arg_255.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_255.value
                                    temp_calcul_plafond_mensualite_d832_10_3_93 = money_of_cents_string(
                                        "135700")
                                elif match_arg_255.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_255.value
                                    temp_calcul_plafond_mensualite_d832_10_3_93 = money_of_cents_string(
                                        "162800")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_93 = (money_of_cents_string("189900") +
                                                                               (money_of_cents_string("27100") *
                                                                                decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                    integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_93 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_94(_: Any):
                    match_arg_256 = type_pret
                    if match_arg_256.code == TypePret_Code.D331_32:
                        _ = match_arg_256.value
                        temp_calcul_plafond_mensualite_d832_10_3_95 = False
                    elif match_arg_256.code == TypePret_Code.D331_63_64:
                        _ = match_arg_256.value
                        temp_calcul_plafond_mensualite_d832_10_3_95 = True
                    elif match_arg_256.code == TypePret_Code.D331_59_8:
                        _ = match_arg_256.value
                        temp_calcul_plafond_mensualite_d832_10_3_95 = False
                    elif match_arg_256.code == TypePret_Code.D331_76_1:
                        _ = match_arg_256.value
                        temp_calcul_plafond_mensualite_d832_10_3_95 = False
                    elif match_arg_256.code == TypePret_Code.Autre:
                        _ = match_arg_256.value
                        temp_calcul_plafond_mensualite_d832_10_3_95 = False
                    match_arg_257 = anciennete_logement
                    if match_arg_257.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_257.value
                        temp_calcul_plafond_mensualite_d832_10_3_96 = True
                    elif match_arg_257.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_257.value
                        temp_calcul_plafond_mensualite_d832_10_3_96 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1150, start_column=5,
                                                         end_line=1153, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2002, 1, 1)) and ((param_13 <
                                                                                                                                                                                                                                 date_of_numbers(2002, 6, 30)) and
                                                                                                                                                                                                                                (temp_calcul_plafond_mensualite_d832_10_3_96 and
                                                                                                                                                                                                                                 temp_calcul_plafond_mensualite_d832_10_3_95)))):
                        match_arg_258 = zone_2
                        if match_arg_258.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_258.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_259 = situation_familiale_calcul_apl_4
                                if match_arg_259.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_259.value
                                    return money_of_cents_string("30871")
                                elif match_arg_259.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_259.value
                                    return money_of_cents_string("37243")
                            else:
                                return (money_of_cents_string("43615") +
                                        (money_of_cents_string("6372") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_258.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_258.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_260 = situation_familiale_calcul_apl_4
                                if match_arg_260.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_260.value
                                    return money_of_cents_string("27548")
                                elif match_arg_260.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_260.value
                                    return money_of_cents_string("33148")
                            else:
                                return (money_of_cents_string("38768") +
                                        (money_of_cents_string("5610") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                        elif match_arg_258.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_258.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_261 = situation_familiale_calcul_apl_4
                                if match_arg_261.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_261.value
                                    return money_of_cents_string("25718")
                                elif match_arg_261.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_261.value
                                    return money_of_cents_string("30840")
                            else:
                                return (money_of_cents_string("35962") +
                                        (money_of_cents_string("5122") *
                                         decimal_of_integer((nombre_personnes_a_charge_4 -
                                                             integer_of_string("1")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_97(_: Any):
                    match_arg_262 = type_pret
                    if match_arg_262.code == TypePret_Code.D331_32:
                        _ = match_arg_262.value
                        temp_calcul_plafond_mensualite_d832_10_3_98 = False
                    elif match_arg_262.code == TypePret_Code.D331_63_64:
                        _ = match_arg_262.value
                        temp_calcul_plafond_mensualite_d832_10_3_98 = True
                    elif match_arg_262.code == TypePret_Code.D331_59_8:
                        _ = match_arg_262.value
                        temp_calcul_plafond_mensualite_d832_10_3_98 = False
                    elif match_arg_262.code == TypePret_Code.D331_76_1:
                        _ = match_arg_262.value
                        temp_calcul_plafond_mensualite_d832_10_3_98 = False
                    elif match_arg_262.code == TypePret_Code.Autre:
                        _ = match_arg_262.value
                        temp_calcul_plafond_mensualite_d832_10_3_98 = False
                    match_arg_263 = anciennete_logement
                    if match_arg_263.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_263.value
                        temp_calcul_plafond_mensualite_d832_10_3_99 = True
                    elif match_arg_263.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_263.value
                        temp_calcul_plafond_mensualite_d832_10_3_99 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1107, start_column=5,
                                                         end_line=1110, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2001, 7, 1)) and ((param_13 <
                                                                                                                                                                                                                                 date_of_numbers(2001, 12, 31)) and
                                                                                                                                                                                                                                (temp_calcul_plafond_mensualite_d832_10_3_99 and
                                                                                                                                                                                                                                 temp_calcul_plafond_mensualite_d832_10_3_98)))):
                        match_arg_264 = zone_2
                        if match_arg_264.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_264.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_265 = situation_familiale_calcul_apl_4
                                if match_arg_265.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_265.value
                                    temp_calcul_plafond_mensualite_d832_10_3_100 = money_of_cents_string(
                                        "202500")
                                elif match_arg_265.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_265.value
                                    temp_calcul_plafond_mensualite_d832_10_3_100 = money_of_cents_string(
                                        "244300")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_100 = (money_of_cents_string("286100") +
                                                                                (money_of_cents_string("41800") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_264.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_264.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_266 = situation_familiale_calcul_apl_4
                                if match_arg_266.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_266.value
                                    temp_calcul_plafond_mensualite_d832_10_3_100 = money_of_cents_string(
                                        "180700")
                                elif match_arg_266.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_266.value
                                    temp_calcul_plafond_mensualite_d832_10_3_100 = money_of_cents_string(
                                        "217500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_100 = (money_of_cents_string("254300") +
                                                                                (money_of_cents_string("36800") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_264.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_264.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_267 = situation_familiale_calcul_apl_4
                                if match_arg_267.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_267.value
                                    temp_calcul_plafond_mensualite_d832_10_3_100 = money_of_cents_string(
                                        "168700")
                                elif match_arg_267.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_267.value
                                    temp_calcul_plafond_mensualite_d832_10_3_100 = money_of_cents_string(
                                        "202300")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_100 = (money_of_cents_string("235900") +
                                                                                (money_of_cents_string("33600") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_100 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_101(_: Any):
                    match_arg_268 = type_pret
                    if match_arg_268.code == TypePret_Code.D331_32:
                        _ = match_arg_268.value
                        temp_calcul_plafond_mensualite_d832_10_3_102 = False
                    elif match_arg_268.code == TypePret_Code.D331_63_64:
                        _ = match_arg_268.value
                        temp_calcul_plafond_mensualite_d832_10_3_102 = True
                    elif match_arg_268.code == TypePret_Code.D331_59_8:
                        _ = match_arg_268.value
                        temp_calcul_plafond_mensualite_d832_10_3_102 = False
                    elif match_arg_268.code == TypePret_Code.D331_76_1:
                        _ = match_arg_268.value
                        temp_calcul_plafond_mensualite_d832_10_3_102 = False
                    elif match_arg_268.code == TypePret_Code.Autre:
                        _ = match_arg_268.value
                        temp_calcul_plafond_mensualite_d832_10_3_102 = False
                    match_arg_269 = anciennete_logement
                    if match_arg_269.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_269.value
                        temp_calcul_plafond_mensualite_d832_10_3_103 = False
                    elif match_arg_269.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_269.value
                        temp_calcul_plafond_mensualite_d832_10_3_103 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1060, start_column=5,
                                                         end_line=1063, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2000, 6, 30)) and ((param_13 <=
                                                                                                                                                                                                                                  date_of_numbers(2001, 6, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_103 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_102)))):
                        match_arg_270 = zone_2
                        if match_arg_270.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_270.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_271 = situation_familiale_calcul_apl_4
                                if match_arg_271.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_271.value
                                    temp_calcul_plafond_mensualite_d832_10_3_104 = money_of_cents_string(
                                        "161100")
                                elif match_arg_271.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_271.value
                                    temp_calcul_plafond_mensualite_d832_10_3_104 = money_of_cents_string(
                                        "194400")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_104 = (money_of_cents_string("227700") +
                                                                                (money_of_cents_string("33300") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_270.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_270.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_272 = situation_familiale_calcul_apl_4
                                if match_arg_272.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_272.value
                                    temp_calcul_plafond_mensualite_d832_10_3_104 = money_of_cents_string(
                                        "143600")
                                elif match_arg_272.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_272.value
                                    temp_calcul_plafond_mensualite_d832_10_3_104 = money_of_cents_string(
                                        "172900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_104 = (money_of_cents_string("202200") +
                                                                                (money_of_cents_string("29300") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_270.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_270.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_273 = situation_familiale_calcul_apl_4
                                if match_arg_273.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_273.value
                                    temp_calcul_plafond_mensualite_d832_10_3_104 = money_of_cents_string(
                                        "134100")
                                elif match_arg_273.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_273.value
                                    temp_calcul_plafond_mensualite_d832_10_3_104 = money_of_cents_string(
                                        "160900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_104 = (money_of_cents_string("187700") +
                                                                                (money_of_cents_string("26800") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_104 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_105(_: Any):
                    match_arg_274 = type_pret
                    if match_arg_274.code == TypePret_Code.D331_32:
                        _ = match_arg_274.value
                        temp_calcul_plafond_mensualite_d832_10_3_106 = False
                    elif match_arg_274.code == TypePret_Code.D331_63_64:
                        _ = match_arg_274.value
                        temp_calcul_plafond_mensualite_d832_10_3_106 = True
                    elif match_arg_274.code == TypePret_Code.D331_59_8:
                        _ = match_arg_274.value
                        temp_calcul_plafond_mensualite_d832_10_3_106 = False
                    elif match_arg_274.code == TypePret_Code.D331_76_1:
                        _ = match_arg_274.value
                        temp_calcul_plafond_mensualite_d832_10_3_106 = False
                    elif match_arg_274.code == TypePret_Code.Autre:
                        _ = match_arg_274.value
                        temp_calcul_plafond_mensualite_d832_10_3_106 = False
                    match_arg_275 = anciennete_logement
                    if match_arg_275.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_275.value
                        temp_calcul_plafond_mensualite_d832_10_3_107 = True
                    elif match_arg_275.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_275.value
                        temp_calcul_plafond_mensualite_d832_10_3_107 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=1016, start_column=5,
                                                         end_line=1019, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(2000, 6, 30)) and ((param_13 <=
                                                                                                                                                                                                                                  date_of_numbers(2001, 6, 30)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_107 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_106)))):
                        match_arg_276 = zone_2
                        if match_arg_276.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_276.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_277 = situation_familiale_calcul_apl_4
                                if match_arg_277.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_277.value
                                    temp_calcul_plafond_mensualite_d832_10_3_108 = money_of_cents_string(
                                        "200100")
                                elif match_arg_277.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_277.value
                                    temp_calcul_plafond_mensualite_d832_10_3_108 = money_of_cents_string(
                                        "141400")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_108 = (money_of_cents_string("282700") +
                                                                                (money_of_cents_string("41300") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_276.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_276.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_278 = situation_familiale_calcul_apl_4
                                if match_arg_278.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_278.value
                                    temp_calcul_plafond_mensualite_d832_10_3_108 = money_of_cents_string(
                                        "178600")
                                elif match_arg_278.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_278.value
                                    temp_calcul_plafond_mensualite_d832_10_3_108 = money_of_cents_string(
                                        "215000")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_108 = (money_of_cents_string("251400") +
                                                                                (money_of_cents_string("36400") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_276.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_276.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_279 = situation_familiale_calcul_apl_4
                                if match_arg_279.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_279.value
                                    temp_calcul_plafond_mensualite_d832_10_3_108 = money_of_cents_string(
                                        "166700")
                                elif match_arg_279.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_279.value
                                    temp_calcul_plafond_mensualite_d832_10_3_108 = money_of_cents_string(
                                        "199900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_108 = (money_of_cents_string("233100") +
                                                                                (money_of_cents_string("33200") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_108 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_109(_: Any):
                    match_arg_280 = type_pret
                    if match_arg_280.code == TypePret_Code.D331_32:
                        _ = match_arg_280.value
                        temp_calcul_plafond_mensualite_d832_10_3_110 = False
                    elif match_arg_280.code == TypePret_Code.D331_63_64:
                        _ = match_arg_280.value
                        temp_calcul_plafond_mensualite_d832_10_3_110 = True
                    elif match_arg_280.code == TypePret_Code.D331_59_8:
                        _ = match_arg_280.value
                        temp_calcul_plafond_mensualite_d832_10_3_110 = False
                    elif match_arg_280.code == TypePret_Code.D331_76_1:
                        _ = match_arg_280.value
                        temp_calcul_plafond_mensualite_d832_10_3_110 = False
                    elif match_arg_280.code == TypePret_Code.Autre:
                        _ = match_arg_280.value
                        temp_calcul_plafond_mensualite_d832_10_3_110 = False
                    match_arg_281 = anciennete_logement
                    if match_arg_281.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_281.value
                        temp_calcul_plafond_mensualite_d832_10_3_111 = False
                    elif match_arg_281.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_281.value
                        temp_calcul_plafond_mensualite_d832_10_3_111 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=971, start_column=5,
                                                         end_line=974, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1994, 11, 27)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2000, 6, 30)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_111 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_110)))):
                        match_arg_282 = zone_2
                        if match_arg_282.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_282.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_283 = situation_familiale_calcul_apl_4
                                if match_arg_283.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_283.value
                                    temp_calcul_plafond_mensualite_d832_10_3_112 = money_of_cents_string(
                                        "159500")
                                elif match_arg_283.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_283.value
                                    temp_calcul_plafond_mensualite_d832_10_3_112 = money_of_cents_string(
                                        "192500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_112 = (money_of_cents_string("225500") +
                                                                                (money_of_cents_string("33000") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_282.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_282.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_284 = situation_familiale_calcul_apl_4
                                if match_arg_284.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_284.value
                                    temp_calcul_plafond_mensualite_d832_10_3_112 = money_of_cents_string(
                                        "142200")
                                elif match_arg_284.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_284.value
                                    temp_calcul_plafond_mensualite_d832_10_3_112 = money_of_cents_string(
                                        "171200")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_112 = (money_of_cents_string("200200") +
                                                                                (money_of_cents_string("29000") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_282.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_282.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_285 = situation_familiale_calcul_apl_4
                                if match_arg_285.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_285.value
                                    temp_calcul_plafond_mensualite_d832_10_3_112 = money_of_cents_string(
                                        "132800")
                                elif match_arg_285.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_285.value
                                    temp_calcul_plafond_mensualite_d832_10_3_112 = money_of_cents_string(
                                        "159300")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_112 = (money_of_cents_string("185800") +
                                                                                (money_of_cents_string("26500") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_112 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_113(_: Any):
                    match_arg_286 = type_pret
                    if match_arg_286.code == TypePret_Code.D331_32:
                        _ = match_arg_286.value
                        temp_calcul_plafond_mensualite_d832_10_3_114 = False
                    elif match_arg_286.code == TypePret_Code.D331_63_64:
                        _ = match_arg_286.value
                        temp_calcul_plafond_mensualite_d832_10_3_114 = True
                    elif match_arg_286.code == TypePret_Code.D331_59_8:
                        _ = match_arg_286.value
                        temp_calcul_plafond_mensualite_d832_10_3_114 = False
                    elif match_arg_286.code == TypePret_Code.D331_76_1:
                        _ = match_arg_286.value
                        temp_calcul_plafond_mensualite_d832_10_3_114 = False
                    elif match_arg_286.code == TypePret_Code.Autre:
                        _ = match_arg_286.value
                        temp_calcul_plafond_mensualite_d832_10_3_114 = False
                    match_arg_287 = anciennete_logement
                    if match_arg_287.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_287.value
                        temp_calcul_plafond_mensualite_d832_10_3_115 = True
                    elif match_arg_287.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_287.value
                        temp_calcul_plafond_mensualite_d832_10_3_115 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=927, start_column=5,
                                                         end_line=930, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1994, 11, 27)) and ((param_13 <
                                                                                                                                                                                                                                   date_of_numbers(2000, 6, 30)) and
                                                                                                                                                                                                                                  (temp_calcul_plafond_mensualite_d832_10_3_115 and
                                                                                                                                                                                                                                   temp_calcul_plafond_mensualite_d832_10_3_114)))):
                        match_arg_288 = zone_2
                        if match_arg_288.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_288.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_289 = situation_familiale_calcul_apl_4
                                if match_arg_289.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_289.value
                                    temp_calcul_plafond_mensualite_d832_10_3_116 = money_of_cents_string(
                                        "198100")
                                elif match_arg_289.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_289.value
                                    temp_calcul_plafond_mensualite_d832_10_3_116 = money_of_cents_string(
                                        "239000")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_116 = (money_of_cents_string("279900") +
                                                                                (money_of_cents_string("40900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_288.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_288.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_290 = situation_familiale_calcul_apl_4
                                if match_arg_290.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_290.value
                                    temp_calcul_plafond_mensualite_d832_10_3_116 = money_of_cents_string(
                                        "176800")
                                elif match_arg_290.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_290.value
                                    temp_calcul_plafond_mensualite_d832_10_3_116 = money_of_cents_string(
                                        "212800")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_116 = (money_of_cents_string("248800") +
                                                                                (money_of_cents_string("36000") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_288.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_288.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_291 = situation_familiale_calcul_apl_4
                                if match_arg_291.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_291.value
                                    temp_calcul_plafond_mensualite_d832_10_3_116 = money_of_cents_string(
                                        "165000")
                                elif match_arg_291.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_291.value
                                    temp_calcul_plafond_mensualite_d832_10_3_116 = money_of_cents_string(
                                        "197900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_116 = (money_of_cents_string("230800") +
                                                                                (money_of_cents_string("32900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_116 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_117(_: Any):
                    match_arg_292 = type_pret
                    if match_arg_292.code == TypePret_Code.D331_32:
                        _ = match_arg_292.value
                        temp_calcul_plafond_mensualite_d832_10_3_118 = False
                    elif match_arg_292.code == TypePret_Code.D331_63_64:
                        _ = match_arg_292.value
                        temp_calcul_plafond_mensualite_d832_10_3_118 = True
                    elif match_arg_292.code == TypePret_Code.D331_59_8:
                        _ = match_arg_292.value
                        temp_calcul_plafond_mensualite_d832_10_3_118 = False
                    elif match_arg_292.code == TypePret_Code.D331_76_1:
                        _ = match_arg_292.value
                        temp_calcul_plafond_mensualite_d832_10_3_118 = False
                    elif match_arg_292.code == TypePret_Code.Autre:
                        _ = match_arg_292.value
                        temp_calcul_plafond_mensualite_d832_10_3_118 = False
                    match_arg_293 = anciennete_logement
                    if match_arg_293.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_293.value
                        temp_calcul_plafond_mensualite_d832_10_3_119 = False
                    elif match_arg_293.code == NeufOuAncien_Code.Ancien:
                        ameliore_par_occupant_1 = match_arg_293.value
                        match_arg_294 = ameliore_par_occupant_1
                        if match_arg_294.code == AmelioreParOccupant_Code.Oui:
                            _ = match_arg_294.value
                            temp_calcul_plafond_mensualite_d832_10_3_119 = True
                        elif match_arg_294.code == AmelioreParOccupant_Code.Non:
                            _ = match_arg_294.value
                            temp_calcul_plafond_mensualite_d832_10_3_119 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=895, start_column=5,
                                                         end_line=901, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1992, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_119 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_118)))):
                        if (nombre_personnes_a_charge_4 ==
                                integer_of_string("0")):
                            match_arg_295 = situation_familiale_calcul_apl_4
                            if match_arg_295.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                _ = match_arg_295.value
                                temp_calcul_plafond_mensualite_d832_10_3_120 = money_of_cents_string(
                                    "86900")
                            elif match_arg_295.code == SituationFamilialeCalculAPL_Code.Couple:
                                _ = match_arg_295.value
                                temp_calcul_plafond_mensualite_d832_10_3_120 = money_of_cents_string(
                                    "97100")
                        else:
                            temp_calcul_plafond_mensualite_d832_10_3_120 = (money_of_cents_string("107300") +
                                                                            (money_of_cents_string("10200") *
                                                                             decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                 integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_120 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_121(_: Any):
                    match_arg_296 = type_pret
                    if match_arg_296.code == TypePret_Code.D331_32:
                        _ = match_arg_296.value
                        temp_calcul_plafond_mensualite_d832_10_3_122 = False
                    elif match_arg_296.code == TypePret_Code.D331_63_64:
                        _ = match_arg_296.value
                        temp_calcul_plafond_mensualite_d832_10_3_122 = True
                    elif match_arg_296.code == TypePret_Code.D331_59_8:
                        _ = match_arg_296.value
                        temp_calcul_plafond_mensualite_d832_10_3_122 = False
                    elif match_arg_296.code == TypePret_Code.D331_76_1:
                        _ = match_arg_296.value
                        temp_calcul_plafond_mensualite_d832_10_3_122 = False
                    elif match_arg_296.code == TypePret_Code.Autre:
                        _ = match_arg_296.value
                        temp_calcul_plafond_mensualite_d832_10_3_122 = False
                    match_arg_297 = anciennete_logement
                    if match_arg_297.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_297.value
                        temp_calcul_plafond_mensualite_d832_10_3_123 = False
                    elif match_arg_297.code == NeufOuAncien_Code.Ancien:
                        ameliore_par_occupant_2 = match_arg_297.value
                        match_arg_298 = ameliore_par_occupant_2
                        if match_arg_298.code == AmelioreParOccupant_Code.Oui:
                            _ = match_arg_298.value
                            temp_calcul_plafond_mensualite_d832_10_3_123 = False
                        elif match_arg_298.code == AmelioreParOccupant_Code.Non:
                            _ = match_arg_298.value
                            temp_calcul_plafond_mensualite_d832_10_3_123 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=848, start_column=5,
                                                         end_line=854, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1992, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_123 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_122)))):
                        match_arg_299 = zone_2
                        if match_arg_299.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_299.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_300 = situation_familiale_calcul_apl_4
                                if match_arg_300.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_300.value
                                    temp_calcul_plafond_mensualite_d832_10_3_124 = money_of_cents_string(
                                        "167800")
                                elif match_arg_300.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_300.value
                                    temp_calcul_plafond_mensualite_d832_10_3_124 = money_of_cents_string(
                                        "202500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_124 = (money_of_cents_string("237200") +
                                                                                (money_of_cents_string("34700") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_299.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_299.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_301 = situation_familiale_calcul_apl_4
                                if match_arg_301.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_301.value
                                    temp_calcul_plafond_mensualite_d832_10_3_124 = money_of_cents_string(
                                        "149600")
                                elif match_arg_301.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_301.value
                                    temp_calcul_plafond_mensualite_d832_10_3_124 = money_of_cents_string(
                                        "223900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_124 = (money_of_cents_string("261800") +
                                                                                (money_of_cents_string("37900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_299.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_299.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_302 = situation_familiale_calcul_apl_4
                                if match_arg_302.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_302.value
                                    temp_calcul_plafond_mensualite_d832_10_3_124 = money_of_cents_string(
                                        "139700")
                                elif match_arg_302.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_302.value
                                    temp_calcul_plafond_mensualite_d832_10_3_124 = money_of_cents_string(
                                        "208200")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_124 = (money_of_cents_string("242800") +
                                                                                (money_of_cents_string("34600") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_124 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_125(_: Any):
                    match_arg_303 = type_pret
                    if match_arg_303.code == TypePret_Code.D331_32:
                        _ = match_arg_303.value
                        temp_calcul_plafond_mensualite_d832_10_3_126 = False
                    elif match_arg_303.code == TypePret_Code.D331_63_64:
                        _ = match_arg_303.value
                        temp_calcul_plafond_mensualite_d832_10_3_126 = True
                    elif match_arg_303.code == TypePret_Code.D331_59_8:
                        _ = match_arg_303.value
                        temp_calcul_plafond_mensualite_d832_10_3_126 = False
                    elif match_arg_303.code == TypePret_Code.D331_76_1:
                        _ = match_arg_303.value
                        temp_calcul_plafond_mensualite_d832_10_3_126 = False
                    elif match_arg_303.code == TypePret_Code.Autre:
                        _ = match_arg_303.value
                        temp_calcul_plafond_mensualite_d832_10_3_126 = False
                    match_arg_304 = anciennete_logement
                    if match_arg_304.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_304.value
                        temp_calcul_plafond_mensualite_d832_10_3_127 = True
                    elif match_arg_304.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_304.value
                        temp_calcul_plafond_mensualite_d832_10_3_127 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=804, start_column=5,
                                                         end_line=807, end_column=36,
                                                         law_headings=["Article 18",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1992, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_127 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_126)))):
                        match_arg_305 = zone_2
                        if match_arg_305.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_305.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_306 = situation_familiale_calcul_apl_4
                                if match_arg_306.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_306.value
                                    temp_calcul_plafond_mensualite_d832_10_3_128 = money_of_cents_string(
                                        "208500")
                                elif match_arg_306.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_306.value
                                    temp_calcul_plafond_mensualite_d832_10_3_128 = money_of_cents_string(
                                        "251500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_128 = (money_of_cents_string("294500") +
                                                                                (money_of_cents_string("43000") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_305.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_305.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_307 = situation_familiale_calcul_apl_4
                                if match_arg_307.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_307.value
                                    temp_calcul_plafond_mensualite_d832_10_3_128 = money_of_cents_string(
                                        "186000")
                                elif match_arg_307.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_307.value
                                    temp_calcul_plafond_mensualite_d832_10_3_128 = money_of_cents_string(
                                        "223900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_128 = (money_of_cents_string("261800") +
                                                                                (money_of_cents_string("37900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_305.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_305.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_308 = situation_familiale_calcul_apl_4
                                if match_arg_308.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_308.value
                                    temp_calcul_plafond_mensualite_d832_10_3_128 = money_of_cents_string(
                                        "173600")
                                elif match_arg_308.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_308.value
                                    temp_calcul_plafond_mensualite_d832_10_3_128 = money_of_cents_string(
                                        "208200")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_128 = (money_of_cents_string("242800") +
                                                                                (money_of_cents_string("34600") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_128 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_129(_: Any):
                    match_arg_309 = type_pret
                    if match_arg_309.code == TypePret_Code.D331_32:
                        _ = match_arg_309.value
                        temp_calcul_plafond_mensualite_d832_10_3_130 = True
                    elif match_arg_309.code == TypePret_Code.D331_63_64:
                        _ = match_arg_309.value
                        temp_calcul_plafond_mensualite_d832_10_3_130 = False
                    elif match_arg_309.code == TypePret_Code.D331_59_8:
                        _ = match_arg_309.value
                        temp_calcul_plafond_mensualite_d832_10_3_130 = False
                    elif match_arg_309.code == TypePret_Code.D331_76_1:
                        _ = match_arg_309.value
                        temp_calcul_plafond_mensualite_d832_10_3_130 = False
                    elif match_arg_309.code == TypePret_Code.Autre:
                        _ = match_arg_309.value
                        temp_calcul_plafond_mensualite_d832_10_3_130 = False
                    match_arg_310 = anciennete_logement
                    if match_arg_310.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_310.value
                        temp_calcul_plafond_mensualite_d832_10_3_131 = False
                    elif match_arg_310.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_310.value
                        temp_calcul_plafond_mensualite_d832_10_3_131 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=753, start_column=5,
                                                         end_line=755, end_column=33,
                                                         law_headings=["Article 17",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                             (temp_calcul_plafond_mensualite_d832_10_3_131 and
                                                                                                                                                                                              temp_calcul_plafond_mensualite_d832_10_3_130))):
                        match_arg_311 = zone_2
                        if match_arg_311.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_311.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_312 = situation_familiale_calcul_apl_4
                                if match_arg_312.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_312.value
                                    temp_calcul_plafond_mensualite_d832_10_3_132 = money_of_cents_string(
                                        "148100")
                                elif match_arg_312.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_312.value
                                    temp_calcul_plafond_mensualite_d832_10_3_132 = money_of_cents_string(
                                        "178700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_132 = (money_of_cents_string("209300") +
                                                                                (money_of_cents_string("30600") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_311.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_311.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_313 = situation_familiale_calcul_apl_4
                                if match_arg_313.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_313.value
                                    temp_calcul_plafond_mensualite_d832_10_3_132 = money_of_cents_string(
                                        "132000")
                                elif match_arg_313.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_313.value
                                    temp_calcul_plafond_mensualite_d832_10_3_132 = money_of_cents_string(
                                        "158900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_132 = (money_of_cents_string("185800") +
                                                                                (money_of_cents_string("26900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_311.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_311.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_314 = situation_familiale_calcul_apl_4
                                if match_arg_314.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_314.value
                                    temp_calcul_plafond_mensualite_d832_10_3_132 = money_of_cents_string(
                                        "123300")
                                elif match_arg_314.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_314.value
                                    temp_calcul_plafond_mensualite_d832_10_3_132 = money_of_cents_string(
                                        "147900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_132 = (money_of_cents_string("172500") +
                                                                                (money_of_cents_string("24600") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_132 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_133(_: Any):
                    match_arg_315 = type_pret
                    if match_arg_315.code == TypePret_Code.D331_32:
                        _ = match_arg_315.value
                        temp_calcul_plafond_mensualite_d832_10_3_134 = True
                    elif match_arg_315.code == TypePret_Code.D331_63_64:
                        _ = match_arg_315.value
                        temp_calcul_plafond_mensualite_d832_10_3_134 = False
                    elif match_arg_315.code == TypePret_Code.D331_59_8:
                        _ = match_arg_315.value
                        temp_calcul_plafond_mensualite_d832_10_3_134 = False
                    elif match_arg_315.code == TypePret_Code.D331_76_1:
                        _ = match_arg_315.value
                        temp_calcul_plafond_mensualite_d832_10_3_134 = False
                    elif match_arg_315.code == TypePret_Code.Autre:
                        _ = match_arg_315.value
                        temp_calcul_plafond_mensualite_d832_10_3_134 = False
                    match_arg_316 = anciennete_logement
                    if match_arg_316.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_316.value
                        temp_calcul_plafond_mensualite_d832_10_3_135 = True
                    elif match_arg_316.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_316.value
                        temp_calcul_plafond_mensualite_d832_10_3_135 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=710, start_column=5,
                                                         end_line=712, end_column=33,
                                                         law_headings=["Article 17",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                             (temp_calcul_plafond_mensualite_d832_10_3_135 and
                                                                                                                                                                                              temp_calcul_plafond_mensualite_d832_10_3_134))):
                        match_arg_317 = zone_2
                        if match_arg_317.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_317.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_318 = situation_familiale_calcul_apl_4
                                if match_arg_318.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_318.value
                                    temp_calcul_plafond_mensualite_d832_10_3_136 = money_of_cents_string(
                                        "184000")
                                elif match_arg_318.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_318.value
                                    temp_calcul_plafond_mensualite_d832_10_3_136 = money_of_cents_string(
                                        "220000")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_136 = (money_of_cents_string("260000") +
                                                                                (money_of_cents_string("38000") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_317.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_317.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_319 = situation_familiale_calcul_apl_4
                                if match_arg_319.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_319.value
                                    temp_calcul_plafond_mensualite_d832_10_3_136 = money_of_cents_string(
                                        "164200")
                                elif match_arg_319.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_319.value
                                    temp_calcul_plafond_mensualite_d832_10_3_136 = money_of_cents_string(
                                        "197700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_136 = (money_of_cents_string("231200") +
                                                                                (money_of_cents_string("33500") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_317.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_317.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_320 = situation_familiale_calcul_apl_4
                                if match_arg_320.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_320.value
                                    temp_calcul_plafond_mensualite_d832_10_3_136 = money_of_cents_string(
                                        "153200")
                                elif match_arg_320.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_320.value
                                    temp_calcul_plafond_mensualite_d832_10_3_136 = money_of_cents_string(
                                        "183700")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_136 = (money_of_cents_string("214200") +
                                                                                (money_of_cents_string("30500") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_136 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_137(_: Any):
                    match_arg_321 = type_pret
                    if match_arg_321.code == TypePret_Code.D331_32:
                        _ = match_arg_321.value
                        temp_calcul_plafond_mensualite_d832_10_3_138 = True
                    elif match_arg_321.code == TypePret_Code.D331_63_64:
                        _ = match_arg_321.value
                        temp_calcul_plafond_mensualite_d832_10_3_138 = False
                    elif match_arg_321.code == TypePret_Code.D331_59_8:
                        _ = match_arg_321.value
                        temp_calcul_plafond_mensualite_d832_10_3_138 = False
                    elif match_arg_321.code == TypePret_Code.D331_76_1:
                        _ = match_arg_321.value
                        temp_calcul_plafond_mensualite_d832_10_3_138 = False
                    elif match_arg_321.code == TypePret_Code.Autre:
                        _ = match_arg_321.value
                        temp_calcul_plafond_mensualite_d832_10_3_138 = False
                    match_arg_322 = anciennete_logement
                    if match_arg_322.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_322.value
                        temp_calcul_plafond_mensualite_d832_10_3_139 = False
                    elif match_arg_322.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_322.value
                        temp_calcul_plafond_mensualite_d832_10_3_139 = True
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=665, start_column=5,
                                                         end_line=668, end_column=33,
                                                         law_headings=["Article 17",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1992, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_139 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_138)))):
                        match_arg_323 = zone_2
                        if match_arg_323.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_323.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_324 = situation_familiale_calcul_apl_4
                                if match_arg_324.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_324.value
                                    temp_calcul_plafond_mensualite_d832_10_3_140 = money_of_cents_string(
                                        "167800")
                                elif match_arg_324.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_324.value
                                    temp_calcul_plafond_mensualite_d832_10_3_140 = money_of_cents_string(
                                        "202500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_140 = (money_of_cents_string("237200") +
                                                                                (money_of_cents_string("37400") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_323.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_323.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_325 = situation_familiale_calcul_apl_4
                                if match_arg_325.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_325.value
                                    temp_calcul_plafond_mensualite_d832_10_3_140 = money_of_cents_string(
                                        "146900")
                                elif match_arg_325.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_325.value
                                    temp_calcul_plafond_mensualite_d832_10_3_140 = money_of_cents_string(
                                        "180100")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_140 = (money_of_cents_string("210600") +
                                                                                (money_of_cents_string("30500") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_323.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_323.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_326 = situation_familiale_calcul_apl_4
                                if match_arg_326.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_326.value
                                    temp_calcul_plafond_mensualite_d832_10_3_140 = money_of_cents_string(
                                        "139700")
                                elif match_arg_326.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_326.value
                                    temp_calcul_plafond_mensualite_d832_10_3_140 = money_of_cents_string(
                                        "167600")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_140 = (money_of_cents_string("195500") +
                                                                                (money_of_cents_string("27900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_140 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d832_10_3_141(_: Any):
                    match_arg_327 = type_pret
                    if match_arg_327.code == TypePret_Code.D331_32:
                        _ = match_arg_327.value
                        temp_calcul_plafond_mensualite_d832_10_3_142 = True
                    elif match_arg_327.code == TypePret_Code.D331_63_64:
                        _ = match_arg_327.value
                        temp_calcul_plafond_mensualite_d832_10_3_142 = False
                    elif match_arg_327.code == TypePret_Code.D331_59_8:
                        _ = match_arg_327.value
                        temp_calcul_plafond_mensualite_d832_10_3_142 = False
                    elif match_arg_327.code == TypePret_Code.D331_76_1:
                        _ = match_arg_327.value
                        temp_calcul_plafond_mensualite_d832_10_3_142 = False
                    elif match_arg_327.code == TypePret_Code.Autre:
                        _ = match_arg_327.value
                        temp_calcul_plafond_mensualite_d832_10_3_142 = False
                    match_arg_328 = anciennete_logement
                    if match_arg_328.code == NeufOuAncien_Code.Neuf:
                        _ = match_arg_328.value
                        temp_calcul_plafond_mensualite_d832_10_3_143 = True
                    elif match_arg_328.code == NeufOuAncien_Code.Ancien:
                        _ = match_arg_328.value
                        temp_calcul_plafond_mensualite_d832_10_3_143 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=621, start_column=5,
                                                         end_line=624, end_column=33,
                                                         law_headings=["Article 17",
                                                                       "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((param_13 >=
                                                                                                                                                                                              date_of_numbers(1992, 6, 30)) and ((param_13 <
                                                                                                                                                                                                                                  date_of_numbers(1994, 11, 27)) and
                                                                                                                                                                                                                                 (temp_calcul_plafond_mensualite_d832_10_3_143 and
                                                                                                                                                                                                                                  temp_calcul_plafond_mensualite_d832_10_3_142)))):
                        match_arg_329 = zone_2
                        if match_arg_329.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_329.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_330 = situation_familiale_calcul_apl_4
                                if match_arg_330.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_330.value
                                    temp_calcul_plafond_mensualite_d832_10_3_144 = money_of_cents_string(
                                        "208500")
                                elif match_arg_330.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_330.value
                                    temp_calcul_plafond_mensualite_d832_10_3_144 = money_of_cents_string(
                                        "251500")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_144 = (money_of_cents_string("294500") +
                                                                                (money_of_cents_string("43000") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_329.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_329.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_331 = situation_familiale_calcul_apl_4
                                if match_arg_331.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_331.value
                                    temp_calcul_plafond_mensualite_d832_10_3_144 = money_of_cents_string(
                                        "186000")
                                elif match_arg_331.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_331.value
                                    temp_calcul_plafond_mensualite_d832_10_3_144 = money_of_cents_string(
                                        "223900")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_144 = (money_of_cents_string("261800") +
                                                                                (money_of_cents_string("37900") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        elif match_arg_329.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_329.value
                            if (nombre_personnes_a_charge_4 ==
                                    integer_of_string("0")):
                                match_arg_332 = situation_familiale_calcul_apl_4
                                if match_arg_332.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_332.value
                                    temp_calcul_plafond_mensualite_d832_10_3_144 = money_of_cents_string(
                                        "173600")
                                elif match_arg_332.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_332.value
                                    temp_calcul_plafond_mensualite_d832_10_3_144 = money_of_cents_string(
                                        "208200")
                            else:
                                temp_calcul_plafond_mensualite_d832_10_3_144 = (money_of_cents_string("242800") +
                                                                                (money_of_cents_string("35600") *
                                                                                 decimal_of_integer((nombre_personnes_a_charge_4 -
                                                                                                     integer_of_string("1")))))
                        return (temp_calcul_plafond_mensualite_d832_10_3_144 *
                                taux_francs_vers_euros)
                    else:
                        raise EmptyError
                return handle_default([temp_calcul_plafond_mensualite_d832_10_3_141,
                                      temp_calcul_plafond_mensualite_d832_10_3_137,
                                      temp_calcul_plafond_mensualite_d832_10_3_133,
                                      temp_calcul_plafond_mensualite_d832_10_3_129,
                                      temp_calcul_plafond_mensualite_d832_10_3_125,
                                      temp_calcul_plafond_mensualite_d832_10_3_121,
                                      temp_calcul_plafond_mensualite_d832_10_3_117,
                                      temp_calcul_plafond_mensualite_d832_10_3_113,
                                      temp_calcul_plafond_mensualite_d832_10_3_109,
                                      temp_calcul_plafond_mensualite_d832_10_3_105,
                                      temp_calcul_plafond_mensualite_d832_10_3_101,
                                      temp_calcul_plafond_mensualite_d832_10_3_97,
                                      temp_calcul_plafond_mensualite_d832_10_3_94,
                                      temp_calcul_plafond_mensualite_d832_10_3_90,
                                      temp_calcul_plafond_mensualite_d832_10_3_87,
                                      temp_calcul_plafond_mensualite_d832_10_3_84,
                                      temp_calcul_plafond_mensualite_d832_10_3_81,
                                      temp_calcul_plafond_mensualite_d832_10_3_78,
                                      temp_calcul_plafond_mensualite_d832_10_3_75,
                                      temp_calcul_plafond_mensualite_d832_10_3_72,
                                      temp_calcul_plafond_mensualite_d832_10_3_69,
                                      temp_calcul_plafond_mensualite_d832_10_3_66,
                                      temp_calcul_plafond_mensualite_d832_10_3_63,
                                      temp_calcul_plafond_mensualite_d832_10_3_60,
                                      temp_calcul_plafond_mensualite_d832_10_3_57,
                                      temp_calcul_plafond_mensualite_d832_10_3_54,
                                      temp_calcul_plafond_mensualite_d832_10_3_51,
                                      temp_calcul_plafond_mensualite_d832_10_3_48,
                                      temp_calcul_plafond_mensualite_d832_10_3_45,
                                      temp_calcul_plafond_mensualite_d832_10_3_42,
                                      temp_calcul_plafond_mensualite_d832_10_3_39,
                                      temp_calcul_plafond_mensualite_d832_10_3_36,
                                      temp_calcul_plafond_mensualite_d832_10_3_33,
                                      temp_calcul_plafond_mensualite_d832_10_3_30,
                                      temp_calcul_plafond_mensualite_d832_10_3_27,
                                      temp_calcul_plafond_mensualite_d832_10_3_24,
                                      temp_calcul_plafond_mensualite_d832_10_3_21,
                                      temp_calcul_plafond_mensualite_d832_10_3_18,
                                      temp_calcul_plafond_mensualite_d832_10_3_15,
                                      temp_calcul_plafond_mensualite_d832_10_3_12,
                                      temp_calcul_plafond_mensualite_d832_10_3_9,
                                      temp_calcul_plafond_mensualite_d832_10_3_6,
                                      temp_calcul_plafond_mensualite_d832_10_3_3],
                                      temp_calcul_plafond_mensualite_d832_10_3_2,
                                      temp_calcul_plafond_mensualite_d832_10_3_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=710,
                                                     start_column=11,
                                                     end_line=710,
                                                     end_column=46,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_calcul_plafond_mensualite_d832_10_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=710, start_column=11,
                                             end_line=710, end_column=46,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d832_10_3 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                   "calcul_plafond_mensualité_d832_10_3"],
                                                                  temp_calcul_plafond_mensualite_d832_10_3)
    try:
        temp_n_nombre_parts_d832_11_1 = calcul_nombre_parts_dot_n_nombre_parts_d832_11
    except EmptyError:
        temp_n_nombre_parts_d832_11_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=711, start_column=11,
                                             end_line=711, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    n_nombre_parts_d832_11_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                        "n_nombre_parts_d832_11"], temp_n_nombre_parts_d832_11_1)
    try:
        def temp_depense_nette_minimale_d832_10(param_14: Money):
            try:
                try:
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=3599, start_column=5,
                                                         end_line=3599, end_column=41,
                                                         law_headings=["Article D832-17",
                                                                       "Section 2 : Accession à la propriété",
                                                                       "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), (date_signature_pret >=
                                                                                                                        date_of_numbers(1999, 6, 30))):
                        return ((mensualite_principale +
                                 montant_forfaitaire_charges_d832_10) - param_14)
                    else:
                        raise EmptyError
                except EmptyError:
                    return (mensualite_principale - param_14)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=716,
                                                     start_column=11,
                                                     end_line=716,
                                                     end_column=41,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_depense_nette_minimale_d832_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=716, start_column=11,
                                             end_line=716, end_column=41,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    depense_nette_minimale_d832_10 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                              "dépense_nette_minimale_d832_10"],
                                                             temp_depense_nette_minimale_d832_10)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=3437, start_column=5,
                                                 end_line=3437, end_column=44,
                                                 law_headings=["Article D832-14",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), local_habite_premiere_fois_beneficiaire):
                if (log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                    "calcul_plafond_mensualité_d832_10_3"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                          "calcul_plafond_mensualité_d832_10_3", "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "calcul_plafond_mensualité_d832_10_3"],
                                                                        calcul_plafond_mensualite_d832_10_3,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                 "calcul_plafond_mensualité_d832_10_3", "input"],
                                                                                                date_signature_pret)))) <
                    log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                  "calcul_plafond_mensualité_d832_10_3"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                          "calcul_plafond_mensualité_d832_10_3", "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "calcul_plafond_mensualité_d832_10_3"],
                                                                        calcul_plafond_mensualite_d832_10_3,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                 "calcul_plafond_mensualité_d832_10_3", "input"],
                                                                                                date_entree_logement))))):
                    temp_plafond_mensualite_d832_10_3_base = log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                           "calcul_plafond_mensualité_d832_10_3"],
                                                                          log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                   "calcul_plafond_mensualité_d832_10_3", "output"],
                                                                                                  log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                  "calcul_plafond_mensualité_d832_10_3"],
                                                                                                                 calcul_plafond_mensualite_d832_10_3,
                                                                                                                 log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                          "calcul_plafond_mensualité_d832_10_3", "input"],
                                                                                                                                         date_entree_logement))))
                else:
                    temp_plafond_mensualite_d832_10_3_base = log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                           "calcul_plafond_mensualité_d832_10_3"],
                                                                          log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                   "calcul_plafond_mensualité_d832_10_3", "output"],
                                                                                                  log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                  "calcul_plafond_mensualité_d832_10_3"],
                                                                                                                 calcul_plafond_mensualite_d832_10_3,
                                                                                                                 log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                          "calcul_plafond_mensualité_d832_10_3", "input"],
                                                                                                                                         date_signature_pret))))
            else:
                temp_plafond_mensualite_d832_10_3_base = dead_value
                raise EmptyError
        except EmptyError:
            temp_plafond_mensualite_d832_10_3_base = log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                   "calcul_plafond_mensualité_d832_10_3"],
                                                                  log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                           "calcul_plafond_mensualité_d832_10_3", "output"],
                                                                                          log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                          "calcul_plafond_mensualité_d832_10_3"],
                                                                                                         calcul_plafond_mensualite_d832_10_3,
                                                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                  "calcul_plafond_mensualité_d832_10_3", "input"],
                                                                                                                                 date_signature_pret))))
    except EmptyError:
        temp_plafond_mensualite_d832_10_3_base = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=708, start_column=10,
                                             end_line=708, end_column=14,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_mensualite_d832_10_3_base = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                 "plafond_mensualité_d832_10_3_base"],
                                                                temp_plafond_mensualite_d832_10_3_base)
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                            "calcul_équivalence_loyer_minimale.ressources_ménage_arrondies"],
                                                                                                           ressources_menage_arrondies_3)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=614, start_column=10,
                                             end_line=614, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1 = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                      "calcul_équivalence_loyer_minimale.condition_2_du_832_25"],
                                                                                                     False)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=615, start_column=10,
                                             end_line=615, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                       "calcul_équivalence_loyer_minimale.n_nombre_parts_d832_25"],
                                                                                                      n_nombre_parts_d832_11_1)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=616, start_column=10,
                                             end_line=616, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1
    result_6 = log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                             "calcul_équivalence_loyer_minimale",
                             "CalculÉquivalenceLoyerMinimale"],
                            log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                            "calcul_équivalence_loyer_minimale",
                                            "CalculÉquivalenceLoyerMinimale"],
                                           calcul_equivalence_loyer_minimale,
                                           CalculEquivalenceLoyerMinimaleIn(ressources_menage_arrondies_in=calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_1,
                                                                            condition_2_du_832_25_in=calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_1,
                                                                            n_nombre_parts_d832_25_in=calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_1)))
    calcul_equivalence_loyer_minimale_dot_montant_1 = result_6.montant_out
    try:
        temp_coefficient_prise_en_charge_d832_10_formule = (decimal_of_string("0.95") -
                                                            (ressources_menage_arrondies_3 /
                                                             (coefficient_multiplicateur_d832_11 * n_nombre_parts_d832_11_1)))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_10_formule = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=713, start_column=10,
                                             end_line=713, end_column=17,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_10_formule = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                           "coefficient_prise_en_charge_d832_10_formule"],
                                                                          temp_coefficient_prise_en_charge_d832_10_formule)
    try:
        def temp_abattement_depense_nette_minimale_d832_10(param_15: Money):
            try:
                if (log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                    "dépense_nette_minimale_d832_10"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                          "dépense_nette_minimale_d832_10", "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "dépense_nette_minimale_d832_10"],
                                                                        depense_nette_minimale_d832_10,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                 "dépense_nette_minimale_d832_10", "input"],
                                                                                                param_15)))) <= (ressources_menage_avec_d832_18 *
                                                                                                                 coefficient_multiplicateur_d832_17_3)):
                    return ((ressources_menage_avec_d832_18 *
                             coefficient_multiplicateur_d832_17_3) -
                            log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                          "dépense_nette_minimale_d832_10"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                  "dépense_nette_minimale_d832_10", "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                 "dépense_nette_minimale_d832_10"],
                                                                                depense_nette_minimale_d832_10,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                         "dépense_nette_minimale_d832_10", "input"],
                                                                                                        param_15)))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=717,
                                                     start_column=11,
                                                     end_line=717,
                                                     end_column=52,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_abattement_depense_nette_minimale_d832_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=717, start_column=11,
                                             end_line=717, end_column=52,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    abattement_depense_nette_minimale_d832_10 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "abattement_dépense_nette_minimale_d832_10"],
                                                                        temp_abattement_depense_nette_minimale_d832_10)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/archives.catala_fr",
                                                 start_line=444, start_column=14, end_line=444, end_column=42,
                                                 law_headings=["Article 24",
                                                               "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement",
                                                               "Articles valables du 1er octobre 2020 au 1er octobre 2021",
                                                               "Archives législatives et réglementaires"]), ((date_courante_5 <
                                                                                                              date_of_numbers(2021, 10, 1)) and (date_courante_5 >=
                                                                                                                                                 date_of_numbers(2020, 10, 1)))):
                if copropriete:
                    temp_plafond_mensualite_d832_10_3_coproprietaires = (plafond_mensualite_d832_10_3_base *
                                                                         decimal_of_string("0.75"))
                else:
                    temp_plafond_mensualite_d832_10_3_coproprietaires = plafond_mensualite_d832_10_3_base
            else:
                temp_plafond_mensualite_d832_10_3_coproprietaires = dead_value
                raise EmptyError
        except EmptyError:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=2627, start_column=14,
                                                 end_line=2627, end_column=42, law_headings=["Article 24",
                                                                                             "Chapitre IV : Calcul de l'aide personnalisée au logement en secteur accession",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_5 >=
                                                                                                                                                                                                                   date_of_numbers(2021, 10, 1))):
                if copropriete:
                    temp_plafond_mensualite_d832_10_3_coproprietaires = (plafond_mensualite_d832_10_3_base *
                                                                         decimal_of_string("0.75"))
                else:
                    temp_plafond_mensualite_d832_10_3_coproprietaires = plafond_mensualite_d832_10_3_base
            else:
                temp_plafond_mensualite_d832_10_3_coproprietaires = dead_value
                raise EmptyError
    except EmptyError:
        temp_plafond_mensualite_d832_10_3_coproprietaires = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=709, start_column=10,
                                             end_line=709, end_column=25,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_mensualite_d832_10_3_coproprietaires = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                            "plafond_mensualité_d832_10_3_copropriétaires"],
                                                                           temp_plafond_mensualite_d832_10_3_coproprietaires)
    try:
        def temp_mensualite_minimale(_: Any):
            raise EmptyError

        def temp_mensualite_minimale_1(_: Any):
            return False

        def temp_mensualite_minimale_2(_: Any):
            match_arg_333 = type_travaux_logement
            if match_arg_333.code == TypeTravauxLogementD83215_Code.TravauxPourAcquisitionD832_15_1:
                _ = match_arg_333.value
                temp_mensualite_minimale_3 = False
            elif match_arg_333.code == TypeTravauxLogementD83215_Code.TravauxSurLogementDejaAcquisD832_15_2:
                _ = match_arg_333.value
                temp_mensualite_minimale_3 = True
            elif match_arg_333.code == TypeTravauxLogementD83215_Code.PasDeTravaux:
                _ = match_arg_333.value
                temp_mensualite_minimale_3 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=3549, start_column=5,
                                                 end_line=3549, end_column=75,
                                                 law_headings=["Article D832-15",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), temp_mensualite_minimale_3):
                return calcul_equivalence_loyer_minimale_dot_montant_1
            else:
                raise EmptyError

        def temp_mensualite_minimale_4(_: Any):
            match_arg_334 = type_travaux_logement
            if match_arg_334.code == TypeTravauxLogementD83215_Code.TravauxPourAcquisitionD832_15_1:
                _ = match_arg_334.value
                temp_mensualite_minimale_5 = False
            elif match_arg_334.code == TypeTravauxLogementD83215_Code.TravauxSurLogementDejaAcquisD832_15_2:
                _ = match_arg_334.value
                temp_mensualite_minimale_5 = False
            elif match_arg_334.code == TypeTravauxLogementD83215_Code.PasDeTravaux:
                _ = match_arg_334.value
                temp_mensualite_minimale_5 = True
            match_arg_335 = type_travaux_logement
            if match_arg_335.code == TypeTravauxLogementD83215_Code.TravauxPourAcquisitionD832_15_1:
                _ = match_arg_335.value
                temp_mensualite_minimale_6 = True
            elif match_arg_335.code == TypeTravauxLogementD83215_Code.TravauxSurLogementDejaAcquisD832_15_2:
                _ = match_arg_335.value
                temp_mensualite_minimale_6 = False
            elif match_arg_335.code == TypeTravauxLogementD83215_Code.PasDeTravaux:
                _ = match_arg_335.value
                temp_mensualite_minimale_6 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=3496, start_column=5,
                                                 end_line=3508, end_column=77,
                                                 law_headings=["Article D832-15",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), (temp_mensualite_minimale_6 or
                                                                                                                temp_mensualite_minimale_5)):
                if (decimal_of_money(ressources_menage_arrondies_3) <=
                    (decimal_of_money(montant_limite_tranches_d832_15_1) *
                        n_nombre_parts_d832_11_1)):
                    temp_mensualite_minimale_7 = (decimal_of_money(ressources_menage_arrondies_3) *
                                                  taux_tranche_inferieure_d832_15_1)
                else:
                    temp_mensualite_minimale_7 = ((decimal_of_money(montant_limite_tranches_d832_15_1) *
                                                   n_nombre_parts_d832_11_1) *
                                                  taux_tranche_inferieure_d832_15_1)
                if (decimal_of_money(ressources_menage_arrondies_3) >=
                    (decimal_of_money(montant_limite_tranches_d832_15_1) *
                        n_nombre_parts_d832_11_1)):
                    temp_mensualite_minimale_8 = ((decimal_of_money(ressources_menage_arrondies_3) -
                                                   (decimal_of_money(montant_limite_tranches_d832_15_1) *
                                                    n_nombre_parts_d832_11_1)) *
                                                  taux_tranche_superieure_d832_15_1)
                else:
                    temp_mensualite_minimale_8 = decimal_of_string("0.")
                return money_of_decimal(((temp_mensualite_minimale_8 +
                                          temp_mensualite_minimale_7) / decimal_of_string("12.")))
            else:
                raise EmptyError
        temp_mensualite_minimale_9 = handle_default([temp_mensualite_minimale_4,
                                                    temp_mensualite_minimale_2],
                                                    temp_mensualite_minimale_1,
                                                    temp_mensualite_minimale)
    except EmptyError:
        temp_mensualite_minimale_9 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=706, start_column=10,
                                             end_line=706, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    mensualite_minimale = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                   "mensualité_minimale"], temp_mensualite_minimale_9)
    try:
        temp_coefficient_prise_en_charge_d832_10_arrondi = (decimal_round(((coefficient_prise_en_charge_d832_10_formule -
                                                                            decimal_of_string("0.005")) * decimal_of_string("100."))) /
                                                            decimal_of_string("100."))
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_10_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=714, start_column=10,
                                             end_line=714, end_column=17,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_10_arrondi = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                           "coefficient_prise_en_charge_d832_10_arrondi"],
                                                                          temp_coefficient_prise_en_charge_d832_10_arrondi)
    try:
        def temp_traitement_aide_finale_abattement_1(param_16: Money):
            try:
                if ((log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                    "traitement_aide_finale_minoration_forfaitaire"],
                                  log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                           "traitement_aide_finale_minoration_forfaitaire",
                                                           "output"],
                                                          log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                          "traitement_aide_finale_minoration_forfaitaire"],
                                                                         traitement_aide_finale_minoration_forfaitaire_2,
                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                                                  "input"], param_16)))) -
                     log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                  "abattement_dépense_nette_minimale_d832_10"],
                                  log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                          "abattement_dépense_nette_minimale_d832_10", "output"],
                                                          log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "abattement_dépense_nette_minimale_d832_10"],
                                                                         abattement_depense_nette_minimale_d832_10,
                                                                         log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                 "abattement_dépense_nette_minimale_d832_10", "input"],
                                                                                                 log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                              "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                      "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                       "output"],
                                                                                                                                      log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                     traitement_aide_finale_minoration_forfaitaire_2,
                                                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                              "input"], param_16))))))))) >=
                        money_of_cents_string("0")):
                    return (log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                          "traitement_aide_finale_minoration_forfaitaire"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                  "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                 "traitement_aide_finale_minoration_forfaitaire"],
                                                                                traitement_aide_finale_minoration_forfaitaire_2,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                         "traitement_aide_finale_minoration_forfaitaire",
                                                                                                         "input"], param_16)))) -
                            log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                          "abattement_dépense_nette_minimale_d832_10"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                  "abattement_dépense_nette_minimale_d832_10",
                                                                  "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                 "abattement_dépense_nette_minimale_d832_10"],
                                                                                abattement_depense_nette_minimale_d832_10,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                         "abattement_dépense_nette_minimale_d832_10",
                                                                                                         "input"],
                                                                                                        log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                      "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                              "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                              "output"],
                                                                                                                                             log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                            traitement_aide_finale_minoration_forfaitaire_2,
                                                                                                                                                            log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                                     "input"], param_16)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=740,
                                                     start_column=10,
                                                     end_line=740,
                                                     end_column=20,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_abattement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=740, start_column=10,
                                             end_line=740, end_column=20,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_abattement_1 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                   "traitement_aide_finale_abattement"],
                                                                  temp_traitement_aide_finale_abattement_1)
    try:
        if (mensualite_principale >
                plafond_mensualite_d832_10_3_coproprietaires):
            temp_mensualite_eligible = plafond_mensualite_d832_10_3_coproprietaires
        else:
            temp_mensualite_eligible = mensualite_principale
    except EmptyError:
        temp_mensualite_eligible = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=705, start_column=10,
                                             end_line=705, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    mensualite_eligible = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                   "mensualité_éligible"], temp_mensualite_eligible)
    try:
        if (coefficient_prise_en_charge_d832_10_arrondi >=
                decimal_of_string("0.95")):
            temp_coefficient_prise_en_charge_d832_10_seuil = decimal_of_string(
                "0.95")
        else:
            temp_coefficient_prise_en_charge_d832_10_seuil = coefficient_prise_en_charge_d832_10_arrondi
    except EmptyError:
        temp_coefficient_prise_en_charge_d832_10_seuil = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=715, start_column=10,
                                             end_line=715, end_column=15,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_d832_10_seuil = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "coefficient_prise_en_charge_d832_10_seuil"],
                                                                        temp_coefficient_prise_en_charge_d832_10_seuil)
    try:
        def temp_traitement_aide_finale_contributions_sociales_arrondi_2(param_17: Money):
            try:
                if ((money_round(((log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                    "traitement_aide_finale_abattement"],
                                                log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "traitement_aide_finale_abattement", "output"],
                                                                        log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                        "traitement_aide_finale_abattement"],
                                                                                       traitement_aide_finale_abattement_1,
                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                "traitement_aide_finale_abattement", "input"],
                                                                                                               param_17)))) -
                                   log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                 "montant"],
                                 log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                         log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_2,
                                                                        log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                              "traitement_aide_finale_abattement"],
                                                                                                log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                         "traitement_aide_finale_abattement", "output"],
                                                                                                                        log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                        "traitement_aide_finale_abattement"],
                                                                                                                                       traitement_aide_finale_abattement_1,
                                                                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                "traitement_aide_finale_abattement", "input"],
                                                                                                                                       param_17))))))))) - money_of_cents_string("50"))) +
                     log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                  "montant"],
                                  log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                          log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_2,
                                                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                 log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                              "traitement_aide_finale_abattement"],
                                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                      "traitement_aide_finale_abattement", "output"],
                                                                                                                                      log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                     "traitement_aide_finale_abattement"],
                                                                                                                                                     traitement_aide_finale_abattement_1,
                                                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                             "traitement_aide_finale_abattement", "input"],
                                                                                                                                                                             param_17))))))))) >=
                        money_of_cents_string("0")):
                    return (money_round(((log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                        "traitement_aide_finale_abattement"],
                                                       log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                "traitement_aide_finale_abattement", "output"],
                                                                               log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                               "traitement_aide_finale_abattement"],
                                                                                              traitement_aide_finale_abattement_1,
                                                                                              log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                       "traitement_aide_finale_abattement", "input"],
                                                                                                                      param_17)))) -
                                          log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                        "montant"],
                                                       log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                "montant", "output"],
                                                                               log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                               "montant"], contributions_sociales_dot_montant_2,
                                                                                              log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                                       "montant", "input"],
                                                                                                                      log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                    "traitement_aide_finale_abattement"],
                                                                                                                                   log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                            "traitement_aide_finale_abattement", "output"],
                                                                                                                                                           log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                           "traitement_aide_finale_abattement"],
                                                                                                                                                                          traitement_aide_finale_abattement_1,
                                                                                                                                                                          log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                                                   "traitement_aide_finale_abattement", "input"],
                                                                                                                                                                                                  param_17))))))))) - money_of_cents_string("50"))) +
                            log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                          "montant"],
                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                  "montant", "output"],
                                                                 log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                 "montant"], contributions_sociales_dot_montant_2,
                                                                                log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                         "montant", "input"],
                                                                                                        log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                      "traitement_aide_finale_abattement"],
                                                                                                                     log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                              "traitement_aide_finale_abattement", "output"],
                                                                                                                                             log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                             "traitement_aide_finale_abattement"],
                                                                                                                                                            traitement_aide_finale_abattement_1,
                                                                                                                                                            log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                                                                                                     "traitement_aide_finale_abattement", "input"],
                                                                                                                                                                                    param_17)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=741,
                                                     start_column=10,
                                                     end_line=741,
                                                     end_column=40,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_contributions_sociales_arrondi_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=741, start_column=10,
                                             end_line=741, end_column=40,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_2 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                       "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                                      temp_traitement_aide_finale_contributions_sociales_arrondi_2)
    try:
        if ((((mensualite_eligible + montant_forfaitaire_charges_d832_10) -
            mensualite_minimale) *
            coefficient_prise_en_charge_d832_10_seuil) <
                money_of_cents_string("0")):
            temp_aide_finale_formule_2 = money_of_cents_string("0")
        else:
            temp_aide_finale_formule_2 = (((mensualite_eligible +
                                            montant_forfaitaire_charges_d832_10) - mensualite_minimale) *
                                          coefficient_prise_en_charge_d832_10_seuil)
    except EmptyError:
        temp_aide_finale_formule_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=737, start_column=10,
                                             end_line=737, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_2 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                     "aide_finale_formule"], temp_aide_finale_formule_2)
    try:
        def temp_traitement_aide_finale_montant_minimal_2(param_18: Money):
            try:
                if (log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                    "traitement_aide_finale_contributions_sociales_arrondi"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                          "traitement_aide_finale_contributions_sociales_arrondi",
                                                          "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                        traitement_aide_finale_contributions_sociales_arrondi_2,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                 "input"], param_18)))) <
                        montant_minimal_aide_d832_10):
                    return money_of_cents_string("0")
                else:
                    return log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                 "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                               traitement_aide_finale_contributions_sociales_arrondi_2,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                        "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                        "input"], param_18))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=742,
                                                     start_column=10,
                                                     end_line=742,
                                                     end_column=25,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_montant_minimal_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=742, start_column=10,
                                             end_line=742, end_column=25,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_2 = log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                        "traitement_aide_finale_montant_minimal"],
                                                                       temp_traitement_aide_finale_montant_minimal_2)
    return CalculAidePersonnaliseeLogementAccessionProprieteOut(mensualite_eligible_out=mensualite_eligible,
                                                                mensualite_minimale_out=mensualite_minimale,
                                                                coefficient_prise_en_charge_d832_10_seuil_out=coefficient_prise_en_charge_d832_10_seuil,
                                                                aide_finale_formule_out=aide_finale_formule_2,
                                                                traitement_aide_finale_montant_minimal_out=traitement_aide_finale_montant_minimal_2)


def eligibilite_aides_personnelle_logement(eligibilite_aides_personnelle_logement_in: EligibiliteAidesPersonnelleLogementIn):
    menage = eligibilite_aides_personnelle_logement_in.menage_in
    demandeur = eligibilite_aides_personnelle_logement_in.demandeur_in
    date_courante_6 = eligibilite_aides_personnelle_logement_in.date_courante_in
    condition_logement_residence_principale = eligibilite_aides_personnelle_logement_in.condition_logement_residence_principale_in
    condition_logement_surface = eligibilite_aides_personnelle_logement_in.condition_logement_surface_in
    try:
        def temp_condition_pret(param_19: Pret):
            try:
                return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=317,
                                                     start_column=11,
                                                     end_line=317,
                                                     end_column=25,
                                                     law_headings=["Éligibilité aux aides personnelles au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_condition_pret = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=317, start_column=11,
                                             end_line=317, end_column=25,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_pret = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                              "condition_prêt"], temp_condition_pret)
    try:
        temp_condition_peuplement_logement_l822_10 = False
    except EmptyError:
        temp_condition_peuplement_logement_l822_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=328, start_column=11,
                                             end_line=328, end_column=48,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_peuplement_logement_l822_10 = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                     "condition_peuplement_logement_l822_10"],
                                                                    temp_condition_peuplement_logement_l822_10)
    try:
        temp_seuil_l822_3_parts_propriete = decimal_of_string("0.1")
    except EmptyError:
        temp_seuil_l822_3_parts_propriete = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=339, start_column=11,
                                             end_line=339, end_column=39,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    seuil_l822_3_parts_propriete = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                            "seuil_l822_3_parts_propriété"], temp_seuil_l822_3_parts_propriete)
    try:
        temp_seuil_l822_3_parts_usufruit = decimal_of_string("0.1")
    except EmptyError:
        temp_seuil_l822_3_parts_usufruit = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=340, start_column=11,
                                             end_line=340, end_column=38,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    seuil_l822_3_parts_usufruit = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                           "seuil_l822_3_parts_usufruit"], temp_seuil_l822_3_parts_usufruit)
    try:
        temp_seuil_l822_5_patrimoine = money_of_cents_string("3000000")
    except EmptyError:
        temp_seuil_l822_5_patrimoine = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=341, start_column=11,
                                             end_line=341, end_column=34,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    seuil_l822_5_patrimoine = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                       "seuil_l822_5_patrimoine"], temp_seuil_l822_5_patrimoine)
    try:
        match_arg_336 = menage.logement.usufruit
        if match_arg_336.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
            parts = match_arg_336.value
            temp_usufruit_ou_propriete_famille = True
        elif match_arg_336.code == ParentOuAutre_Code.Autre:
            _ = match_arg_336.value
            temp_usufruit_ou_propriete_famille = False
        match_arg_337 = menage.logement.proprietaire
        if match_arg_337.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
            parts_1 = match_arg_337.value
            temp_usufruit_ou_propriete_famille_1 = True
        elif match_arg_337.code == ParentOuAutre_Code.Autre:
            _ = match_arg_337.value
            temp_usufruit_ou_propriete_famille_1 = False
        temp_usufruit_ou_propriete_famille_2 = (temp_usufruit_ou_propriete_famille_1 or
                                                temp_usufruit_ou_propriete_famille)
    except EmptyError:
        temp_usufruit_ou_propriete_famille_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=338, start_column=11,
                                             end_line=338, end_column=40,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    usufruit_ou_propriete_famille = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                             "usufruit_ou_propriété_famille"],
                                                            temp_usufruit_ou_propriete_famille_2)
    try:
        match_arg_338 = menage.situation_familiale
        if match_arg_338.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_338.value
            temp_nombre_personnes_logement = integer_of_string("1")
        elif match_arg_338.code == SituationFamiliale_Code.Maries:
            _ = match_arg_338.value
            temp_nombre_personnes_logement = integer_of_string("2")
        elif match_arg_338.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_338.value
            temp_nombre_personnes_logement = integer_of_string("2")
        elif match_arg_338.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_338.value
            temp_nombre_personnes_logement = integer_of_string("2")
        elif match_arg_338.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_338.value
            temp_nombre_personnes_logement = integer_of_string("1")
        elif match_arg_338.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_338.value
            temp_nombre_personnes_logement = integer_of_string("2")
        temp_nombre_personnes_logement_1 = ((temp_nombre_personnes_logement +
                                             menage.nombre_autres_occupants_logement) +
                                            list_length(menage.personnes_a_charge))
    except EmptyError:
        temp_nombre_personnes_logement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=337, start_column=11,
                                             end_line=337, end_column=36,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    nombre_personnes_logement = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                         "nombre_personnes_logement"], temp_nombre_personnes_logement_1)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=358, start_column=18, end_line=358, end_column=61,
                                                 law_headings=["Article L822-9",
                                                               "Chapitre II : Conditions générales d'attribution",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie législative",
                                                               "Code de la construction et de l'habitation"]), not menage.logement.logement_decent_l89_462):
                temp_condition_non_ouverture_l822_9_decence_logement = True
            else:
                temp_condition_non_ouverture_l822_9_decence_logement = dead_value
                raise EmptyError
        except EmptyError:
            temp_condition_non_ouverture_l822_9_decence_logement = False
    except EmptyError:
        temp_condition_non_ouverture_l822_9_decence_logement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=326, start_column=11,
                                             end_line=326, end_column=58,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_non_ouverture_l822_9_decence_logement = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                               "condition_non_ouverture_l822_9_decence_logement"],
                                                                              temp_condition_non_ouverture_l822_9_decence_logement)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=344, start_column=18, end_line=344, end_column=67,
                                                 law_headings=["Article L822-8",
                                                               "Chapitre II : Conditions générales d'attribution",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie législative",
                                                               "Code de la construction et de l'habitation"]), menage.condition_rattache_foyer_fiscal_parent_ifi):
                temp_condition_non_ouverture_l822_8 = True
            else:
                temp_condition_non_ouverture_l822_8 = dead_value
                raise EmptyError
        except EmptyError:
            temp_condition_non_ouverture_l822_8 = False
    except EmptyError:
        temp_condition_non_ouverture_l822_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=325, start_column=11,
                                             end_line=325, end_column=41,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_non_ouverture_l822_8 = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                              "condition_non_ouverture_l822_8"],
                                                             temp_condition_non_ouverture_l822_8)
    try:
        match_arg_339 = menage.situation_familiale
        if match_arg_339.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_339.value
            temp_condition_logement_surface_minimale_sans_seuil_m_carres = integer_of_string(
                "9")
        elif match_arg_339.code == SituationFamiliale_Code.Maries:
            _ = match_arg_339.value
            temp_condition_logement_surface_minimale_sans_seuil_m_carres = integer_of_string(
                "16")
        elif match_arg_339.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_339.value
            temp_condition_logement_surface_minimale_sans_seuil_m_carres = integer_of_string(
                "16")
        elif match_arg_339.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_339.value
            temp_condition_logement_surface_minimale_sans_seuil_m_carres = integer_of_string(
                "16")
        elif match_arg_339.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_339.value
            temp_condition_logement_surface_minimale_sans_seuil_m_carres = integer_of_string(
                "9")
        elif match_arg_339.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_339.value
            temp_condition_logement_surface_minimale_sans_seuil_m_carres = integer_of_string(
                "16")
        temp_condition_logement_surface_minimale_sans_seuil_m_carres_1 = (temp_condition_logement_surface_minimale_sans_seuil_m_carres +
                                                                          ((menage.nombre_autres_occupants_logement +
                                                                            list_length(menage.personnes_a_charge)) *
                                                                              integer_of_string("9")))
    except EmptyError:
        temp_condition_logement_surface_minimale_sans_seuil_m_carres_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=322, start_column=11,
                                             end_line=322, end_column=66,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_surface_minimale_sans_seuil_m_carres = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                       "condition_logement_surface_minimale_sans_seuil_m_carrés"],
                                                                                      temp_condition_logement_surface_minimale_sans_seuil_m_carres_1)
    try:
        try:
            try:
                match_arg_340 = menage.logement.loue_ou_sous_loue_a_des_tiers
                if match_arg_340.code == LoueOuSousLoueADesTiers_Code.Non:
                    _ = match_arg_340.value
                    temp_condition_logement_location_tiers = True
                elif match_arg_340.code == LoueOuSousLoueADesTiers_Code.Oui:
                    personne = match_arg_340.value
                    temp_condition_logement_location_tiers = ((personne.age_personne_sous_location <=
                                                               integer_of_string("30")) or
                                                              personne.conforme_article_l442_1)
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=203, start_column=5,
                                                     end_line=207, end_column=39,
                                                     law_headings=["Article L822-4",
                                                                   "Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_location_tiers):
                    temp_condition_logement_location_tiers_1 = True
                else:
                    temp_condition_logement_location_tiers_1 = dead_value
                    raise EmptyError
            except EmptyError:
                match_arg_341 = menage.logement.loue_ou_sous_loue_a_des_tiers
                if match_arg_341.code == LoueOuSousLoueADesTiers_Code.Non:
                    _ = match_arg_341.value
                    temp_condition_logement_location_tiers_2 = True
                elif match_arg_341.code == LoueOuSousLoueADesTiers_Code.Oui:
                    _ = match_arg_341.value
                    temp_condition_logement_location_tiers_2 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=197, start_column=5,
                                                     end_line=198, end_column=34,
                                                     law_headings=["Article L822-4",
                                                                   "Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_location_tiers_2):
                    temp_condition_logement_location_tiers_1 = False
                else:
                    temp_condition_logement_location_tiers_1 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_logement_location_tiers_1 = False
    except EmptyError:
        temp_condition_logement_location_tiers_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=321, start_column=11,
                                             end_line=321, end_column=44,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_location_tiers = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                 "condition_logement_location_tiers"],
                                                                temp_condition_logement_location_tiers_1)
    try:
        try:
            temp_condition_logement_residence_principale = condition_logement_residence_principale(
                Unit())
        except EmptyError:
            try:
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=46, start_column=5,
                                                     end_line=46, end_column=41,
                                                     law_headings=["Article L821-2",
                                                                   "Sous-section 1 : Aides personnelles au logement",
                                                                   "Section 2 : Règles de non-cumul",
                                                                   "Chapitre Ier : Principes généraux",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), menage.logement.residence_principale):
                    temp_condition_logement_residence_principale = True
                else:
                    temp_condition_logement_residence_principale = dead_value
                    raise EmptyError
            except EmptyError:
                temp_condition_logement_residence_principale = False
    except EmptyError:
        temp_condition_logement_residence_principale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=319, start_column=12,
                                             end_line=319, end_column=51,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_residence_principale_1 = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                         "condition_logement_résidence_principale"],
                                                                        temp_condition_logement_residence_principale)
    try:
        temp_ouverture_droits_retraite_dot_date_naissance_assure = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                            "ouverture_droits_retraite.date_naissance_assuré"],
                                                                                           demandeur.date_naissance)
    except EmptyError:
        temp_ouverture_droits_retraite_dot_date_naissance_assure = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1035,
                                             start_column=10, end_line=1035,
                                             end_column=31,
                                             law_headings=["Date d'ouverture des droits à la retraite",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    ouverture_droits_retraite_dot_date_naissance_assure = temp_ouverture_droits_retraite_dot_date_naissance_assure
    result_7 = log_end_call(["ÉligibilitéAidesPersonnelleLogement",
                             "ouverture_droits_retraite", "OuvertureDroitsRetraite"],
                            log_begin_call(["ÉligibilitéAidesPersonnelleLogement",
                                            "ouverture_droits_retraite", "OuvertureDroitsRetraite"],
                                           ouverture_droits_retraite,
                                           OuvertureDroitsRetraiteIn(date_naissance_assure_in=ouverture_droits_retraite_dot_date_naissance_assure)))
    ouverture_droits_retraite_dot_age_ouverture_droit = result_7.age_ouverture_droit_out
    try:
        temp_patrimoine_total_demandeur = (demandeur.patrimoine.produisant_revenu_periode_r822_3_3_r822_4 +
                                           demandeur.patrimoine.ne_produisant_pas_revenu_periode_r822_3_3_r822_4)
    except EmptyError:
        temp_patrimoine_total_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=336, start_column=11,
                                             end_line=336, end_column=37,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    patrimoine_total_demandeur = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                          "patrimoine_total_demandeur"], temp_patrimoine_total_demandeur)
    try:
        try:
            match_arg_342 = demandeur.nationalite
            if match_arg_342.code == Nationalite_Code.Francaise:
                _ = match_arg_342.value
                temp_condition_nationalite = True
            elif match_arg_342.code == Nationalite_Code.Etrangere:
                _ = match_arg_342.value
                temp_condition_nationalite = demandeur.satisfait_conditions_l512_2_code_securite_sociale
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=108, start_column=5, end_line=110, end_column=78,
                                                 law_headings=["Article L822-2",
                                                               "Chapitre II : Conditions générales d'attribution",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie législative",
                                                               "Code de la construction et de l'habitation"]), temp_condition_nationalite):
                temp_condition_nationalite_1 = True
            else:
                temp_condition_nationalite_1 = dead_value
                raise EmptyError
        except EmptyError:
            temp_condition_nationalite_1 = False
    except EmptyError:
        temp_condition_nationalite_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=318, start_column=11,
                                             end_line=318, end_column=32,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_nationalite = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                     "condition_nationalité"], temp_condition_nationalite_1)
    try:
        def temp_plafond_individuel_l815_9_secu(_: Any):
            raise EmptyError

        def temp_plafond_individuel_l815_9_secu_1(_: Any):
            return False

        def temp_plafond_individuel_l815_9_secu_2(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                                 start_line=70, start_column=5, end_line=71, end_column=34,
                                                 law_headings=["Allocation de solidarité aux personnes âgées",
                                                               "Circulaire de la CNAV 2021-1 du 11/01/2021 \"Revalorisation à compter du 1er janvier 2021\""]), ((date_courante_6 >=
                                                                                                                                                                  date_of_numbers(2021, 1, 1)) and (date_courante_6 <
                                                                                                                                                                                                    date_of_numbers(2022, 1, 1)))):
                return money_of_cents_string("1088175")
            else:
                raise EmptyError

        def temp_plafond_individuel_l815_9_secu_3(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/autres_sources.catala_fr",
                                                 start_line=33, start_column=5, end_line=34, end_column=34,
                                                 law_headings=["Allocation de solidarité aux personnes âgées",
                                                               "Circulaire de la CNAV 2022-3 du 11/01/2022 \"Revalorisation à compter du 1er janvier 2022\""]), ((date_courante_6 >=
                                                                                                                                                                  date_of_numbers(2022, 1, 1)) and (date_courante_6 <
                                                                                                                                                                                                    date_of_numbers(2023, 1, 1)))):
                return money_of_cents_string("1100144")
            else:
                raise EmptyError

        def temp_plafond_individuel_l815_9_secu_4(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=339, start_column=5, end_line=340, end_column=35,
                                                 law_headings=["Article D815-1",
                                                               "Section 1 : Ouverture du droit et liquidation de l'allocation de solidarité aux personnes âgées",
                                                               "Chapitre 5 : Allocation de solidarité aux personnes âgées",
                                                               "Titre I : Allocations aux personnes âgées",
                                                               "Livre VIII : Allocations aux personnes âgées - Allocation aux adultes handicapés - Aides à l'emploi pour la garde des jeunes enfants - Protection complémentaire en matière de santé",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((date_courante_6 >=
                                                                                                  date_of_numbers(2020, 1, 4)) and (date_courante_6 <
                                                                                                                                    date_of_numbers(2021, 1, 1)))):
                return money_of_cents_string("1083840")
            else:
                raise EmptyError

        def temp_plafond_individuel_l815_9_secu_5(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=334, start_column=5, end_line=335, end_column=35,
                                                 law_headings=["Article D815-1",
                                                               "Section 1 : Ouverture du droit et liquidation de l'allocation de solidarité aux personnes âgées",
                                                               "Chapitre 5 : Allocation de solidarité aux personnes âgées",
                                                               "Titre I : Allocations aux personnes âgées",
                                                               "Livre VIII : Allocations aux personnes âgées - Allocation aux adultes handicapés - Aides à l'emploi pour la garde des jeunes enfants - Protection complémentaire en matière de santé",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((date_courante_6 >=
                                                                                                  date_of_numbers(2019, 1, 1)) and (date_courante_6 <
                                                                                                                                    date_of_numbers(2020, 1, 1)))):
                return money_of_cents_string("1041840")
            else:
                raise EmptyError

        def temp_plafond_individuel_l815_9_secu_6(_: Any):
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_sécurité_sociale.catala_fr",
                                                 start_line=329, start_column=5, end_line=330, end_column=35,
                                                 law_headings=["Article D815-1",
                                                               "Section 1 : Ouverture du droit et liquidation de l'allocation de solidarité aux personnes âgées",
                                                               "Chapitre 5 : Allocation de solidarité aux personnes âgées",
                                                               "Titre I : Allocations aux personnes âgées",
                                                               "Livre VIII : Allocations aux personnes âgées - Allocation aux adultes handicapés - Aides à l'emploi pour la garde des jeunes enfants - Protection complémentaire en matière de santé",
                                                               "Partie réglementaire - Décrets simples",
                                                               "Code de la sécurité sociale"]), ((date_courante_6 >=
                                                                                                  date_of_numbers(2018, 1, 4)) and (date_courante_6 <
                                                                                                                                    date_of_numbers(2019, 1, 1)))):
                return money_of_cents_string("999840")
            else:
                raise EmptyError
        temp_plafond_individuel_l815_9_secu_7 = handle_default([temp_plafond_individuel_l815_9_secu_6,
                                                               temp_plafond_individuel_l815_9_secu_5,
                                                               temp_plafond_individuel_l815_9_secu_4,
                                                               temp_plafond_individuel_l815_9_secu_3,
                                                               temp_plafond_individuel_l815_9_secu_2],
                                                               temp_plafond_individuel_l815_9_secu_1,
                                                               temp_plafond_individuel_l815_9_secu)
    except EmptyError:
        temp_plafond_individuel_l815_9_secu_7 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=345, start_column=11,
                                             end_line=345, end_column=41,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_individuel_l815_9_secu = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                              "plafond_individuel_l815_9_sécu"],
                                                             temp_plafond_individuel_l815_9_secu_7)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=381, start_column=18, end_line=381, end_column=55,
                                                 law_headings=["Article L822-10",
                                                               "Chapitre II : Conditions générales d'attribution",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie législative",
                                                               "Code de la construction et de l'habitation"]), condition_peuplement_logement_l822_10):
                temp_condition_non_ouverture_l822_10_peuplement_logement = True
            else:
                temp_condition_non_ouverture_l822_10_peuplement_logement = dead_value
                raise EmptyError
        except EmptyError:
            temp_condition_non_ouverture_l822_10_peuplement_logement = False
    except EmptyError:
        temp_condition_non_ouverture_l822_10_peuplement_logement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=327, start_column=11,
                                             end_line=327, end_column=62,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_non_ouverture_l822_10_peuplement_logement = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                   "condition_non_ouverture_l822_10_peuplement_logement"],
                                                                                  temp_condition_non_ouverture_l822_10_peuplement_logement)
    try:
        try:
            try:
                try:
                    match_arg_343 = menage.logement.usufruit
                    if match_arg_343.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
                        parts_2 = match_arg_343.value
                        temp_condition_logement_mode_occupation = parts_2
                    elif match_arg_343.code == ParentOuAutre_Code.Autre:
                        _ = match_arg_343.value
                        temp_condition_logement_mode_occupation = decimal_of_string(
                            "0.")
                    match_arg_344 = menage.logement.proprietaire
                    if match_arg_344.code == ParentOuAutre_Code.DemandeurOuConjointOuParentOuViaPartsSocietes:
                        parts_3 = match_arg_344.value
                        temp_condition_logement_mode_occupation_1 = parts_3
                    elif match_arg_344.code == ParentOuAutre_Code.Autre:
                        _ = match_arg_344.value
                        temp_condition_logement_mode_occupation_1 = decimal_of_string(
                            "0.")
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=171, start_column=5,
                                                         end_line=177, end_column=66,
                                                         law_headings=["Article L822-3",
                                                                       "Chapitre II : Conditions générales d'attribution",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), (usufruit_ou_propriete_famille and
                                                                                                                        ((temp_condition_logement_mode_occupation_1 <
                                                                                                                          seuil_l822_3_parts_propriete) and
                                                                                                                         (temp_condition_logement_mode_occupation <
                                                                                                                          seuil_l822_3_parts_usufruit)))):
                        temp_condition_logement_mode_occupation_2 = True
                    else:
                        temp_condition_logement_mode_occupation_2 = dead_value
                        raise EmptyError
                except EmptyError:
                    match_arg_345 = menage.logement.mode_occupation
                    if match_arg_345.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_345.value
                        temp_condition_logement_mode_occupation_3 = usufruit_ou_propriete_famille
                    elif match_arg_345.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_345.value
                        temp_condition_logement_mode_occupation_3 = False
                    elif match_arg_345.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_345.value
                        temp_condition_logement_mode_occupation_3 = False
                    elif match_arg_345.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_345.value
                        temp_condition_logement_mode_occupation_3 = False
                    elif match_arg_345.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_345.value
                        temp_condition_logement_mode_occupation_3 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=156, start_column=5,
                                                         end_line=158, end_column=30,
                                                         law_headings=["Article L822-3",
                                                                       "Chapitre II : Conditions générales d'attribution",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_mode_occupation_3):
                        temp_condition_logement_mode_occupation_2 = False
                    else:
                        temp_condition_logement_mode_occupation_2 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_346 = menage.logement.mode_occupation
                if match_arg_346.code == ModeOccupation_Code.Locataire:
                    _ = match_arg_346.value
                    temp_condition_logement_mode_occupation_4 = True
                elif match_arg_346.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_346.value
                    temp_condition_logement_mode_occupation_4 = True
                elif match_arg_346.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    _ = match_arg_346.value
                    temp_condition_logement_mode_occupation_4 = menage.logement.residence_principale
                elif match_arg_346.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_346.value
                    temp_condition_logement_mode_occupation_4 = True
                elif match_arg_346.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_346.value
                    temp_condition_logement_mode_occupation_4 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=125, start_column=5,
                                                     end_line=131, end_column=33,
                                                     law_headings=["Article L822-2",
                                                                   "Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_mode_occupation_4):
                    temp_condition_logement_mode_occupation_2 = True
                else:
                    temp_condition_logement_mode_occupation_2 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_logement_mode_occupation_2 = False
    except EmptyError:
        temp_condition_logement_mode_occupation_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=320, start_column=11,
                                             end_line=320, end_column=45,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_mode_occupation = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                  "condition_logement_mode_occupation"],
                                                                 temp_condition_logement_mode_occupation_2)
    try:
        try:
            temp_condition_logement_surface = condition_logement_surface(
                Unit())
        except EmptyError:
            try:
                if ((condition_logement_surface_minimale_sans_seuil_m_carres >=
                    integer_of_string("70")) and
                    (nombre_personnes_logement >=
                        integer_of_string("8"))):
                    temp_condition_logement_surface_1 = (menage.logement.surface_m_carres >=
                                                         integer_of_string("70"))
                else:
                    temp_condition_logement_surface_1 = (menage.logement.surface_m_carres >=
                                                         condition_logement_surface_minimale_sans_seuil_m_carres)
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=1057, start_column=5,
                                                     end_line=1064, end_column=65,
                                                     law_headings=["Article R822-25",
                                                                   "Section 3 : Conditions relatives au logement",
                                                                   "Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_surface_1):
                    temp_condition_logement_surface = True
                else:
                    temp_condition_logement_surface = dead_value
                    raise EmptyError
            except EmptyError:
                temp_condition_logement_surface = False
    except EmptyError:
        temp_condition_logement_surface = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=324, start_column=12,
                                             end_line=324, end_column=38,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_surface_1 = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                            "condition_logement_surface"], temp_condition_logement_surface)
    try:
        temp_age_l161_17_2_secu = ouverture_droits_retraite_dot_age_ouverture_droit
    except EmptyError:
        temp_age_l161_17_2_secu = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=344, start_column=11,
                                             end_line=344, end_column=29,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    age_l161_17_2_secu = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                  "âge_l161_17_2_sécu"], temp_age_l161_17_2_secu)
    try:
        try:
            try:
                try:
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=285, start_column=18,
                                                         end_line=285, end_column=75,
                                                         law_headings=["Article L822-5",
                                                                       "Chapitre II : Conditions générales d'attribution",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), menage.logement.est_ehpad_ou_maison_autonomie_l313_12_asf):
                        temp_patrimoine_pris_en_compte = money_of_cents_string(
                            "0")
                    else:
                        temp_patrimoine_pris_en_compte = dead_value
                        raise EmptyError
                except EmptyError:
                    def temp_patrimoine_pris_en_compte_1(acc_2: bool, prestation: Any):
                        return (acc_2 or ((prestation ==
                                           PrestationRecue(PrestationRecue_Code.AllocationSoutienEnfantHandicape,
                                                           Unit())) or (prestation ==
                                                                        PrestationRecue(PrestationRecue_Code.AllocationAdulteHandicape,
                                                                                        Unit()))))
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=266, start_column=18,
                                                         end_line=268, end_column=45,
                                                         law_headings=["Article L822-5",
                                                                       "Chapitre II : Conditions générales d'attribution",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), list_fold_left(
                            temp_patrimoine_pris_en_compte_1, False,
                            menage.prestations_recues)):
                        temp_patrimoine_pris_en_compte = money_of_cents_string(
                            "0")
                    else:
                        temp_patrimoine_pris_en_compte = dead_value
                        raise EmptyError
            except EmptyError:
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=943, start_column=5,
                                                     end_line=943, end_column=59,
                                                     law_headings=["Article R822-22",
                                                                   "Sous-section 4 : Prise en compte du patrimoine",
                                                                   "Section 2 : Conditions relatives aux ressources",
                                                                   "Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), (patrimoine_total_demandeur >=
                                                                                                                    seuil_l822_5_patrimoine)):
                    temp_patrimoine_pris_en_compte = demandeur.patrimoine.ne_produisant_pas_revenu_periode_r822_3_3_r822_4
                else:
                    temp_patrimoine_pris_en_compte = dead_value
                    raise EmptyError
        except EmptyError:
            if (patrimoine_total_demandeur >
                    seuil_l822_5_patrimoine):
                temp_patrimoine_pris_en_compte = patrimoine_total_demandeur
            else:
                temp_patrimoine_pris_en_compte = money_of_cents_string("0")
    except EmptyError:
        temp_patrimoine_pris_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=342, start_column=11,
                                             end_line=342, end_column=36,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    patrimoine_pris_en_compte = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                         "patrimoine_pris_en_compte"], temp_patrimoine_pris_en_compte)
    try:
        try:
            try:
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=72, start_column=5,
                                                     end_line=74, end_column=56,
                                                     law_headings=["Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), (condition_non_ouverture_l822_8 or
                                                                                                                    (condition_non_ouverture_l822_9_decence_logement or
                                                                                                                     condition_non_ouverture_l822_10_peuplement_logement))):
                    temp_eligibilite_logement = False
                else:
                    temp_eligibilite_logement = dead_value
                    raise EmptyError
            except EmptyError:
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=65, start_column=5,
                                                     end_line=68, end_column=31,
                                                     law_headings=["Chapitre II : Conditions générales d'attribution",
                                                                   "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), (condition_logement_residence_principale_1 and
                                                                                                                    (condition_logement_mode_occupation and
                                                                                                                     (condition_logement_location_tiers and
                                                                                                                      condition_logement_surface_1)))):
                    temp_eligibilite_logement = True
                else:
                    temp_eligibilite_logement = dead_value
                    raise EmptyError
        except EmptyError:
            temp_eligibilite_logement = False
    except EmptyError:
        temp_eligibilite_logement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=329, start_column=11,
                                             end_line=329, end_column=31,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_logement = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                    "éligibilité_logement"], temp_eligibilite_logement)
    try:
        temp_age_l351_8_1_secu = (age_l161_17_2_secu +
                                  duration_of_numbers(5, 0, 0))
    except EmptyError:
        temp_age_l351_8_1_secu = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=343, start_column=11,
                                             end_line=343, end_column=28,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    age_l351_8_1_secu = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                 "âge_l351_8_1_sécu"], temp_age_l351_8_1_secu)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                 start_line=358, start_column=5, end_line=360, end_column=25,
                                                 law_headings=["Éligibilité aux aides personnelles au logement",
                                                               "Déclarations des champs d'application",
                                                               "Prologue : aides au logement"]), (condition_nationalite and
                                                                                                  (condition_logement_mode_occupation and
                                                                                                   eligibilite_logement))):
                temp_eligibilite = True
            else:
                temp_eligibilite = dead_value
                raise EmptyError
        except EmptyError:
            temp_eligibilite = False
    except EmptyError:
        temp_eligibilite = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=348, start_column=10,
                                             end_line=348, end_column=21,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                           "éligibilité"], temp_eligibilite)
    try:
        def temp_condition_2_r823_4(param_20: PersonneACharge):
            try:
                try:
                    match_arg_347 = param_20
                    if match_arg_347.code == PersonneACharge_Code.EnfantACharge:
                        enfant = match_arg_347.value
                        temp_condition_2_r823_4_1 = False
                    elif match_arg_347.code == PersonneACharge_Code.AutrePersonneACharge:
                        parent = match_arg_347.value
                        temp_condition_2_r823_4_1 = ((parent.parente ==
                                                      Parente(Parente_Code.Ascendant, Unit())) and
                                                     ((parent.ressources <=
                                                       (plafond_individuel_l815_9_secu *
                                                        decimal_of_string("1.25"))) and
                                                      ((((parent.date_naissance + age_l351_8_1_secu) <=
                                                         date_courante_6) or
                                                        (parent.titulaire_allocation_personne_agee and
                                                          ((parent.date_naissance +
                                                            duration_of_numbers(65, 0, 0)) <=
                                                              date_courante_6))) or (((parent.date_naissance +
                                                                                       age_l161_17_2_secu) <= date_courante_6) and
                                                       parent.beneficiaire_l161_19_l351_8_l643_3_secu))))
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1173, start_column=5,
                                                         end_line=1189, end_column=10,
                                                         law_headings=["Article R823-4",
                                                                       "Section 1 : Calcul, liquidation et versement des aides",
                                                                       "Chapitre III : Modalités de liquidation et de versement",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_2_r823_4_1):
                        return True
                    else:
                        raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=352,
                                                     start_column=10,
                                                     end_line=352,
                                                     end_column=28,
                                                     law_headings=["Éligibilité aux aides personnelles au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_condition_2_r823_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=352, start_column=10,
                                             end_line=352, end_column=28,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_2_r823_4 = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                  "condition_2_r823_4"], temp_condition_2_r823_4)
    try:
        def temp_prise_en_compte_personne_a_charge(param_21: PersonneACharge):
            try:
                def temp_prise_en_compte_personne_a_charge_1(_: Any):
                    return False

                def temp_prise_en_compte_personne_a_charge_2(_: Any):
                    return log_decision_taken(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                             start_line=330, start_column=11,
                                                             end_line=330, end_column=44,
                                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                                           "Déclarations des champs d'application",
                                                                           "Prologue : aides au logement"]), True)

                def temp_prise_en_compte_personne_a_charge_3(_: Any):
                    match_arg_348 = param_21
                    if match_arg_348.code == PersonneACharge_Code.EnfantACharge:
                        enfant_1 = match_arg_348.value
                        temp_prise_en_compte_personne_a_charge_4 = (enfant_1.age <=
                                                                    integer_of_string("21"))
                    elif match_arg_348.code == PersonneACharge_Code.AutrePersonneACharge:
                        parent_1 = match_arg_348.value
                        temp_prise_en_compte_personne_a_charge_4 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=1150, start_column=5,
                                                         end_line=1152, end_column=44,
                                                         law_headings=["Article R823-4",
                                                                       "Section 1 : Calcul, liquidation et versement des aides",
                                                                       "Chapitre III : Modalités de liquidation et de versement",
                                                                       "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), temp_prise_en_compte_personne_a_charge_4):
                        return True
                    else:
                        raise EmptyError

                def temp_prise_en_compte_personne_a_charge_5(_: Any):
                    try:
                        match_arg_349 = param_21
                        if match_arg_349.code == PersonneACharge_Code.EnfantACharge:
                            enfant_2 = match_arg_349.value
                            temp_prise_en_compte_personne_a_charge_6 = False
                        elif match_arg_349.code == PersonneACharge_Code.AutrePersonneACharge:
                            parent_2 = match_arg_349.value
                            temp_prise_en_compte_personne_a_charge_6 = (parent_2.incapacite_80_pourcent_ou_restriction_emploi and
                                                                        (parent_2.ressources <=
                                                                         (plafond_individuel_l815_9_secu *
                                                                          decimal_of_string("1.25"))))
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1213, start_column=4,
                                                             end_line=1219, end_column=49,
                                                             law_headings=["Article R823-4",
                                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                           "Livre VIII : Aides personnelles au logement",
                                                                           "Partie réglementaire",
                                                                           "Code de la construction et de l'habitation"]), temp_prise_en_compte_personne_a_charge_6):
                            return True
                        else:
                            raise EmptyError
                    except EmptyError:
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=1194, start_column=5,
                                                             end_line=1194, end_column=44,
                                                             law_headings=["Article R823-4",
                                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                                           "Livre VIII : Aides personnelles au logement",
                                                                           "Partie réglementaire",
                                                                           "Code de la construction et de l'habitation"]), log_end_call(["ÉligibilitéAidesPersonnelleLogement",
                                                                                                                                         "condition_2_r823_4"],
                                                                                                                                        log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                                                                                                 "condition_2_r823_4", "output"],
                                                                                                                                                                log_begin_call(["ÉligibilitéAidesPersonnelleLogement",
                                                                                                                                                                                "condition_2_r823_4"], condition_2_r823_4,
                                                                                                                                                                               log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                                                                                                                                        "condition_2_r823_4", "input"],
                                                                                                                                                                                                       param_21))))):
                            return True
                        else:
                            raise EmptyError
                return handle_default([temp_prise_en_compte_personne_a_charge_5,
                                      temp_prise_en_compte_personne_a_charge_3],
                                      temp_prise_en_compte_personne_a_charge_2,
                                      temp_prise_en_compte_personne_a_charge_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=330,
                                                     start_column=11,
                                                     end_line=330,
                                                     end_column=44,
                                                     law_headings=["Éligibilité aux aides personnelles au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_prise_en_compte_personne_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=330, start_column=11,
                                             end_line=330, end_column=44,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    prise_en_compte_personne_a_charge = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                 "prise_en_compte_personne_à_charge"],
                                                                temp_prise_en_compte_personne_a_charge)
    try:
        def temp_personnes_a_charge_prises_en_compte(personne_a_charge: Any):
            return log_end_call(["ÉligibilitéAidesPersonnelleLogement",
                                 "prise_en_compte_personne_à_charge"],
                                log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                         "prise_en_compte_personne_à_charge", "output"],
                                                        log_begin_call(["ÉligibilitéAidesPersonnelleLogement",
                                                                        "prise_en_compte_personne_à_charge"],
                                                                       prise_en_compte_personne_a_charge,
                                                                       log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                                "prise_en_compte_personne_à_charge", "input"],
                                                                                               personne_a_charge))))
        temp_personnes_a_charge_prises_en_compte_1 = list_filter(temp_personnes_a_charge_prises_en_compte,
                                                                 menage.personnes_a_charge)
    except EmptyError:
        temp_personnes_a_charge_prises_en_compte_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=332, start_column=11,
                                             end_line=332, end_column=46,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    personnes_a_charge_prises_en_compte = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                   "personnes_à_charge_prises_en_compte"],
                                                                  temp_personnes_a_charge_prises_en_compte_1)
    try:
        def temp_coefficents_enfants_garde_alternee_pris_en_compte(personne_a_charge_1: Any):
            match_arg_350 = personne_a_charge_1
            if match_arg_350.code == PersonneACharge_Code.EnfantACharge:
                enfant_3 = match_arg_350.value
                match_arg_351 = enfant_3.situation_garde_alternee
                if match_arg_351.code == SituationGardeAlternee_Code.PasDeGardeAlternee:
                    _ = match_arg_351.value
                    return False
                elif match_arg_351.code == SituationGardeAlternee_Code.GardeAlterneeCoefficientPriseEnCharge:
                    _ = match_arg_351.value
                    return True
            elif match_arg_350.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_350.value
                return False

        def temp_coefficents_enfants_garde_alternee_pris_en_compte_1(personne_a_charge_2: Any):
            match_arg_352 = personne_a_charge_2
            if match_arg_352.code == PersonneACharge_Code.EnfantACharge:
                enfant_4 = match_arg_352.value
                match_arg_353 = enfant_4.situation_garde_alternee
                if match_arg_353.code == SituationGardeAlternee_Code.PasDeGardeAlternee:
                    _ = match_arg_353.value
                    return decimal_of_string("0.")
                elif match_arg_353.code == SituationGardeAlternee_Code.GardeAlterneeCoefficientPriseEnCharge:
                    coeff = match_arg_353.value
                    return coeff
            elif match_arg_352.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_352.value
                return decimal_of_string("0.")
        temp_coefficents_enfants_garde_alternee_pris_en_compte_2 = list_map(temp_coefficents_enfants_garde_alternee_pris_en_compte_1,
                                                                            list_filter(temp_coefficents_enfants_garde_alternee_pris_en_compte,
                                                                                        personnes_a_charge_prises_en_compte))
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=350, start_column=10,
                                             end_line=350, end_column=59,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                 "coefficents_enfants_garde_alternée_pris_en_compte"],
                                                                                temp_coefficents_enfants_garde_alternee_pris_en_compte_2)
    try:
        temp_nombre_personnes_a_charge_prises_en_compte = list_length(
            personnes_a_charge_prises_en_compte)
    except EmptyError:
        temp_nombre_personnes_a_charge_prises_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=349, start_column=10,
                                             end_line=349, end_column=52,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    nombre_personnes_a_charge_prises_en_compte = log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                          "nombre_personnes_à_charge_prises_en_compte"],
                                                                         temp_nombre_personnes_a_charge_prises_en_compte)
    try:
        temp___3 = (seuil_l822_3_parts_usufruit < decimal_of_string("0.2"))
    except EmptyError:
        temp___3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=182, start_column=13,
                                             end_line=182, end_column=48,
                                             law_headings=["Article L822-3",
                                                           "Chapitre II : Conditions générales d'attribution",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___3
    try:
        temp___4 = (seuil_l822_3_parts_propriete < decimal_of_string("0.2"))
    except EmptyError:
        temp___4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                             start_line=181, start_column=13,
                                             end_line=181, end_column=49,
                                             law_headings=["Article L822-3",
                                                           "Chapitre II : Conditions générales d'attribution",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie législative",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___4
    return EligibiliteAidesPersonnelleLogementOut(date_courante_out=date_courante_6,
                                                  eligibilite_out=eligibilite,
                                                  nombre_personnes_a_charge_prises_en_compte_out=nombre_personnes_a_charge_prises_en_compte,
                                                  coefficents_enfants_garde_alternee_pris_en_compte_out=coefficents_enfants_garde_alternee_pris_en_compte,
                                                  condition_2_r823_4_out=condition_2_r823_4)


def ressources_aides_personnelle_logement(ressources_aides_personnelle_logement_in: RessourcesAidesPersonnelleLogementIn):
    ressources_demandeur = ressources_aides_personnelle_logement_in.ressources_demandeur_in
    ressources_conjoint = ressources_aides_personnelle_logement_in.ressources_conjoint_in
    personnes_vivant_habituellement_foyer = ressources_aides_personnelle_logement_in.personnes_vivant_habituellement_foyer_in
    demandeur_exerce_activite_remuneree = ressources_aides_personnelle_logement_in.demandeur_exerce_activite_remuneree_in
    conjoint_exerce_activite_remuneree = ressources_aides_personnelle_logement_in.conjoint_exerce_activite_remuneree_in
    personnes_a_charge = ressources_aides_personnelle_logement_in.personnes_a_charge_in
    situation_familiale = ressources_aides_personnelle_logement_in.situation_familiale_in
    mode_occupation_2 = ressources_aides_personnelle_logement_in.mode_occupation_in
    condition_age_bourse_enseignement_superieur = ressources_aides_personnelle_logement_in.condition_age_bourse_enseignement_superieur_in
    demandeur_poursuit_des_etudes = ressources_aides_personnelle_logement_in.demandeur_poursuit_des_etudes_in
    date_demande_ou_reexamen_droit = ressources_aides_personnelle_logement_in.date_demande_ou_reexamen_droit_in
    paiement_logement_distinct_professionnel = ressources_aides_personnelle_logement_in.paiement_logement_distinct_professionnel_in
    ressources_menage_arrondies_base = ressources_aides_personnelle_logement_in.ressources_menage_arrondies_base_in
    temp_ressources_menage_arrondies_seuil = dead_value
    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                         start_line=525, start_column=10,
                                         end_line=525, end_column=15,
                                         law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                       "Déclarations des champs d'application",
                                                       "Prologue : aides au logement"]))
    ressources_menage_arrondies_seuil = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                                 "ressources_ménage_arrondies_seuil"],
                                                                temp_ressources_menage_arrondies_seuil)
    try:
        temp_montant_forfaitaire_r_822_8 = money_of_cents_string("258900")
    except EmptyError:
        temp_montant_forfaitaire_r_822_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=529, start_column=11,
                                             end_line=529, end_column=38,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_r_822_8 = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                           "montant_forfaitaire_r_822_8"], temp_montant_forfaitaire_r_822_8)
    try:
        temp_montant_forfaitaire_r_822_7 = money_of_cents_string("9500")
    except EmptyError:
        temp_montant_forfaitaire_r_822_7 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=531, start_column=11,
                                             end_line=531, end_column=38,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_r_822_7 = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                           "montant_forfaitaire_r_822_7"], temp_montant_forfaitaire_r_822_7)
    temp_ressources_forfaitaires_r822_20 = dead_value
    raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                         start_line=533, start_column=11,
                                         end_line=533, end_column=42,
                                         law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                       "Déclarations des champs d'application",
                                                       "Prologue : aides au logement"]))
    ressources_forfaitaires_r822_20 = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                               "ressources_forfaitaires_r822_20"],
                                                              temp_ressources_forfaitaires_r822_20)
    try:
        def temp_ressources_personnes_vivant_habituellement_foyer(acc_3: Money, personne_1: Any):
            return (acc_3 + personne_1.ressources)
        temp_ressources_personnes_vivant_habituellement_foyer_1 = list_fold_left(
            temp_ressources_personnes_vivant_habituellement_foyer,
            money_of_cents_string("0"),
            personnes_vivant_habituellement_foyer)
    except EmptyError:
        temp_ressources_personnes_vivant_habituellement_foyer_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=527, start_column=11,
                                             end_line=527, end_column=59,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    ressources_personnes_vivant_habituellement_foyer = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                                                "ressources_personnes_vivant_habituellement_foyer"],
                                                                               temp_ressources_personnes_vivant_habituellement_foyer_1)
    try:
        match_arg_354 = situation_familiale
        if match_arg_354.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_354.value
            if (list_length(personnes_a_charge) ==
                    integer_of_string("0")):
                temp_abattement_r_822_10 = money_of_cents_string("0")
            else:
                if (list_length(personnes_a_charge) <=
                        integer_of_string("2")):
                    temp_abattement_r_822_10 = money_of_cents_string("90100")
                else:
                    temp_abattement_r_822_10 = money_of_cents_string("135000")
        elif match_arg_354.code == SituationFamiliale_Code.Maries:
            _ = match_arg_354.value
            temp_abattement_r_822_10 = money_of_cents_string("0")
        elif match_arg_354.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_354.value
            temp_abattement_r_822_10 = money_of_cents_string("0")
        elif match_arg_354.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_354.value
            temp_abattement_r_822_10 = money_of_cents_string("0")
        elif match_arg_354.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_354.value
            if (list_length(personnes_a_charge) ==
                    integer_of_string("0")):
                temp_abattement_r_822_10 = money_of_cents_string("0")
            else:
                if (list_length(personnes_a_charge) <=
                        integer_of_string("2")):
                    temp_abattement_r_822_10 = money_of_cents_string("90100")
                else:
                    temp_abattement_r_822_10 = money_of_cents_string("135000")
        elif match_arg_354.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_354.value
            temp_abattement_r_822_10 = money_of_cents_string("0")
    except EmptyError:
        temp_abattement_r_822_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=532, start_column=11,
                                             end_line=532, end_column=30,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    abattement_r_822_10 = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                   "abattement_r_822_10"], temp_abattement_r_822_10)
    try:
        temp_base_mensuelle_allocations_familiales_dot_date_courante = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                                                                "base_mensuelle_allocations_familiales.date_courante"],
                                                                                               date_demande_ou_reexamen_droit)
    except EmptyError:
        temp_base_mensuelle_allocations_familiales_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                             start_line=5, start_column=10,
                                             end_line=5, end_column=23,
                                             law_headings=["Montant de la base mensuelle des allocations familiales"]))
    base_mensuelle_allocations_familiales_dot_date_courante = temp_base_mensuelle_allocations_familiales_dot_date_courante
    result_8 = log_end_call(["RessourcesAidesPersonnelleLogement",
                             "base_mensuelle_allocations_familiales",
                             "BaseMensuelleAllocationsFamiliales"],
                            log_begin_call(["RessourcesAidesPersonnelleLogement",
                                            "base_mensuelle_allocations_familiales",
                                            "BaseMensuelleAllocationsFamiliales"],
                                           base_mensuelle_allocations_familiales,
                                           BaseMensuelleAllocationsFamilialesIn(date_courante_in=base_mensuelle_allocations_familiales_dot_date_courante)))
    base_mensuelle_allocations_familiales_dot_montant = result_8.montant_out
    try:
        match_arg_355 = paiement_logement_distinct_professionnel
        if match_arg_355.code == PaiementLogementDistinctProfessionnel_Code.OuiAvecLoyerOuCharges:
            loyer_ou_charges = match_arg_355.value
            temp_abattement_r_822_8 = montant_forfaitaire_r_822_8
        elif match_arg_355.code == PaiementLogementDistinctProfessionnel_Code.Non:
            _ = match_arg_355.value
            temp_abattement_r_822_8 = money_of_cents_string("0")
    except EmptyError:
        temp_abattement_r_822_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=528, start_column=11,
                                             end_line=528, end_column=29,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    abattement_r_822_8 = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                  "abattement_r_822_8"], temp_abattement_r_822_8)
    try:
        try:
            match_arg_356 = mode_occupation_2
            if match_arg_356.code == ModeOccupation_Code.Locataire:
                _ = match_arg_356.value
                temp_ressources_prises_en_compte = True
            elif match_arg_356.code == ModeOccupation_Code.ResidentLogementFoyer:
                _ = match_arg_356.value
                temp_ressources_prises_en_compte = False
            elif match_arg_356.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_356.value
                temp_ressources_prises_en_compte = False
            elif match_arg_356.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_356.value
                temp_ressources_prises_en_compte = False
            elif match_arg_356.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_356.value
                temp_ressources_prises_en_compte = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=854, start_column=6, end_line=856, end_column=35,
                                                 law_headings=["Article R822-20",
                                                               "Sous-section 3 : Montant forfaitaire de ressources applicable aux étudiants",
                                                               "Section 2 : Conditions relatives aux ressources",
                                                               "Chapitre II : Conditions générales d'attribution",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), (temp_ressources_prises_en_compte and
                                                                                                                (condition_age_bourse_enseignement_superieur and
                                                                                                                 demandeur_poursuit_des_etudes))):
                temp_ressources_prises_en_compte_1 = ressources_forfaitaires_r822_20
            else:
                temp_ressources_prises_en_compte_1 = dead_value
                raise EmptyError
        except EmptyError:
            temp_ressources_prises_en_compte_1 = ((ressources_demandeur +
                                                   ressources_conjoint) +
                                                  ressources_personnes_vivant_habituellement_foyer)
    except EmptyError:
        temp_ressources_prises_en_compte_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=538, start_column=10,
                                             end_line=538, end_column=37,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    ressources_prises_en_compte = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                           "ressources_prises_en_compte"], temp_ressources_prises_en_compte_1)
    try:
        if (demandeur_exerce_activite_remuneree and
            (conjoint_exerce_activite_remuneree and ((ressources_conjoint +
                                                      ressources_conjoint) >=
                                                     (base_mensuelle_allocations_familiales_dot_montant *
             decimal_of_string("12."))))):
            temp_abattement_r_822_7 = montant_forfaitaire_r_822_7
        else:
            temp_abattement_r_822_7 = money_of_cents_string("0")
    except EmptyError:
        temp_abattement_r_822_7 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=530, start_column=11,
                                             end_line=530, end_column=29,
                                             law_headings=["Prise en compte des ressources pour les aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    abattement_r_822_7 = log_variable_definition(["RessourcesAidesPersonnelleLogement",
                                                  "abattement_r_822_7"], temp_abattement_r_822_7)
    try:
        def temp___5(acc_4: bool, personne_2: Any):
            return (acc_4 and
                    personne_2.duree_residence_durant_periode_r_822_3_1_superieure_a_6_mois)
        temp___6 = list_fold_left(temp___5, True,
                                  personnes_vivant_habituellement_foyer)
    except EmptyError:
        temp___6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=142, start_column=13,
                                             end_line=143, end_column=74,
                                             law_headings=["Article R822-2",
                                                           "Sous-section 1 : Modalités générales de l'appréciation des ressources",
                                                           "Section 2 : Conditions relatives aux ressources",
                                                           "Chapitre II : Conditions générales d'attribution",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___6
    return RessourcesAidesPersonnelleLogementOut(ressources_prises_en_compte_out=ressources_prises_en_compte)


def eligibilite_prestations_familiales(eligibilite_prestations_familiales_in: EligibilitePrestationsFamilialesIn):
    date_courante_7 = eligibilite_prestations_familiales_in.date_courante_in
    prestation_courante = eligibilite_prestations_familiales_in.prestation_courante_in
    residence_1 = eligibilite_prestations_familiales_in.residence_in
    try:
        temp_age_l512_3_2 = integer_of_string("20")
    except EmptyError:
        temp_age_l512_3_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=44, start_column=10,
                                             end_line=44, end_column=22,
                                             law_headings=["Prologue : prestations familiales"]))
    age_l512_3_2 = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                            "âge_l512_3_2"], temp_age_l512_3_2)
    try:
        temp_smic_dot_date_courante = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                               "smic.date_courante"], date_courante_7)
    except EmptyError:
        temp_smic_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                             start_line=9, start_column=10,
                                             end_line=9, end_column=23,
                                             law_headings=["Prologue",
                                                           "Montant du salaire minimum de croissance"]))
    smic_dot_date_courante = temp_smic_dot_date_courante
    try:
        temp_smic_dot_residence = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                           "smic.résidence"], residence_1)
    except EmptyError:
        temp_smic_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/../smic/smic.catala_fr",
                                             start_line=10, start_column=10,
                                             end_line=10, end_column=19,
                                             law_headings=["Prologue",
                                                           "Montant du salaire minimum de croissance"]))
    smic_dot_residence = temp_smic_dot_residence
    result_9 = log_end_call(["ÉligibilitéPrestationsFamiliales", "smic",
                             "Smic"], log_begin_call(["ÉligibilitéPrestationsFamiliales",
                                                      "smic", "Smic"], smic,
                                                     SmicIn(date_courante_in=smic_dot_date_courante,
                                                            residence_in=smic_dot_residence)))
    smic_dot_brut_horaire = result_9.brut_horaire_out
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                 start_line=103, start_column=5, end_line=108, end_column=30,
                                                 law_headings=["Article L751-1",
                                                               "Chapitre 1er : Généralités",
                                                               "Titre 5 : Dispositions particulières à la Guadeloupe, à la Guyane, à la Martinique, à La Réunion, à Saint-Barthélemy et à Saint-Martin",
                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                               "Partie législative",
                                                               "Code de la sécurité sociale"]), ((residence_1 ==
                                                                                                  Collectivite(Collectivite_Code.Guadeloupe, Unit())) or
                                                                                                 ((residence_1 == Collectivite(Collectivite_Code.Guyane,
                                                                                                                               Unit())) or ((residence_1 ==
                                                                                                                                             Collectivite(Collectivite_Code.Martinique, Unit())) or
                                                                                                                                            ((residence_1 == Collectivite(Collectivite_Code.LaReunion,
                                                                                                                                                                          Unit())) or ((residence_1 ==
                                                                                                                                                                                        Collectivite(Collectivite_Code.SaintBarthelemy, Unit())) or
                                                                                                                                                                                       (residence_1 == Collectivite(Collectivite_Code.SaintMartin,
                                                                                                                                                                                                                    Unit())))))))):
                temp_regime_outre_mer_l751_1 = True
            else:
                temp_regime_outre_mer_l751_1 = dead_value
                raise EmptyError
        except EmptyError:
            temp_regime_outre_mer_l751_1 = False
    except EmptyError:
        temp_regime_outre_mer_l751_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=45, start_column=10,
                                             end_line=45, end_column=33,
                                             law_headings=["Prologue : prestations familiales"]))
    regime_outre_mer_l751_1 = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                       "régime_outre_mer_l751_1"], temp_regime_outre_mer_l751_1)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_R.catala_fr",
                                                 start_line=62, start_column=18, end_line=62, end_column=41,
                                                 law_headings=["Article R755-0-2",
                                                               "Chapitre 5 : Prestations familiales et prestations assimilées",
                                                               "Titre 5 : Départements d'outre-mer",
                                                               "Livre 7 : Régimes divers - Dispositions diverses",
                                                               "Partie réglementaire - Décrets en Conseil d'Etat",
                                                               "Code de la sécurité sociale"]), regime_outre_mer_l751_1):
                temp_plafond_l512_3_2 = ((smic_dot_brut_horaire *
                                          decimal_of_string("0.55")) * decimal_of_string("169."))
            else:
                temp_plafond_l512_3_2 = dead_value
                raise EmptyError
        except EmptyError:
            temp_plafond_l512_3_2 = ((smic_dot_brut_horaire *
                                      decimal_of_string("0.55")) * decimal_of_string("169."))
    except EmptyError:
        temp_plafond_l512_3_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=43, start_column=11,
                                             end_line=43, end_column=27,
                                             law_headings=["Prologue : prestations familiales"]))
    plafond_l512_3_2 = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                "plafond_l512_3_2"], temp_plafond_l512_3_2)
    try:
        def temp_conditions_hors_age(param_22: EnfantPrestationsFamiliales):
            try:
                try:
                    match_arg_357 = param_22.obligation_scolaire
                    if match_arg_357.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_357.value
                        temp_conditions_hors_age_1 = False
                    elif match_arg_357.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_357.value
                        temp_conditions_hors_age_1 = False
                    elif match_arg_357.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_357.value
                        temp_conditions_hors_age_1 = True
                    match_arg_358 = param_22.obligation_scolaire
                    if match_arg_358.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_358.value
                        temp_conditions_hors_age_2 = False
                    elif match_arg_358.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_358.value
                        temp_conditions_hors_age_2 = True
                    elif match_arg_358.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_358.value
                        temp_conditions_hors_age_2 = False
                    match_arg_359 = param_22.obligation_scolaire
                    if match_arg_359.code == SituationObligationScolaire_Code.Avant:
                        _ = match_arg_359.value
                        temp_conditions_hors_age_3 = True
                    elif match_arg_359.code == SituationObligationScolaire_Code.Pendant:
                        _ = match_arg_359.value
                        temp_conditions_hors_age_3 = False
                    elif match_arg_359.code == SituationObligationScolaire_Code.Apres:
                        _ = match_arg_359.value
                        temp_conditions_hors_age_3 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                         start_line=66, start_column=5,
                                                         end_line=69, end_column=85,
                                                         law_headings=["Article L512-3",
                                                                       "Chapitre 2 : Champ d'application",
                                                                       "Titre 1 : Champ d'application - Généralités",
                                                                       "Livre 5 : Prestations familiales et prestations assimilées",
                                                                       "Partie législative",
                                                                       "Code de la sécurité sociale"]), ((temp_conditions_hors_age_3 or
                                                                                                          (temp_conditions_hors_age_2 or
                                                                                                           temp_conditions_hors_age_1)) and
                                                                                                         (param_22.remuneration_mensuelle <=
                                                                                                          plafond_l512_3_2))):
                        return True
                    else:
                        raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                                     start_line=42,
                                                     start_column=10,
                                                     end_line=42,
                                                     end_column=29,
                                                     law_headings=["Prologue : prestations familiales"]))
    except EmptyError:
        temp_conditions_hors_age = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=42, start_column=10,
                                             end_line=42, end_column=29,
                                             law_headings=["Prologue : prestations familiales"]))
    conditions_hors_age = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                   "conditions_hors_âge"], temp_conditions_hors_age)
    try:
        def temp_droit_ouvert(param_23: EnfantPrestationsFamiliales):
            try:
                try:
                    try:
                        match_arg_360 = param_23.obligation_scolaire
                        if match_arg_360.code == SituationObligationScolaire_Code.Avant:
                            _ = match_arg_360.value
                            temp_droit_ouvert_1 = False
                        elif match_arg_360.code == SituationObligationScolaire_Code.Pendant:
                            _ = match_arg_360.value
                            temp_droit_ouvert_1 = False
                        elif match_arg_360.code == SituationObligationScolaire_Code.Apres:
                            _ = match_arg_360.value
                            temp_droit_ouvert_1 = True
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                             start_line=58, start_column=5,
                                                             end_line=60, end_column=60,
                                                             law_headings=["Article L512-3",
                                                                           "Chapitre 2 : Champ d'application",
                                                                           "Titre 1 : Champ d'application - Généralités",
                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                           "Partie législative",
                                                                           "Code de la sécurité sociale"]), (temp_droit_ouvert_1 and
                                                                                                             ((param_23.remuneration_mensuelle <=
                                                                                                               plafond_l512_3_2) and (param_23.age <
                                                                                                                                      age_l512_3_2)))):
                            return True
                        else:
                            raise EmptyError
                    except EmptyError:
                        match_arg_361 = param_23.obligation_scolaire
                        if match_arg_361.code == SituationObligationScolaire_Code.Avant:
                            _ = match_arg_361.value
                            temp_droit_ouvert_2 = False
                        elif match_arg_361.code == SituationObligationScolaire_Code.Pendant:
                            _ = match_arg_361.value
                            temp_droit_ouvert_2 = True
                        elif match_arg_361.code == SituationObligationScolaire_Code.Apres:
                            _ = match_arg_361.value
                            temp_droit_ouvert_2 = False
                        match_arg_362 = param_23.obligation_scolaire
                        if match_arg_362.code == SituationObligationScolaire_Code.Avant:
                            _ = match_arg_362.value
                            temp_droit_ouvert_3 = True
                        elif match_arg_362.code == SituationObligationScolaire_Code.Pendant:
                            _ = match_arg_362.value
                            temp_droit_ouvert_3 = False
                        elif match_arg_362.code == SituationObligationScolaire_Code.Apres:
                            _ = match_arg_362.value
                            temp_droit_ouvert_3 = False
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/../prestations_familiales/sécurité_sociale_L.catala_fr",
                                                             start_line=47, start_column=5,
                                                             end_line=48, end_column=78,
                                                             law_headings=["Article L512-3",
                                                                           "Chapitre 2 : Champ d'application",
                                                                           "Titre 1 : Champ d'application - Généralités",
                                                                           "Livre 5 : Prestations familiales et prestations assimilées",
                                                                           "Partie législative",
                                                                           "Code de la sécurité sociale"]), (temp_droit_ouvert_3 or
                                                                                                             temp_droit_ouvert_2)):
                            return True
                        else:
                            raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                                     start_line=41,
                                                     start_column=10,
                                                     end_line=41,
                                                     end_column=22,
                                                     law_headings=["Prologue : prestations familiales"]))
    except EmptyError:
        temp_droit_ouvert = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=41, start_column=10,
                                             end_line=41, end_column=22,
                                             law_headings=["Prologue : prestations familiales"]))
    droit_ouvert = log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                            "droit_ouvert"], temp_droit_ouvert)
    return EligibilitePrestationsFamilialesOut(droit_ouvert_out=droit_ouvert,
                                               conditions_hors_age_out=conditions_hors_age,
                                               age_l512_3_2_out=age_l512_3_2,
                                               regime_outre_mer_l751_1_out=regime_outre_mer_l751_1)


def calcul_allocation_logement_locatif(calcul_allocation_logement_locatif_in: CalculAllocationLogementLocatifIn):
    loyer_principal_1 = calcul_allocation_logement_locatif_in.loyer_principal_in
    ressources_menage_arrondies_4 = calcul_allocation_logement_locatif_in.ressources_menage_arrondies_in
    beneficiaire_aide_adulte_ou_enfant_handicapes_1 = calcul_allocation_logement_locatif_in.beneficiaire_aide_adulte_ou_enfant_handicapes_in
    date_courante_8 = calcul_allocation_logement_locatif_in.date_courante_in
    nombre_personnes_a_charge_5 = calcul_allocation_logement_locatif_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_5 = calcul_allocation_logement_locatif_in.situation_familiale_calcul_apl_in
    zone_3 = calcul_allocation_logement_locatif_in.zone_in
    logement_est_chambre_1 = calcul_allocation_logement_locatif_in.logement_est_chambre_in
    agees_ou_handicap_adultes_hebergees_onereux_particuliers_1 = calcul_allocation_logement_locatif_in.agees_ou_handicap_adultes_hebergees_onereux_particuliers_in
    type_aide_1 = calcul_allocation_logement_locatif_in.type_aide_in
    colocation_1 = calcul_allocation_logement_locatif_in.colocation_in
    reduction_loyer_solidarite_1 = calcul_allocation_logement_locatif_in.reduction_loyer_solidarite_in
    logement_meuble_d842_2 = calcul_allocation_logement_locatif_in.logement_meuble_d842_2_in
    changement_logement_d842_4 = calcul_allocation_logement_locatif_in.changement_logement_d842_4_in
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4278, start_column=5,
                                                 end_line=4278, end_column=27, law_headings=["Article D842-2",
                                                                                             "Section 1 : Secteur locatif ordinaire",
                                                                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                                             "Titre IV : Allocations de Logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), logement_meuble_d842_2):
                temp_calcul_apl_locatif_dot_loyer_principal = (loyer_principal_1 *
                                                               (decimal_of_string("2.") / decimal_of_string("3.")))
            else:
                temp_calcul_apl_locatif_dot_loyer_principal = dead_value
                raise EmptyError
        except EmptyError:
            temp_calcul_apl_locatif_dot_loyer_principal = loyer_principal_1
        temp_calcul_apl_locatif_dot_loyer_principal_1 = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                 "calcul_apl_locatif.loyer_principal"],
                                                                                temp_calcul_apl_locatif_dot_loyer_principal)
    except EmptyError:
        temp_calcul_apl_locatif_dot_loyer_principal_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=559, start_column=10,
                                             end_line=559, end_column=25,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_loyer_principal = temp_calcul_apl_locatif_dot_loyer_principal_1
    try:
        temp_calcul_apl_locatif_dot_ressources_menage_arrondies = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                           "calcul_apl_locatif.ressources_ménage_arrondies"],
                                                                                          ressources_menage_arrondies_4)
    except EmptyError:
        temp_calcul_apl_locatif_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=560, start_column=10,
                                             end_line=560, end_column=37,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_ressources_menage_arrondies = temp_calcul_apl_locatif_dot_ressources_menage_arrondies
    try:
        temp_calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                                             "calcul_apl_locatif.bénéficiaire_aide_adulte_ou_enfant_handicapés"],
                                                                                                            beneficiaire_aide_adulte_ou_enfant_handicapes_1)
    except EmptyError:
        temp_calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=561, start_column=10,
                                             end_line=561, end_column=55,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = temp_calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes
    try:
        temp_calcul_apl_locatif_dot_date_courante = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                             "calcul_apl_locatif.date_courante"], date_courante_8)
    except EmptyError:
        temp_calcul_apl_locatif_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=563, start_column=10,
                                             end_line=563, end_column=23,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_date_courante = temp_calcul_apl_locatif_dot_date_courante
    try:
        temp_calcul_apl_locatif_dot_nombre_personnes_a_charge = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                         "calcul_apl_locatif.nombre_personnes_à_charge"],
                                                                                        nombre_personnes_a_charge_5)
    except EmptyError:
        temp_calcul_apl_locatif_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=564, start_column=10,
                                             end_line=564, end_column=35,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_nombre_personnes_a_charge = temp_calcul_apl_locatif_dot_nombre_personnes_a_charge
    try:
        temp_calcul_apl_locatif_dot_situation_familiale_calcul_apl = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                              "calcul_apl_locatif.situation_familiale_calcul_apl"],
                                                                                             situation_familiale_calcul_apl_5)
    except EmptyError:
        temp_calcul_apl_locatif_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=565, start_column=10,
                                             end_line=565, end_column=40,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_situation_familiale_calcul_apl = temp_calcul_apl_locatif_dot_situation_familiale_calcul_apl
    try:
        temp_calcul_apl_locatif_dot_zone = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                    "calcul_apl_locatif.zone"], zone_3)
    except EmptyError:
        temp_calcul_apl_locatif_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=566, start_column=10,
                                             end_line=566, end_column=14,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_zone = temp_calcul_apl_locatif_dot_zone
    try:
        temp_calcul_apl_locatif_dot_logement_est_chambre = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                    "calcul_apl_locatif.logement_est_chambre"],
                                                                                   logement_est_chambre_1)
    except EmptyError:
        temp_calcul_apl_locatif_dot_logement_est_chambre = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=567, start_column=10,
                                             end_line=567, end_column=30,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_logement_est_chambre = temp_calcul_apl_locatif_dot_logement_est_chambre
    try:
        temp_calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                                                        "calcul_apl_locatif.âgées_ou_handicap_adultes_hébergées_onéreux_particuliers"],
                                                                                                                       agees_ou_handicap_adultes_hebergees_onereux_particuliers_1)
    except EmptyError:
        temp_calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=568, start_column=10,
                                             end_line=568, end_column=66,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = temp_calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers
    try:
        temp_calcul_apl_locatif_dot_type_aide = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                         "calcul_apl_locatif.type_aide"], type_aide_1)
    except EmptyError:
        temp_calcul_apl_locatif_dot_type_aide = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=570, start_column=10,
                                             end_line=570, end_column=19,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_type_aide = temp_calcul_apl_locatif_dot_type_aide
    try:
        temp_calcul_apl_locatif_dot_colocation = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                          "calcul_apl_locatif.colocation"], colocation_1)
    except EmptyError:
        temp_calcul_apl_locatif_dot_colocation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=571, start_column=10,
                                             end_line=571, end_column=20,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_colocation = temp_calcul_apl_locatif_dot_colocation
    try:
        temp_calcul_apl_locatif_dot_reduction_loyer_solidarite = log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                          "calcul_apl_locatif.réduction_loyer_solidarité"],
                                                                                         reduction_loyer_solidarite_1)
    except EmptyError:
        temp_calcul_apl_locatif_dot_reduction_loyer_solidarite = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=572, start_column=10,
                                             end_line=572, end_column=36,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_locatif_dot_reduction_loyer_solidarite = temp_calcul_apl_locatif_dot_reduction_loyer_solidarite
    result_10 = log_end_call(["CalculAllocationLogementLocatif",
                              "calcul_apl_locatif", "CalculAidePersonnaliséeLogementLocatif"],
                             log_begin_call(["CalculAllocationLogementLocatif",
                                             "calcul_apl_locatif", "CalculAidePersonnaliséeLogementLocatif"],
                                            calcul_aide_personnalisee_logement_locatif,
                                            CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_in=calcul_apl_locatif_dot_loyer_principal,
                                                                                     ressources_menage_arrondies_in=calcul_apl_locatif_dot_ressources_menage_arrondies,
                                                                                     beneficiaire_aide_adulte_ou_enfant_handicapes_in=calcul_apl_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes,
                                                                                     date_courante_in=calcul_apl_locatif_dot_date_courante,
                                                                                     nombre_personnes_a_charge_in=calcul_apl_locatif_dot_nombre_personnes_a_charge,
                                                                                     situation_familiale_calcul_apl_in=calcul_apl_locatif_dot_situation_familiale_calcul_apl,
                                                                                     zone_in=calcul_apl_locatif_dot_zone,
                                                                                     logement_est_chambre_in=calcul_apl_locatif_dot_logement_est_chambre,
                                                                                     agees_ou_handicap_adultes_hebergees_onereux_particuliers_in=calcul_apl_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers,
                                                                                     type_aide_in=calcul_apl_locatif_dot_type_aide,
                                                                                     colocation_in=calcul_apl_locatif_dot_colocation,
                                                                                     reduction_loyer_solidarite_in=calcul_apl_locatif_dot_reduction_loyer_solidarite)))
    calcul_apl_locatif_dot_montant_forfaitaire_charges_d823_16 = result_10.montant_forfaitaire_charges_d823_16_out
    calcul_apl_locatif_dot_plafond_loyer_d823_16_2 = result_10.plafond_loyer_d823_16_2_out
    calcul_apl_locatif_dot_participation_minimale = result_10.participation_minimale_out
    calcul_apl_locatif_dot_taux_composition_familiale = result_10.taux_composition_familiale_out
    calcul_apl_locatif_dot_participation_personnelle = result_10.participation_personnelle_out
    calcul_apl_locatif_dot_aide_finale_formule = result_10.aide_finale_formule_out
    calcul_apl_locatif_dot_traitement_aide_finale_montant_minimal = result_10.traitement_aide_finale_montant_minimal_out
    try:
        def temp_traitement_aide_finale(param_24: Money):
            try:
                try:
                    match_arg_363 = changement_logement_d842_4
                    if match_arg_363.code == ChangementLogementD8424_Code.Changement:
                        infos = match_arg_363.value
                        temp_traitement_aide_finale_1 = (loyer_principal_1 >=
                                                         infos.ancien_loyer_principal)
                    elif match_arg_363.code == ChangementLogementD8424_Code.PasDeChangement:
                        _ = match_arg_363.value
                        temp_traitement_aide_finale_1 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=4346, start_column=24,
                                                         end_line=4346, end_column=46,
                                                         law_headings=["Article D842-4",
                                                                       "Section 1 : Secteur locatif ordinaire",
                                                                       "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                       "Titre IV : Allocations de Logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), temp_traitement_aide_finale_1):
                        return param_24
                    else:
                        raise EmptyError
                except EmptyError:
                    return log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                         "traitement_aide_finale_montant_minimal"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                 "traitement_aide_finale_montant_minimal", "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                "traitement_aide_finale_montant_minimal"],
                                                                               calcul_apl_locatif_dot_traitement_aide_finale_montant_minimal,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                        "traitement_aide_finale_montant_minimal", "input"],
                                                                                                       param_24))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=814,
                                                     start_column=10,
                                                     end_line=814,
                                                     end_column=32,
                                                     law_headings=["Secteur locatif",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=814, start_column=10,
                                             end_line=814, end_column=32,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale = log_variable_definition(["CalculAllocationLogementLocatif",
                                                      "traitement_aide_finale"], temp_traitement_aide_finale)
    try:
        try:
            match_arg_364 = changement_logement_d842_4
            if match_arg_364.code == ChangementLogementD8424_Code.Changement:
                infos_1 = match_arg_364.value
                temp_aide_finale_formule_3 = (loyer_principal_1 >=
                                              infos_1.ancien_loyer_principal)
            elif match_arg_364.code == ChangementLogementD8424_Code.PasDeChangement:
                _ = match_arg_364.value
                temp_aide_finale_formule_3 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4338, start_column=24,
                                                 end_line=4338, end_column=43, law_headings=["Article D842-4",
                                                                                             "Section 1 : Secteur locatif ordinaire",
                                                                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                                             "Titre IV : Allocations de Logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), temp_aide_finale_formule_3):
                match_arg_365 = changement_logement_d842_4
                if match_arg_365.code == ChangementLogementD8424_Code.Changement:
                    infos_2 = match_arg_365.value
                    temp_aide_finale_formule_4 = (loyer_principal_1 -
                                                  (infos_2.ancien_loyer_principal -
                                                   infos_2.ancienne_allocation_logement))
                elif match_arg_365.code == ChangementLogementD8424_Code.PasDeChangement:
                    _ = match_arg_365.value
                    temp_aide_finale_formule_4 = money_of_cents_string("0")
            else:
                temp_aide_finale_formule_4 = dead_value
                raise EmptyError
        except EmptyError:
            temp_aide_finale_formule_4 = calcul_apl_locatif_dot_aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=812, start_column=10,
                                             end_line=812, end_column=29,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_3 = log_variable_definition(["CalculAllocationLogementLocatif",
                                                     "aide_finale_formule"], temp_aide_finale_formule_4)
    return CalculAllocationLogementLocatifOut(aide_finale_formule_out=aide_finale_formule_3,
                                              traitement_aide_finale_out=traitement_aide_finale)


def calcul_allocation_logement_foyer(calcul_allocation_logement_foyer_in: CalculAllocationLogementFoyerIn):
    redevance_1 = calcul_allocation_logement_foyer_in.redevance_in
    mode_occupation_3 = calcul_allocation_logement_foyer_in.mode_occupation_in
    ressources_menage_arrondies_5 = calcul_allocation_logement_foyer_in.ressources_menage_arrondies_in
    nombre_personnes_a_charge_6 = calcul_allocation_logement_foyer_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_6 = calcul_allocation_logement_foyer_in.situation_familiale_calcul_apl_in
    zone_4 = calcul_allocation_logement_foyer_in.zone_in
    date_courante_9 = calcul_allocation_logement_foyer_in.date_courante_in
    categorie_equivalence_loyer_d842_16 = calcul_allocation_logement_foyer_in.categorie_equivalence_loyer_d842_16_in
    try:
        temp_montant_minimal_aide_d842_15 = money_of_cents_string("1000")
    except EmptyError:
        temp_montant_minimal_aide_d842_15 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=961, start_column=11,
                                             end_line=961, end_column=39,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_minimal_aide_d842_15 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                            "montant_minimal_aide_d842_15"], temp_montant_minimal_aide_d842_15)
    try:
        temp_montant_forfaitaire_d842_15 = money_of_cents_string("500")
    except EmptyError:
        temp_montant_forfaitaire_d842_15 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=962, start_column=11,
                                             end_line=962, end_column=38,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d842_15 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                           "montant_forfaitaire_d842_15"], temp_montant_forfaitaire_d842_15)
    try:
        temp_montant_minimal_depense_nette_d842_17 = money_of_cents_string(
            "1500")
    except EmptyError:
        temp_montant_minimal_depense_nette_d842_17 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=963, start_column=11,
                                             end_line=963, end_column=48,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_minimal_depense_nette_d842_17 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                     "montant_minimal_dépense_nette_d842_17"],
                                                                    temp_montant_minimal_depense_nette_d842_17)
    try:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25_1 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                        "calcul_nombre_parts.condition_2_du_832_25"], True)
    except EmptyError:
        temp_calcul_nombre_parts_dot_condition_2_du_832_25_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=626, start_column=10,
                                             end_line=626, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_condition_2_du_832_25_1 = temp_calcul_nombre_parts_dot_condition_2_du_832_25_1
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_2 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                            "calcul_nombre_parts.nombre_personnes_à_charge"],
                                                                                           nombre_personnes_a_charge_6)
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=627, start_column=10,
                                             end_line=627, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge_2 = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_2
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_2 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                 "calcul_nombre_parts.situation_familiale_calcul_apl"],
                                                                                                situation_familiale_calcul_apl_6)
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=628, start_column=10,
                                             end_line=628, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl_2 = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_2
    result_11 = log_end_call(["CalculAllocationLogementFoyer",
                              "calcul_nombre_parts", "CalculNombrePartLogementFoyer"],
                             log_begin_call(["CalculAllocationLogementFoyer",
                                             "calcul_nombre_parts", "CalculNombrePartLogementFoyer"],
                                            calcul_nombre_part_logement_foyer,
                                            CalculNombrePartLogementFoyerIn(condition_2_du_832_25_in=calcul_nombre_parts_dot_condition_2_du_832_25_1,
                                                                            nombre_personnes_a_charge_in=calcul_nombre_parts_dot_nombre_personnes_a_charge_2,
                                                                            situation_familiale_calcul_apl_in=calcul_nombre_parts_dot_situation_familiale_calcul_apl_2)))
    calcul_nombre_parts_dot_n_nombre_parts_d832_25_1 = result_11.n_nombre_parts_d832_25_out
    try:
        temp_contributions_sociales_dot_date_courante_3 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                   "contributions_sociales.date_courante"], date_courante_9)
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=545, start_column=10,
                                             end_line=545, end_column=23,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_3 = temp_contributions_sociales_dot_date_courante_3
    result_12 = log_end_call(["CalculAllocationLogementFoyer",
                              "contributions_sociales",
                              "ContributionsSocialesAidesPersonnelleLogement"],
                             log_begin_call(["CalculAllocationLogementFoyer",
                                             "contributions_sociales",
                                             "ContributionsSocialesAidesPersonnelleLogement"],
                                            contributions_sociales_aides_personnelle_logement,
                                            ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in=contributions_sociales_dot_date_courante_3)))
    contributions_sociales_dot_montant_3 = result_12.montant_out
    try:
        temp_calcul_apl_logement_foyer_dot_mode_occupation = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                      "calcul_apl_logement_foyer.mode_occupation"], mode_occupation_3)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_mode_occupation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=633, start_column=10,
                                             end_line=633, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_mode_occupation = temp_calcul_apl_logement_foyer_dot_mode_occupation
    try:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                  "calcul_apl_logement_foyer.ressources_ménage_arrondies"],
                                                                                                 ressources_menage_arrondies_5)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=634, start_column=10,
                                             end_line=634, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_ressources_menage_arrondies = temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies
    try:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                "calcul_apl_logement_foyer.nombre_personnes_à_charge"],
                                                                                               nombre_personnes_a_charge_6)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=635, start_column=10,
                                             end_line=635, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_nombre_personnes_a_charge = temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge
    try:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                     "calcul_apl_logement_foyer.situation_familiale_calcul_apl"],
                                                                                                    situation_familiale_calcul_apl_6)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=636, start_column=10,
                                             end_line=636, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl = temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl
    try:
        temp_calcul_apl_logement_foyer_dot_zone = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                           "calcul_apl_logement_foyer.zone"], zone_4)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=637, start_column=10,
                                             end_line=637, end_column=14,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_zone = temp_calcul_apl_logement_foyer_dot_zone
    try:
        temp_calcul_apl_logement_foyer_dot_date_courante = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                    "calcul_apl_logement_foyer.date_courante"], date_courante_9)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=638, start_column=10,
                                             end_line=638, end_column=23,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_date_courante = temp_calcul_apl_logement_foyer_dot_date_courante
    try:
        temp_calcul_apl_logement_foyer_dot_redevance = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                "calcul_apl_logement_foyer.redevance"], redevance_1)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_redevance = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=639, start_column=10,
                                             end_line=639, end_column=19,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_redevance = temp_calcul_apl_logement_foyer_dot_redevance

    def temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25(_: Unit):
        return log_variable_definition(["CalculAllocationLogementFoyer",
                                        "calcul_apl_logement_foyer.condition_2_du_832_25"], True)
    calcul_apl_logement_foyer_dot_condition_2_du_832_25 = temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25

    def temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25(_: Unit):
        temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_1 = dead_value
        raise EmptyError
        return log_variable_definition(["CalculAllocationLogementFoyer",
                                        "calcul_apl_logement_foyer.n_nombre_parts_d832_25"],
                                       temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_1)
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25 = temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25
    result_13 = log_end_call(["CalculAllocationLogementFoyer",
                              "calcul_apl_logement_foyer",
                              "CalculAidePersonnaliséeLogementFoyer"],
                             log_begin_call(["CalculAllocationLogementFoyer",
                                             "calcul_apl_logement_foyer",
                                             "CalculAidePersonnaliséeLogementFoyer"],
                                            calcul_aide_personnalisee_logement_foyer,
                                            CalculAidePersonnaliseeLogementFoyerIn(mode_occupation_in=calcul_apl_logement_foyer_dot_mode_occupation,
                                                                                   ressources_menage_arrondies_in=calcul_apl_logement_foyer_dot_ressources_menage_arrondies,
                                                                                   nombre_personnes_a_charge_in=calcul_apl_logement_foyer_dot_nombre_personnes_a_charge,
                                                                                   situation_familiale_calcul_apl_in=calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl,
                                                                                   zone_in=calcul_apl_logement_foyer_dot_zone,
                                                                                   date_courante_in=calcul_apl_logement_foyer_dot_date_courante,
                                                                                   redevance_in=calcul_apl_logement_foyer_dot_redevance,
                                                                                   condition_2_du_832_25_in=calcul_apl_logement_foyer_dot_condition_2_du_832_25,
                                                                                   n_nombre_parts_d832_25_in=calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25)))
    calcul_apl_logement_foyer_dot_coefficient_multiplicateur_d832_25 = result_13.coefficient_multiplicateur_d832_25_out
    calcul_apl_logement_foyer_dot_coefficient_r_d832_25 = result_13.coefficient_r_d832_25_out
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_1 = result_13.n_nombre_parts_d832_25_out
    calcul_apl_logement_foyer_dot_equivalence_loyer_eligible = result_13.equivalence_loyer_eligible_out
    calcul_apl_logement_foyer_dot_plafond_equivalence_loyer_eligible = result_13.plafond_equivalence_loyer_eligible_out
    calcul_apl_logement_foyer_dot_equivalence_loyer_minimale = result_13.equivalence_loyer_minimale_out
    calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil = result_13.coefficient_prise_en_charge_d832_25_seuil_out
    calcul_apl_logement_foyer_dot_aide_finale_formule = result_13.aide_finale_formule_out
    calcul_apl_logement_foyer_dot_traitement_aide_finale_montant_minimal = result_13.traitement_aide_finale_montant_minimal_out
    try:
        if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                             start_line=4265, start_column=14, end_line=4265, end_column=41,
                                             law_headings=["Article 40",
                                                           "Chapitre VII : Calcul des allocations de logement en secteur logement-foyer",
                                                           "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_9 >=
                                                                                                                                                                                 date_of_numbers(2021, 10, 1))):
            if (nombre_personnes_a_charge_6 ==
                    integer_of_string("0")):
                temp_montant_forfaitaire_charges = money_of_cents_string(
                    "5422")
            else:
                temp_montant_forfaitaire_charges = (money_of_cents_string("5422") +
                                                    (money_of_cents_string("1229") *
                                                     decimal_of_integer(nombre_personnes_a_charge_6)))
        else:
            temp_montant_forfaitaire_charges = dead_value
            raise EmptyError
    except EmptyError:
        temp_montant_forfaitaire_charges = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=966, start_column=10,
                                             end_line=966, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_charges = log_variable_definition(["CalculAllocationLogementFoyer",
                                                           "montant_forfaitaire_charges"], temp_montant_forfaitaire_charges)
    try:
        def temp_equivalence_loyer(_: Any):
            raise EmptyError

        def temp_equivalence_loyer_1(_: Any):
            return False

        def temp_equivalence_loyer_2(_: Any):
            try:
                match_arg_366 = categorie_equivalence_loyer_d842_16
                if match_arg_366.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambre:
                    _ = match_arg_366.value
                    temp_equivalence_loyer_3 = False
                elif match_arg_366.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreRehabilitee:
                    _ = match_arg_366.value
                    temp_equivalence_loyer_3 = False
                elif match_arg_366.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_366.value
                    temp_equivalence_loyer_3 = False
                elif match_arg_366.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_366.value
                    temp_equivalence_loyer_3 = True
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=4360, start_column=6,
                                                     end_line=4361, end_column=24, law_headings=["Article 43",
                                                                                                 "Chapitre VII : Calcul des allocations de logement en secteur logement-foyer",
                                                                                                 "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_9 >=
                                                                                                                                                                                                                        date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                       temp_equivalence_loyer_3)):
                    match_arg_367 = situation_familiale_calcul_apl_6
                    if match_arg_367.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_367.value
                        return money_of_cents_string("17012")
                    elif match_arg_367.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_367.value
                        return money_of_cents_string("26440")
                else:
                    raise EmptyError
            except EmptyError:
                match_arg_368 = categorie_equivalence_loyer_d842_16
                if match_arg_368.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambre:
                    _ = match_arg_368.value
                    temp_equivalence_loyer_4 = False
                elif match_arg_368.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreRehabilitee:
                    _ = match_arg_368.value
                    temp_equivalence_loyer_4 = True
                elif match_arg_368.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                    _ = match_arg_368.value
                    temp_equivalence_loyer_4 = False
                elif match_arg_368.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                    _ = match_arg_368.value
                    temp_equivalence_loyer_4 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                     start_line=4324, start_column=6,
                                                     end_line=4325, end_column=41, law_headings=["Article 43",
                                                                                                 "Chapitre VII : Calcul des allocations de logement en secteur logement-foyer",
                                                                                                 "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_9 >=
                                                                                                                                                                                                                        date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                       temp_equivalence_loyer_4)):
                    match_arg_369 = situation_familiale_calcul_apl_6
                    if match_arg_369.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                        _ = match_arg_369.value
                        return money_of_cents_string("17012")
                    elif match_arg_369.code == SituationFamilialeCalculAPL_Code.Couple:
                        _ = match_arg_369.value
                        return money_of_cents_string("26440")
                else:
                    raise EmptyError

        def temp_equivalence_loyer_5(_: Any):
            match_arg_370 = categorie_equivalence_loyer_d842_16
            if match_arg_370.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambre:
                _ = match_arg_370.value
                temp_equivalence_loyer_6 = False
            elif match_arg_370.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreRehabilitee:
                _ = match_arg_370.value
                temp_equivalence_loyer_6 = False
            elif match_arg_370.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                _ = match_arg_370.value
                temp_equivalence_loyer_6 = True
            elif match_arg_370.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                _ = match_arg_370.value
                temp_equivalence_loyer_6 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=4342, start_column=6,
                                                 end_line=4343, end_column=38, law_headings=["Article 43",
                                                                                             "Chapitre VII : Calcul des allocations de logement en secteur logement-foyer",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_9 >=
                                                                                                                                                                                                                    date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                   temp_equivalence_loyer_6)):
                match_arg_371 = situation_familiale_calcul_apl_6
                if match_arg_371.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_371.value
                    return money_of_cents_string("20640")
                elif match_arg_371.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_371.value
                    return money_of_cents_string("32073")
            else:
                raise EmptyError

        def temp_equivalence_loyer_7(_: Any):
            match_arg_372 = categorie_equivalence_loyer_d842_16
            if match_arg_372.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambre:
                _ = match_arg_372.value
                temp_equivalence_loyer_8 = True
            elif match_arg_372.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.EtudiantLogeEnChambreRehabilitee:
                _ = match_arg_372.value
                temp_equivalence_loyer_8 = False
            elif match_arg_372.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.PersonnesAgeesSelon3DeD842_16:
                _ = match_arg_372.value
                temp_equivalence_loyer_8 = False
            elif match_arg_372.code == CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes:
                _ = match_arg_372.value
                temp_equivalence_loyer_8 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=4307, start_column=6,
                                                 end_line=4307, end_column=74, law_headings=["Article 43",
                                                                                             "Chapitre VII : Calcul des allocations de logement en secteur logement-foyer",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_9 >=
                                                                                                                                                                                                                    date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                   temp_equivalence_loyer_8)):
                match_arg_373 = situation_familiale_calcul_apl_6
                if match_arg_373.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_373.value
                    return money_of_cents_string("8414")
                elif match_arg_373.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_373.value
                    return money_of_cents_string("13100")
            else:
                raise EmptyError
        temp_equivalence_loyer_9 = handle_default([temp_equivalence_loyer_7,
                                                  temp_equivalence_loyer_5,
                                                  temp_equivalence_loyer_2],
                                                  temp_equivalence_loyer_1,
                                                  temp_equivalence_loyer)
    except EmptyError:
        temp_equivalence_loyer_9 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=965, start_column=10,
                                             end_line=965, end_column=27,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    equivalence_loyer = log_variable_definition(["CalculAllocationLogementFoyer",
                                                 "équivalence_loyer"], temp_equivalence_loyer_9)
    try:
        def temp_traitement_aide_finale_minoration_forfaitaire_3(param_25: Money):
            try:
                if ((param_25 - montant_forfaitaire_d842_15) <
                        money_of_cents_string("0")):
                    return money_of_cents_string("0")
                else:
                    return (param_25 - montant_forfaitaire_d842_15)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=979,
                                                     start_column=10,
                                                     end_line=979,
                                                     end_column=32,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_minoration_forfaitaire_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=979, start_column=10,
                                             end_line=979, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_3 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                               "traitement_aide_finale_minoration_forfaitaire"],
                                                                              temp_traitement_aide_finale_minoration_forfaitaire_3)
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                            "calcul_équivalence_loyer_minimale.ressources_ménage_arrondies"],
                                                                                                           ressources_menage_arrondies_5)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=614, start_column=10,
                                             end_line=614, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2 = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                      "calcul_équivalence_loyer_minimale.condition_2_du_832_25"],
                                                                                                     True)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=615, start_column=10,
                                             end_line=615, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                       "calcul_équivalence_loyer_minimale.n_nombre_parts_d832_25"],
                                                                                                      calcul_nombre_parts_dot_n_nombre_parts_d832_25_1)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=616, start_column=10,
                                             end_line=616, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2
    result_14 = log_end_call(["CalculAllocationLogementFoyer",
                              "calcul_équivalence_loyer_minimale",
                              "CalculÉquivalenceLoyerMinimale"],
                             log_begin_call(["CalculAllocationLogementFoyer",
                                             "calcul_équivalence_loyer_minimale",
                                             "CalculÉquivalenceLoyerMinimale"],
                                            calcul_equivalence_loyer_minimale,
                                            CalculEquivalenceLoyerMinimaleIn(ressources_menage_arrondies_in=calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_2,
                                                                             condition_2_du_832_25_in=calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_2,
                                                                             n_nombre_parts_d832_25_in=calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_2)))
    calcul_equivalence_loyer_minimale_dot_montant_2 = result_14.montant_out
    try:
        temp_coefficient_prise_en_charge = calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil
    except EmptyError:
        temp_coefficient_prise_en_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=964, start_column=10,
                                             end_line=964, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge = log_variable_definition(["CalculAllocationLogementFoyer",
                                                           "coefficient_prise_en_charge"], temp_coefficient_prise_en_charge)
    try:
        def temp_depense_nette_minimale(param_26: Money):
            try:
                return ((equivalence_loyer + montant_forfaitaire_charges) -
                        param_26)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=959,
                                                     start_column=11,
                                                     end_line=959,
                                                     end_column=33,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_depense_nette_minimale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=959, start_column=11,
                                             end_line=959, end_column=33,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    depense_nette_minimale = log_variable_definition(["CalculAllocationLogementFoyer",
                                                      "dépense_nette_minimale"], temp_depense_nette_minimale)
    try:
        temp_loyer_minimal = calcul_equivalence_loyer_minimale_dot_montant_2
    except EmptyError:
        temp_loyer_minimal = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=967, start_column=10,
                                             end_line=967, end_column=23,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    loyer_minimal = log_variable_definition(["CalculAllocationLogementFoyer",
                                             "loyer_minimal"], temp_loyer_minimal)
    try:
        def temp_abattement_depense_nette_minimale(param_27: Money):
            try:
                if (log_end_call(["CalculAllocationLogementFoyer",
                    "dépense_nette_minimale"],
                                 log_variable_definition(["CalculAllocationLogementFoyer",
                                                          "dépense_nette_minimale", "output"],
                                                         log_begin_call(["CalculAllocationLogementFoyer",
                                                                         "dépense_nette_minimale"], depense_nette_minimale,
                                                                        log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                 "dépense_nette_minimale", "input"], param_27)))) <
                        montant_minimal_depense_nette_d842_17):
                    return (montant_minimal_depense_nette_d842_17 -
                            log_end_call(["CalculAllocationLogementFoyer",
                                          "dépense_nette_minimale"],
                                         log_variable_definition(["CalculAllocationLogementFoyer",
                                                                  "dépense_nette_minimale", "output"],
                                                                 log_begin_call(["CalculAllocationLogementFoyer",
                                                                                 "dépense_nette_minimale"], depense_nette_minimale,
                                                                                log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                         "dépense_nette_minimale", "input"], param_27)))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=960,
                                                     start_column=11,
                                                     end_line=960,
                                                     end_column=44,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_abattement_depense_nette_minimale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=960, start_column=11,
                                             end_line=960, end_column=44,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    abattement_depense_nette_minimale = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                 "abattement_dépense_nette_minimale"],
                                                                temp_abattement_depense_nette_minimale)
    try:
        temp_aide_finale_formule_5 = (((equivalence_loyer +
                                        montant_forfaitaire_charges) - loyer_minimal) *
                                      coefficient_prise_en_charge)
    except EmptyError:
        temp_aide_finale_formule_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=977, start_column=10,
                                             end_line=977, end_column=29,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_4 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                     "aide_finale_formule"], temp_aide_finale_formule_5)
    try:
        def temp_traitement_aide_finale_depense_nette_minimale(param_28: Money):
            try:
                if ((log_end_call(["CalculAllocationLogementFoyer",
                    "traitement_aide_finale_minoration_forfaitaire"],
                                  log_variable_definition(["CalculAllocationLogementFoyer",
                                                           "traitement_aide_finale_minoration_forfaitaire",
                                                           "output"],
                                                          log_begin_call(["CalculAllocationLogementFoyer",
                                                                          "traitement_aide_finale_minoration_forfaitaire"],
                                                                         traitement_aide_finale_minoration_forfaitaire_3,
                                                                         log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                                                  "input"], param_28)))) -
                     log_end_call(["CalculAllocationLogementFoyer",
                                  "abattement_dépense_nette_minimale"],
                                  log_variable_definition(["CalculAllocationLogementFoyer",
                                                          "abattement_dépense_nette_minimale", "output"],
                                                          log_begin_call(["CalculAllocationLogementFoyer",
                                                                         "abattement_dépense_nette_minimale"],
                                                                         abattement_depense_nette_minimale,
                                                                         log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                 "abattement_dépense_nette_minimale", "input"],
                                                                                                 log_end_call(["CalculAllocationLogementFoyer",
                                                                                                              "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                              log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                      "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                       "output"],
                                                                                                                                      log_begin_call(["CalculAllocationLogementFoyer",
                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                     traitement_aide_finale_minoration_forfaitaire_3,
                                                                                                                                                     log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                              "input"], param_28))))))))) <
                        money_of_cents_string("0")):
                    return money_of_cents_string("0")
                else:
                    return (log_end_call(["CalculAllocationLogementFoyer",
                                          "traitement_aide_finale_minoration_forfaitaire"],
                                         log_variable_definition(["CalculAllocationLogementFoyer",
                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                  "output"],
                                                                 log_begin_call(["CalculAllocationLogementFoyer",
                                                                                 "traitement_aide_finale_minoration_forfaitaire"],
                                                                                traitement_aide_finale_minoration_forfaitaire_3,
                                                                                log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                         "traitement_aide_finale_minoration_forfaitaire",
                                                                                                         "input"], param_28)))) -
                            log_end_call(["CalculAllocationLogementFoyer",
                                          "abattement_dépense_nette_minimale"],
                                         log_variable_definition(["CalculAllocationLogementFoyer",
                                                                  "abattement_dépense_nette_minimale", "output"],
                                                                 log_begin_call(["CalculAllocationLogementFoyer",
                                                                                 "abattement_dépense_nette_minimale"],
                                                                                abattement_depense_nette_minimale,
                                                                                log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                         "abattement_dépense_nette_minimale", "input"],
                                                                                                        log_end_call(["CalculAllocationLogementFoyer",
                                                                                                                      "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                     log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                              "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                              "output"],
                                                                                                                                             log_begin_call(["CalculAllocationLogementFoyer",
                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                            traitement_aide_finale_minoration_forfaitaire_3,
                                                                                                                                                            log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                                     "input"], param_28)))))))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=980,
                                                     start_column=10,
                                                     end_line=980,
                                                     end_column=32,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_depense_nette_minimale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=980, start_column=10,
                                             end_line=980, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_depense_nette_minimale = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                             "traitement_aide_finale_dépense_nette_minimale"],
                                                                            temp_traitement_aide_finale_depense_nette_minimale)
    try:
        def temp_traitement_aide_finale_redevance(param_29: Money):
            try:
                if (log_end_call(["CalculAllocationLogementFoyer",
                    "traitement_aide_finale_dépense_nette_minimale"],
                                 log_variable_definition(["CalculAllocationLogementFoyer",
                                                          "traitement_aide_finale_dépense_nette_minimale",
                                                          "output"],
                                                         log_begin_call(["CalculAllocationLogementFoyer",
                                                                         "traitement_aide_finale_dépense_nette_minimale"],
                                                                        traitement_aide_finale_depense_nette_minimale,
                                                                        log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                 "traitement_aide_finale_dépense_nette_minimale",
                                                                                                 "input"], param_29)))) > redevance_1):
                    return redevance_1
                else:
                    return log_end_call(["CalculAllocationLogementFoyer",
                                         "traitement_aide_finale_dépense_nette_minimale"],
                                        log_variable_definition(["CalculAllocationLogementFoyer",
                                                                 "traitement_aide_finale_dépense_nette_minimale",
                                                                 "output"],
                                                                log_begin_call(["CalculAllocationLogementFoyer",
                                                                                "traitement_aide_finale_dépense_nette_minimale"],
                                                                               traitement_aide_finale_depense_nette_minimale,
                                                                               log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                        "traitement_aide_finale_dépense_nette_minimale",
                                                                                                        "input"], param_29))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=981,
                                                     start_column=10,
                                                     end_line=981,
                                                     end_column=19,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_redevance = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=981, start_column=10,
                                             end_line=981, end_column=19,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_redevance = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                "traitement_aide_finale_redevance"],
                                                               temp_traitement_aide_finale_redevance)
    try:
        def temp_traitement_aide_finale_contributions_sociales_arrondi_3(param_30: Money):
            try:
                if ((money_round(((log_end_call(["CalculAllocationLogementFoyer",
                    "traitement_aide_finale_redevance"],
                                                log_variable_definition(["CalculAllocationLogementFoyer",
                                                                         "traitement_aide_finale_redevance", "output"],
                                                                        log_begin_call(["CalculAllocationLogementFoyer",
                                                                                        "traitement_aide_finale_redevance"],
                                                                                       traitement_aide_finale_redevance,
                                                                                       log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                "traitement_aide_finale_redevance", "input"],
                                                                                                               param_30)))) -
                                   log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                 "montant"],
                                 log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                         log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_3,
                                                                        log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                log_end_call(["CalculAllocationLogementFoyer",
                                                                                                              "traitement_aide_finale_redevance"],
                                                                                                log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                         "traitement_aide_finale_redevance", "output"],
                                                                                                                        log_begin_call(["CalculAllocationLogementFoyer",
                                                                                                                                        "traitement_aide_finale_redevance"],
                                                                                                                                       traitement_aide_finale_redevance,
                                                                                                                                       log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                                "traitement_aide_finale_redevance", "input"],
                                                                                                                                       param_30))))))))) - money_of_cents_string("50"))) +
                     log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                  "montant"],
                                  log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                          log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_3,
                                                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                 log_end_call(["CalculAllocationLogementFoyer",
                                                                                                              "traitement_aide_finale_redevance"],
                                                                                                              log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                      "traitement_aide_finale_redevance", "output"],
                                                                                                                                      log_begin_call(["CalculAllocationLogementFoyer",
                                                                                                                                                     "traitement_aide_finale_redevance"],
                                                                                                                                                     traitement_aide_finale_redevance,
                                                                                                                                                     log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                                             "traitement_aide_finale_redevance", "input"],
                                                                                                                                                                             param_30))))))))) >=
                        money_of_cents_string("0")):
                    return (money_round(((log_end_call(["CalculAllocationLogementFoyer",
                                                        "traitement_aide_finale_redevance"],
                                                       log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                "traitement_aide_finale_redevance", "output"],
                                                                               log_begin_call(["CalculAllocationLogementFoyer",
                                                                                               "traitement_aide_finale_redevance"],
                                                                                              traitement_aide_finale_redevance,
                                                                                              log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                       "traitement_aide_finale_redevance", "input"],
                                                                                                                      param_30)))) -
                                          log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                        "montant"],
                                                       log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                "montant", "output"],
                                                                               log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                               "montant"], contributions_sociales_dot_montant_3,
                                                                                              log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                                       "montant", "input"],
                                                                                                                      log_end_call(["CalculAllocationLogementFoyer",
                                                                                                                                    "traitement_aide_finale_redevance"],
                                                                                                                                   log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                            "traitement_aide_finale_redevance", "output"],
                                                                                                                                                           log_begin_call(["CalculAllocationLogementFoyer",
                                                                                                                                                                           "traitement_aide_finale_redevance"],
                                                                                                                                                                          traitement_aide_finale_redevance,
                                                                                                                                                                          log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                                                                   "traitement_aide_finale_redevance", "input"],
                                                                                                                                                                                                  param_30))))))))) - money_of_cents_string("50"))) +
                            log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                          "montant"],
                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                  "montant", "output"],
                                                                 log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                 "montant"], contributions_sociales_dot_montant_3,
                                                                                log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                         "montant", "input"],
                                                                                                        log_end_call(["CalculAllocationLogementFoyer",
                                                                                                                      "traitement_aide_finale_redevance"],
                                                                                                                     log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                              "traitement_aide_finale_redevance", "output"],
                                                                                                                                             log_begin_call(["CalculAllocationLogementFoyer",
                                                                                                                                                             "traitement_aide_finale_redevance"],
                                                                                                                                                            traitement_aide_finale_redevance,
                                                                                                                                                            log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                                                                                                     "traitement_aide_finale_redevance", "input"],
                                                                                                                                                                                    param_30)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=982,
                                                     start_column=10,
                                                     end_line=982,
                                                     end_column=40,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_contributions_sociales_arrondi_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=982, start_column=10,
                                             end_line=982, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_3 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                       "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                                      temp_traitement_aide_finale_contributions_sociales_arrondi_3)
    try:
        def temp_traitement_aide_finale_montant_minimal_3(param_31: Money):
            try:
                if (log_end_call(["CalculAllocationLogementFoyer",
                    "traitement_aide_finale_contributions_sociales_arrondi"],
                                 log_variable_definition(["CalculAllocationLogementFoyer",
                                                          "traitement_aide_finale_contributions_sociales_arrondi",
                                                          "output"],
                                                         log_begin_call(["CalculAllocationLogementFoyer",
                                                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                        traitement_aide_finale_contributions_sociales_arrondi_3,
                                                                        log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                 "input"], param_31)))) <
                        montant_minimal_aide_d842_15):
                    return money_of_cents_string("0")
                else:
                    return log_end_call(["CalculAllocationLogementFoyer",
                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                        log_variable_definition(["CalculAllocationLogementFoyer",
                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                 "output"],
                                                                log_begin_call(["CalculAllocationLogementFoyer",
                                                                                "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                               traitement_aide_finale_contributions_sociales_arrondi_3,
                                                                               log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                        "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                        "input"], param_31))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=983,
                                                     start_column=10,
                                                     end_line=983,
                                                     end_column=25,
                                                     law_headings=["Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_montant_minimal_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=983, start_column=10,
                                             end_line=983, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_3 = log_variable_definition(["CalculAllocationLogementFoyer",
                                                                        "traitement_aide_finale_montant_minimal"],
                                                                       temp_traitement_aide_finale_montant_minimal_3)
    return CalculAllocationLogementFoyerOut(coefficient_prise_en_charge_out=coefficient_prise_en_charge,
                                            equivalence_loyer_out=equivalence_loyer,
                                            montant_forfaitaire_charges_out=montant_forfaitaire_charges,
                                            loyer_minimal_out=loyer_minimal,
                                            aide_finale_formule_out=aide_finale_formule_4,
                                            traitement_aide_finale_montant_minimal_out=traitement_aide_finale_montant_minimal_3)


def calcul_allocation_logement_accession_propriete(calcul_allocation_logement_accession_propriete_in: CalculAllocationLogementAccessionProprieteIn):
    ressources_menage_arrondies_base_1 = calcul_allocation_logement_accession_propriete_in.ressources_menage_arrondies_base_in
    nombre_personnes_a_charge_7 = calcul_allocation_logement_accession_propriete_in.nombre_personnes_a_charge_in
    situation_familiale_calcul_apl_7 = calcul_allocation_logement_accession_propriete_in.situation_familiale_calcul_apl_in
    zone_5 = calcul_allocation_logement_accession_propriete_in.zone_in
    date_courante_10 = calcul_allocation_logement_accession_propriete_in.date_courante_in
    mensualite_principale_1 = calcul_allocation_logement_accession_propriete_in.mensualite_principale_in
    situation_r822_11_13_17_1 = calcul_allocation_logement_accession_propriete_in.situation_r822_11_13_17_in
    date_signature_pret_1 = calcul_allocation_logement_accession_propriete_in.date_signature_pret_in
    type_travaux_logement_1 = calcul_allocation_logement_accession_propriete_in.type_travaux_logement_in
    local_habite_premiere_fois_beneficiaire_1 = calcul_allocation_logement_accession_propriete_in.local_habite_premiere_fois_beneficiaire_in
    date_entree_logement_1 = calcul_allocation_logement_accession_propriete_in.date_entree_logement_in
    charges_mensuelles_pret = calcul_allocation_logement_accession_propriete_in.charges_mensuelles_pret_in
    copropriete_1 = calcul_allocation_logement_accession_propriete_in.copropriete_in
    try:
        temp_montant_forfaitaire_d842_6 = money_of_cents_string("500")
    except EmptyError:
        temp_montant_forfaitaire_d842_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=880, start_column=11,
                                             end_line=880, end_column=37,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d842_6 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                          "montant_forfaitaire_d842_6"], temp_montant_forfaitaire_d842_6)
    try:
        temp_taux_francs_vers_euros_1 = (decimal_of_string("1.") /
                                         decimal_of_string("6.55957"))
    except EmptyError:
        temp_taux_francs_vers_euros_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=883, start_column=11,
                                             end_line=883, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    taux_francs_vers_euros_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                        "taux_francs_vers_euros"], temp_taux_francs_vers_euros_1)
    try:
        temp_montant_minimal_aide_d842_6 = money_of_cents_string("1000")
    except EmptyError:
        temp_montant_minimal_aide_d842_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=886, start_column=11,
                                             end_line=886, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_minimal_aide_d842_6 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                           "montant_minimal_aide_d842_6"], temp_montant_minimal_aide_d842_6)
    try:
        temp_montant_forfaitaire_d842_11 = money_of_cents_string("1500")
    except EmptyError:
        temp_montant_forfaitaire_d842_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=887, start_column=11,
                                             end_line=887, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d842_11 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                           "montant_forfaitaire_d842_11"], temp_montant_forfaitaire_d842_11)
    try:
        temp_montant_forfaitaire_d842_12 = money_of_cents_string("390000")
    except EmptyError:
        temp_montant_forfaitaire_d842_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=888, start_column=11,
                                             end_line=888, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_d842_12 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                           "montant_forfaitaire_d842_12"], temp_montant_forfaitaire_d842_12)
    try:
        temp_coefficient_d842_11 = decimal_of_string("0.0234")
    except EmptyError:
        temp_coefficient_d842_11 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=889, start_column=11,
                                             end_line=889, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    coefficient_d842_11 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                   "coefficient_d842_11"], temp_coefficient_d842_11)
    try:
        temp_coefficient_d842_12 = decimal_of_string("16.25")
    except EmptyError:
        temp_coefficient_d842_12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=890, start_column=11,
                                             end_line=890, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    coefficient_d842_12 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                   "coefficient_d842_12"], temp_coefficient_d842_12)
    try:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_3 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                            "calcul_nombre_parts.nombre_personnes_à_charge"],
                                                                                           nombre_personnes_a_charge_7)
    except EmptyError:
        temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=682, start_column=10,
                                             end_line=682, end_column=35,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_nombre_personnes_a_charge_3 = temp_calcul_nombre_parts_dot_nombre_personnes_a_charge_3
    try:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_3 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                 "calcul_nombre_parts.situation_familiale_calcul_apl"],
                                                                                                situation_familiale_calcul_apl_7)
    except EmptyError:
        temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=683, start_column=10,
                                             end_line=683, end_column=40,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_nombre_parts_dot_situation_familiale_calcul_apl_3 = temp_calcul_nombre_parts_dot_situation_familiale_calcul_apl_3
    result_15 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                              "calcul_nombre_parts", "CalculNombrePartsAccessionPropriété"],
                             log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                             "calcul_nombre_parts", "CalculNombrePartsAccessionPropriété"],
                                            calcul_nombre_parts_accession_propriete,
                                            CalculNombrePartsAccessionProprieteIn(nombre_personnes_a_charge_in=calcul_nombre_parts_dot_nombre_personnes_a_charge_3,
                                                                                  situation_familiale_calcul_apl_in=calcul_nombre_parts_dot_situation_familiale_calcul_apl_3)))
    calcul_nombre_parts_dot_n_nombre_parts_d832_11_1 = result_15.n_nombre_parts_d832_11_out
    try:
        temp_contributions_sociales_dot_date_courante_4 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                   "contributions_sociales.date_courante"], date_courante_10)
    except EmptyError:
        temp_contributions_sociales_dot_date_courante_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=545, start_column=10,
                                             end_line=545, end_column=23,
                                             law_headings=["Calcul des contributions sociales s'appliquant aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    contributions_sociales_dot_date_courante_4 = temp_contributions_sociales_dot_date_courante_4
    result_16 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                              "contributions_sociales",
                              "ContributionsSocialesAidesPersonnelleLogement"],
                             log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                             "contributions_sociales",
                                             "ContributionsSocialesAidesPersonnelleLogement"],
                                            contributions_sociales_aides_personnelle_logement,
                                            ContributionsSocialesAidesPersonnelleLogementIn(date_courante_in=contributions_sociales_dot_date_courante_4)))
    contributions_sociales_dot_montant_4 = result_16.montant_out
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=4198, start_column=5,
                                                 end_line=4198, end_column=16, law_headings=["Article 37",
                                                                                             "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                                                    date_of_numbers(2021, 10, 1)) and
                                                                                                                                                                                                                   copropriete_1)):
                match_arg_374 = situation_familiale_calcul_apl_7
                if match_arg_374.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                    _ = match_arg_374.value
                    temp_montant_forfaitaire_charges_1 = money_of_cents_string(
                        "2710")
                elif match_arg_374.code == SituationFamilialeCalculAPL_Code.Couple:
                    _ = match_arg_374.value
                    temp_montant_forfaitaire_charges_1 = money_of_cents_string(
                        "5422")
                temp_montant_forfaitaire_charges_2 = (temp_montant_forfaitaire_charges_1 +
                                                      (money_of_cents_string("1229") *
                                                       decimal_of_integer(nombre_personnes_a_charge_7)))
            else:
                temp_montant_forfaitaire_charges_2 = dead_value
                raise EmptyError
        except EmptyError:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                 start_line=4144, start_column=14,
                                                 end_line=4144, end_column=41, law_headings=["Article 34",
                                                                                             "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                                             "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_10 >=
                                                                                                                                                                                                                   date_of_numbers(2021, 10, 1))):
                if (nombre_personnes_a_charge_7 ==
                        integer_of_string("0")):
                    temp_montant_forfaitaire_charges_2 = money_of_cents_string(
                        "5422")
                else:
                    temp_montant_forfaitaire_charges_2 = (money_of_cents_string("5422") +
                                                          (money_of_cents_string("1229") *
                                                           decimal_of_integer(nombre_personnes_a_charge_7)))
            else:
                temp_montant_forfaitaire_charges_2 = dead_value
                raise EmptyError
    except EmptyError:
        temp_montant_forfaitaire_charges_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=873, start_column=11,
                                             end_line=873, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    montant_forfaitaire_charges_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                             "montant_forfaitaire_charges"], temp_montant_forfaitaire_charges_2)
    try:
        def temp_traitement_aide_finale_minoration_forfaitaire_4(param_32: Money):
            try:
                if ((param_32 - montant_forfaitaire_d842_6) <
                        money_of_cents_string("0")):
                    return money_of_cents_string("0")
                else:
                    return (param_32 - montant_forfaitaire_d842_6)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=903,
                                                     start_column=10,
                                                     end_line=903,
                                                     end_column=32,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_minoration_forfaitaire_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=903, start_column=10,
                                             end_line=903, end_column=32,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_minoration_forfaitaire_4 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                               "traitement_aide_finale_minoration_forfaitaire"],
                                                                              temp_traitement_aide_finale_minoration_forfaitaire_4)
    try:
        def temp_calcul_plafond_mensualite_d842_6_base(param_33: Date):
            try:
                def temp_calcul_plafond_mensualite_d842_6_base_1(_: Any):
                    raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_2(_: Any):
                    return False

                def temp_calcul_plafond_mensualite_d842_6_base_3(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=4078, start_column=5,
                                                         end_line=4078, end_column=33,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and (param_33 >=
                                                                                                                                                                                                                                date_of_numbers(2019, 10, 1)))):
                        match_arg_375 = zone_5
                        if match_arg_375.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_375.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_376 = situation_familiale_calcul_apl_7
                                if match_arg_376.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_376.value
                                    return money_of_cents_string("31476")
                                elif match_arg_376.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_376.value
                                    return money_of_cents_string("37933")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("40787")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("41927")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("43106")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("44262")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("45200")
                                                else:
                                                    return (money_of_cents_string("45200") +
                                                            (money_of_cents_string("3936") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_375.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_375.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_377 = situation_familiale_calcul_apl_7
                                if match_arg_377.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_377.value
                                    return money_of_cents_string("27614")
                                elif match_arg_377.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_377.value
                                    return money_of_cents_string("33853")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("36646")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("37915")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("39222")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("40510")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("43378")
                                                else:
                                                    return (money_of_cents_string("43378") +
                                                            (money_of_cents_string("3771") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_375.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_375.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_378 = situation_familiale_calcul_apl_7
                                if match_arg_378.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_378.value
                                    return money_of_cents_string("25904")
                                elif match_arg_378.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_378.value
                                    return money_of_cents_string("31419")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34255")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35670")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("37107")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38521")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("41392")
                                                else:
                                                    return (money_of_cents_string("41392") +
                                                            (money_of_cents_string("3588") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_4(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=4033, start_column=5,
                                                         end_line=4033, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2017, 10, 1)) and (param_33 <
                                                                                                                                                                                                                                                                    date_of_numbers(2019, 10, 1))))):
                        match_arg_379 = zone_5
                        if match_arg_379.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_379.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_380 = situation_familiale_calcul_apl_7
                                if match_arg_380.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_380.value
                                    return money_of_cents_string("31382")
                                elif match_arg_380.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_380.value
                                    return money_of_cents_string("37820")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("40665")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("41801")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("42977")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("44130")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("45064")
                                                else:
                                                    return (money_of_cents_string("45064") +
                                                            (money_of_cents_string("3924") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_379.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_379.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_381 = situation_familiale_calcul_apl_7
                                if match_arg_381.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_381.value
                                    return money_of_cents_string("27531")
                                elif match_arg_381.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_381.value
                                    return money_of_cents_string("33751")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("36536")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("37801")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("39105")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("40389")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("43248")
                                                else:
                                                    return (money_of_cents_string("43248") +
                                                            (money_of_cents_string("3760") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_379.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_379.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_382 = situation_familiale_calcul_apl_7
                                if match_arg_382.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_382.value
                                    return money_of_cents_string("25826")
                                elif match_arg_382.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_382.value
                                    return money_of_cents_string("31325")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34152")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35564")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36996")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38406")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("41268")
                                                else:
                                                    return (money_of_cents_string("41268") +
                                                            (money_of_cents_string("3578") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_5(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3988, start_column=5,
                                                         end_line=3988, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2015, 10, 1)) and (param_33 <
                                                                                                                                                                                                                                                                    date_of_numbers(2017, 10, 1))))):
                        match_arg_383 = zone_5
                        if match_arg_383.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_383.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_384 = situation_familiale_calcul_apl_7
                                if match_arg_384.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_384.value
                                    return money_of_cents_string("31148")
                                elif match_arg_384.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_384.value
                                    return money_of_cents_string("37538")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("40362")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("41490")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("42657")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("43801")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("44729")
                                                else:
                                                    return (money_of_cents_string("44729") +
                                                            (money_of_cents_string("3895") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_383.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_383.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_385 = situation_familiale_calcul_apl_7
                                if match_arg_385.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_385.value
                                    return money_of_cents_string("27326")
                                elif match_arg_385.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_385.value
                                    return money_of_cents_string("33500")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("36264")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("37520")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("38814")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("40088")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("42926")
                                                else:
                                                    return (money_of_cents_string("42926") +
                                                            (money_of_cents_string("3732") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_383.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_383.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_386 = situation_familiale_calcul_apl_7
                                if match_arg_386.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_386.value
                                    return money_of_cents_string("25634")
                                elif match_arg_386.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_386.value
                                    return money_of_cents_string("31092")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("33898")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35299")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36721")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38120")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("40961")
                                                else:
                                                    return (money_of_cents_string("40961") +
                                                            (money_of_cents_string("3551") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_6(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3943, start_column=5,
                                                         end_line=3943, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2014, 10, 1)) and (param_33 <
                                                                                                                                                                                                                                                                    date_of_numbers(2015, 10, 1))))):
                        match_arg_387 = zone_5
                        if match_arg_387.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_387.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_388 = situation_familiale_calcul_apl_7
                                if match_arg_388.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_388.value
                                    return money_of_cents_string("31123")
                                elif match_arg_388.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_388.value
                                    return money_of_cents_string("37508")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("40330")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("41457")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("42623")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("43766")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("44693")
                                                else:
                                                    return (money_of_cents_string("44693") +
                                                            (money_of_cents_string("3892") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_387.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_387.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_389 = situation_familiale_calcul_apl_7
                                if match_arg_389.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_389.value
                                    return money_of_cents_string("27304")
                                elif match_arg_389.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_389.value
                                    return money_of_cents_string("33473")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("36235")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("37490")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("38783")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("40056")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("42892")
                                                else:
                                                    return (money_of_cents_string("42892") +
                                                            (money_of_cents_string("3729") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_387.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_387.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_390 = situation_familiale_calcul_apl_7
                                if match_arg_390.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_390.value
                                    return money_of_cents_string("25614")
                                elif match_arg_390.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_390.value
                                    return money_of_cents_string("31067")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("33871")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35271")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36692")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38090")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("40928")
                                                else:
                                                    return (money_of_cents_string("40928") +
                                                            (money_of_cents_string("3548") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_7(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3898, start_column=5,
                                                         end_line=3898, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2013, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2014, 10, 1))))):
                        match_arg_391 = zone_5
                        if match_arg_391.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_391.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_392 = situation_familiale_calcul_apl_7
                                if match_arg_392.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_392.value
                                    return money_of_cents_string("30947")
                                elif match_arg_392.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_392.value
                                    return money_of_cents_string("37295")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("40101")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("41222")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("42381")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("43518")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("44440")
                                                else:
                                                    return (money_of_cents_string("44440") +
                                                            (money_of_cents_string("3870") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_391.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_391.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_393 = situation_familiale_calcul_apl_7
                                if match_arg_393.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_393.value
                                    return money_of_cents_string("27149")
                                elif match_arg_393.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_393.value
                                    return money_of_cents_string("33283")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("36030")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("37278")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("38563")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("39829")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("42649")
                                                else:
                                                    return (money_of_cents_string("42659") +
                                                            (money_of_cents_string("3708") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_391.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_391.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_394 = situation_familiale_calcul_apl_7
                                if match_arg_394.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_394.value
                                    return money_of_cents_string("25469")
                                elif match_arg_394.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_394.value
                                    return money_of_cents_string("30891")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("33679")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35071")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36484")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("37874")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("40696")
                                                else:
                                                    return (money_of_cents_string("40696") +
                                                            (money_of_cents_string("3528") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_8(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3853, start_column=5,
                                                         end_line=3853, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2012, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2013, 1, 1))))):
                        match_arg_395 = zone_5
                        if match_arg_395.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_395.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_396 = situation_familiale_calcul_apl_7
                                if match_arg_396.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_396.value
                                    return money_of_cents_string("30296")
                                elif match_arg_396.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_396.value
                                    return money_of_cents_string("36510")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("39257")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("40354")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("41489")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("42602")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("43505")
                                                else:
                                                    return (money_of_cents_string("43505") +
                                                            (money_of_cents_string("3789") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_395.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_395.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_397 = situation_familiale_calcul_apl_7
                                if match_arg_397.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_397.value
                                    return money_of_cents_string("26578")
                                elif match_arg_397.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_397.value
                                    return money_of_cents_string("32582")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("35272")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("36493")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("37751")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38991")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("41751")
                                                else:
                                                    return (money_of_cents_string("41751") +
                                                            (money_of_cents_string("3630") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_395.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_395.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_398 = situation_familiale_calcul_apl_7
                                if match_arg_398.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_398.value
                                    return money_of_cents_string("24933")
                                elif match_arg_398.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_398.value
                                    return money_of_cents_string("30241")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("32970")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("34333")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("35716")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("37077")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("39839")
                                                else:
                                                    return (money_of_cents_string("39839") +
                                                            (money_of_cents_string("3454") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_9(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3808, start_column=5,
                                                         end_line=3808, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2011, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2012, 1, 1))))):
                        match_arg_399 = zone_5
                        if match_arg_399.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_399.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_400 = situation_familiale_calcul_apl_7
                                if match_arg_400.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_400.value
                                    return money_of_cents_string("29996")
                                elif match_arg_400.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_400.value
                                    return money_of_cents_string("36149")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("38868")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("39954")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("41078")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("42180")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("43074")
                                                else:
                                                    return (money_of_cents_string("43074") +
                                                            (money_of_cents_string("3751") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_399.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_399.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_401 = situation_familiale_calcul_apl_7
                                if match_arg_401.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_401.value
                                    return money_of_cents_string("26315")
                                elif match_arg_401.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_401.value
                                    return money_of_cents_string("32259")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34923")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("36132")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("37373")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38605")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("41338")
                                                else:
                                                    return (money_of_cents_string("41338") +
                                                            (money_of_cents_string("3594") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_399.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_399.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_402 = situation_familiale_calcul_apl_7
                                if match_arg_402.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_402.value
                                    return money_of_cents_string("24686")
                                elif match_arg_402.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_402.value
                                    return money_of_cents_string("29942")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("32644")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("33993")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("35362")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("36710")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("39445")
                                                else:
                                                    return (money_of_cents_string("39445") +
                                                            (money_of_cents_string("3420") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_10(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3763, start_column=5,
                                                         end_line=3763, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2010, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2011, 1, 1))))):
                        match_arg_403 = zone_5
                        if match_arg_403.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_403.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_404 = situation_familiale_calcul_apl_7
                                if match_arg_404.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_404.value
                                    return money_of_cents_string("29670")
                                elif match_arg_404.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_404.value
                                    return money_of_cents_string("35757")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("38445")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("39519")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("40601")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("41721")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("42605")
                                                else:
                                                    return (money_of_cents_string("42605") +
                                                            (money_of_cents_string("3710") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_403.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_403.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_405 = situation_familiale_calcul_apl_7
                                if match_arg_405.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_405.value
                                    return money_of_cents_string("26029")
                                elif match_arg_405.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_405.value
                                    return money_of_cents_string("31908")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34643")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35739")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36970")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38185")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("40888")
                                                else:
                                                    return (money_of_cents_string("40888") +
                                                            (money_of_cents_string("3555") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_403.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_403.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_406 = situation_familiale_calcul_apl_7
                                if match_arg_406.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_406.value
                                    return money_of_cents_string("24417")
                                elif match_arg_406.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_406.value
                                    return money_of_cents_string("29616")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("32289")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("33623")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("34977")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("36311")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("39016")
                                                else:
                                                    return (money_of_cents_string("39016") +
                                                            (money_of_cents_string("3383") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_11(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3718, start_column=5,
                                                         end_line=3718, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2009, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2010, 1, 1))))):
                        match_arg_407 = zone_5
                        if match_arg_407.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_407.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_408 = situation_familiale_calcul_apl_7
                                if match_arg_408.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_408.value
                                    return money_of_cents_string("29575")
                                elif match_arg_408.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_408.value
                                    return money_of_cents_string("35642")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("38322")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("39393")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("40501")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("41588")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("42469")
                                                else:
                                                    return (money_of_cents_string("42469") +
                                                            (money_of_cents_string("3698") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_407.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_407.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_409 = situation_familiale_calcul_apl_7
                                if match_arg_409.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_409.value
                                    return money_of_cents_string("25946")
                                elif match_arg_409.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_409.value
                                    return money_of_cents_string("31806")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34433")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35625")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36852")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38063")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("40758")
                                                else:
                                                    return (money_of_cents_string("40758") +
                                                            (money_of_cents_string("3544") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_407.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_407.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_410 = situation_familiale_calcul_apl_7
                                if match_arg_410.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_410.value
                                    return money_of_cents_string("24339")
                                elif match_arg_410.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_410.value
                                    return money_of_cents_string("29522")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("32186")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("33516")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("34865")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("36195")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("38892")
                                                else:
                                                    return (money_of_cents_string("38892") +
                                                            (money_of_cents_string("3372") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_12(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3673, start_column=5,
                                                         end_line=3673, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2008, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2009, 1, 1))))):
                        match_arg_411 = zone_5
                        if match_arg_411.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_411.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_412 = situation_familiale_calcul_apl_7
                                if match_arg_412.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_412.value
                                    return money_of_cents_string("28728")
                                elif match_arg_412.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_412.value
                                    return money_of_cents_string("34621")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("37224")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("38264")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("39340")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("40396")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("41252")
                                                else:
                                                    return (money_of_cents_string("41252") +
                                                            (money_of_cents_string("3592") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_411.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_411.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_413 = situation_familiale_calcul_apl_7
                                if match_arg_413.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_413.value
                                    return money_of_cents_string("25203")
                                elif match_arg_413.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_413.value
                                    return money_of_cents_string("30895")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("33446")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("34604")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("35796")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("36972")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("39590")
                                                else:
                                                    return (money_of_cents_string("39590") +
                                                            (money_of_cents_string("3442") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_411.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_411.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_414 = situation_familiale_calcul_apl_7
                                if match_arg_414.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_414.value
                                    return money_of_cents_string("23642")
                                elif match_arg_414.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_414.value
                                    return money_of_cents_string("28676")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("31264")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("32556")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("33866")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("35158")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("37778")
                                                else:
                                                    return (money_of_cents_string("37778") +
                                                            (money_of_cents_string("3275") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_13(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3628, start_column=5,
                                                         end_line=3628, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2007, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2008, 1, 1))))):
                        match_arg_415 = zone_5
                        if match_arg_415.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_415.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_416 = situation_familiale_calcul_apl_7
                                if match_arg_416.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_416.value
                                    return money_of_cents_string("27956")
                                elif match_arg_416.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_416.value
                                    return money_of_cents_string("33691")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("36224")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("37236")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("38283")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("39311")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("40144")
                                                else:
                                                    return (money_of_cents_string("40144") +
                                                            (money_of_cents_string("3496") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_415.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_415.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_417 = situation_familiale_calcul_apl_7
                                if match_arg_417.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_417.value
                                    return money_of_cents_string("24526")
                                elif match_arg_417.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_417.value
                                    return money_of_cents_string("30065")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("32548")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("33675")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("34865")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("35979")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("38527")
                                                else:
                                                    return (money_of_cents_string("38527") +
                                                            (money_of_cents_string("3350") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_415.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_415.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_418 = situation_familiale_calcul_apl_7
                                if match_arg_418.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_418.value
                                    return money_of_cents_string("23007")
                                elif match_arg_418.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_418.value
                                    return money_of_cents_string("27906")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("30424")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("31682")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("32956")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("34214")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("36733")
                                                else:
                                                    return (money_of_cents_string("36733") +
                                                            (money_of_cents_string("3187") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_14(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3583, start_column=5,
                                                         end_line=3583, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2005, 9, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2007, 1, 1))))):
                        match_arg_419 = zone_5
                        if match_arg_419.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_419.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_420 = situation_familiale_calcul_apl_7
                                if match_arg_420.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_420.value
                                    return money_of_cents_string("27195")
                                elif match_arg_420.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_420.value
                                    return money_of_cents_string("32773")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("35237")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("36222")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("37240")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("38240")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("39051")
                                                else:
                                                    return (money_of_cents_string("39051") +
                                                            (money_of_cents_string("3401") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_419.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_419.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_421 = situation_familiale_calcul_apl_7
                                if match_arg_421.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_421.value
                                    return money_of_cents_string("23858")
                                elif match_arg_421.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_421.value
                                    return money_of_cents_string("29246")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("31661")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("32758")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("33886")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("34999")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("37478")
                                                else:
                                                    return (money_of_cents_string("37478") +
                                                            (money_of_cents_string("3259") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_419.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_419.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_422 = situation_familiale_calcul_apl_7
                                if match_arg_422.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_422.value
                                    return money_of_cents_string("22380")
                                elif match_arg_422.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_422.value
                                    return money_of_cents_string("27146")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("29595")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("30819")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("32058")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("33282")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("35762")
                                                else:
                                                    return (money_of_cents_string("35762") +
                                                            (money_of_cents_string("3100") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_15(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3538, start_column=5,
                                                         end_line=3538, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2003, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2005, 9, 1))))):
                        match_arg_423 = zone_5
                        if match_arg_423.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_423.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_424 = situation_familiale_calcul_apl_7
                                if match_arg_424.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_424.value
                                    return money_of_cents_string("26714")
                                elif match_arg_424.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_424.value
                                    return money_of_cents_string("32194")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34614")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35582")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36582")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("37564")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("38361")
                                                else:
                                                    return (money_of_cents_string("38361") +
                                                            (money_of_cents_string("3341") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_423.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_423.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_425 = situation_familiale_calcul_apl_7
                                if match_arg_425.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_425.value
                                    return money_of_cents_string("23436")
                                elif match_arg_425.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_425.value
                                    return money_of_cents_string("28729")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("31101")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("32179")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("33287")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("34380")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("36815")
                                                else:
                                                    return (money_of_cents_string("36815") +
                                                            (money_of_cents_string("3201") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_423.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_423.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_426 = situation_familiale_calcul_apl_7
                                if match_arg_426.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_426.value
                                    return money_of_cents_string("21984")
                                elif match_arg_426.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_426.value
                                    return money_of_cents_string("26666")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("29072")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("30274")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("31491")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("32694")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("35130")
                                                else:
                                                    return (money_of_cents_string("35130") +
                                                            (money_of_cents_string("3045") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_16(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3491, start_column=5,
                                                         end_line=3491, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2002, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2003, 7, 1))))):
                        match_arg_427 = zone_5
                        if match_arg_427.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_427.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_428 = situation_familiale_calcul_apl_7
                                if match_arg_428.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_428.value
                                    return money_of_cents_string("26397")
                                elif match_arg_428.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_428.value
                                    return money_of_cents_string("31812")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("34204")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("35160")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("36148")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("37119")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("37906")
                                                else:
                                                    return (money_of_cents_string("37906") +
                                                            (money_of_cents_string("3301") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_427.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_427.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_429 = situation_familiale_calcul_apl_7
                                if match_arg_429.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_429.value
                                    return money_of_cents_string("23158")
                                elif match_arg_429.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_429.value
                                    return money_of_cents_string("28388")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("30732")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("31797")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("32892")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("33972")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("36378")
                                                else:
                                                    return (money_of_cents_string("36378") +
                                                            (money_of_cents_string("3163") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_427.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_427.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_430 = situation_familiale_calcul_apl_7
                                if match_arg_430.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_430.value
                                    return money_of_cents_string("21723")
                                elif match_arg_430.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_430.value
                                    return money_of_cents_string("26350")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("28727")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("29915")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("31118")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("32306")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("34713")
                                                else:
                                                    return (money_of_cents_string("34713") +
                                                            (money_of_cents_string("3009") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_17(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3446, start_column=5,
                                                         end_line=3446, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2002, 1, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2002, 7, 1))))):
                        match_arg_431 = zone_5
                        if match_arg_431.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_431.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_432 = situation_familiale_calcul_apl_7
                                if match_arg_432.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_432.value
                                    return money_of_cents_string("26084")
                                elif match_arg_432.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_432.value
                                    return money_of_cents_string("31435")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("33798")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("34743")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("35719")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("36679")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("37457")
                                                else:
                                                    return (money_of_cents_string("37457") +
                                                            (money_of_cents_string("3262") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_431.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_431.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_433 = situation_familiale_calcul_apl_7
                                if match_arg_433.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_433.value
                                    return money_of_cents_string("22883")
                                elif match_arg_433.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_433.value
                                    return money_of_cents_string("28051")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("30368")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("31420")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("32502")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("33569")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("35947")
                                                else:
                                                    return (money_of_cents_string("35947") +
                                                            (money_of_cents_string("3125") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                        elif match_arg_431.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_431.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_434 = situation_familiale_calcul_apl_7
                                if match_arg_434.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_434.value
                                    return money_of_cents_string("21465")
                                elif match_arg_434.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_434.value
                                    return money_of_cents_string("26038")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    return money_of_cents_string("28386")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        return money_of_cents_string("29560")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            return money_of_cents_string("30749")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                return money_of_cents_string("31923")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    return money_of_cents_string("34301")
                                                else:
                                                    return (money_of_cents_string("34301") +
                                                            (money_of_cents_string("2973") *
                                                             decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                 integer_of_string("5")))))
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_18(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3400, start_column=5,
                                                         end_line=3400, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2001, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2002, 1, 1))))):
                        match_arg_435 = zone_5
                        if match_arg_435.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_435.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_436 = situation_familiale_calcul_apl_7
                                if match_arg_436.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_436.value
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "171100")
                                elif match_arg_436.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_436.value
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "206200")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "221700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                            "227900")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                "234300")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                    "240600")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                        "245700")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_19 = (money_of_cents_string("245700") +
                                                                                                     (money_of_cents_string("21400") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_435.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_435.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_437 = situation_familiale_calcul_apl_7
                                if match_arg_437.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_437.value
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "150100")
                                elif match_arg_437.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_437.value
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "184000")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "199200")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                            "206100")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                "213200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                    "220200")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                        "235800")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_19 = (money_of_cents_string("235800") +
                                                                                                     (money_of_cents_string("20500") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_435.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_435.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_438 = situation_familiale_calcul_apl_7
                                if match_arg_438.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_438.value
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "140800")
                                elif match_arg_438.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_438.value
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "170800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                        "186200")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                            "193900")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                "201700")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                    "209400")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_19 = money_of_cents_string(
                                                        "225000")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_19 = (money_of_cents_string("225000") +
                                                                                                     (money_of_cents_string("19500") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_19 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_20(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3354, start_column=5,
                                                         end_line=3354, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(2000, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2001, 7, 1))))):
                        match_arg_439 = zone_5
                        if match_arg_439.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_439.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_440 = situation_familiale_calcul_apl_7
                                if match_arg_440.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_440.value
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "169100")
                                elif match_arg_440.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_440.value
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "203800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "219100")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                            "225200")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                "231500")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                    "237700")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                        "242800")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_21 = (money_of_cents_string("242800") +
                                                                                                     (money_of_cents_string("21100") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_439.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_439.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_441 = situation_familiale_calcul_apl_7
                                if match_arg_441.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_441.value
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "148300")
                                elif match_arg_441.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_441.value
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "181800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "196800")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                            "203700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                "210700")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                    "217600")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                        "233000")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_21 = (money_of_cents_string("233000") +
                                                                                                     (money_of_cents_string("20300") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_439.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_439.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_442 = situation_familiale_calcul_apl_7
                                if match_arg_442.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_442.value
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "139100")
                                elif match_arg_442.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_442.value
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "168800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                        "184000")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                            "191600")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                "199300")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                    "206900")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_21 = money_of_cents_string(
                                                        "222300")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_21 = (money_of_cents_string("222300") +
                                                                                                     (money_of_cents_string("19300") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_21 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_22(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3308, start_column=5,
                                                         end_line=3308, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(1999, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(2000, 7, 1))))):
                        match_arg_443 = zone_5
                        if match_arg_443.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_443.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_444 = situation_familiale_calcul_apl_7
                                if match_arg_444.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_444.value
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "167400")
                                elif match_arg_444.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_444.value
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "201800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "216900")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                            "223000")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                "229200")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                    "235300")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                        "240400")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_23 = (money_of_cents_string("240400") +
                                                                                                     (money_of_cents_string("20900") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_443.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_443.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_445 = situation_familiale_calcul_apl_7
                                if match_arg_445.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_445.value
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "146800")
                                elif match_arg_445.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_445.value
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "180000")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "194900")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                            "201700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                "208600")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                    "215400")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                        "230700")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_23 = (money_of_cents_string("230700") +
                                                                                                     (money_of_cents_string("20100") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_443.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_443.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_446 = situation_familiale_calcul_apl_7
                                if match_arg_446.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_446.value
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "137700")
                                elif match_arg_446.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_446.value
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "167100")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                        "182200")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                            "189700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                "197300")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                    "204900")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_23 = money_of_cents_string(
                                                        "220100")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_23 = (money_of_cents_string("220100") +
                                                                                                     (money_of_cents_string("19100") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_23 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_24(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3262, start_column=5,
                                                         end_line=3262, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(1998, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(1999, 7, 1))))):
                        match_arg_447 = zone_5
                        if match_arg_447.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_447.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_448 = situation_familiale_calcul_apl_7
                                if match_arg_448.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_448.value
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "167200")
                                elif match_arg_448.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_448.value
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "201600")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "216700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                            "222800")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                "229000")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                    "235100")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                        "240200")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_25 = (money_of_cents_string("240200") +
                                                                                                     (money_of_cents_string("20900") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_447.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_447.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_449 = situation_familiale_calcul_apl_7
                                if match_arg_449.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_449.value
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "146700")
                                elif match_arg_449.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_449.value
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "179800")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "194700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                            "201500")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                "208400")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                    "215200")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                        "230500")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_25 = (money_of_cents_string("230500") +
                                                                                                     (money_of_cents_string("20100") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_447.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_447.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_450 = situation_familiale_calcul_apl_7
                                if match_arg_450.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_450.value
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "137600")
                                elif match_arg_450.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_450.value
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "166900")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                        "182000")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                            "189500")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                "197100")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                    "204700")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_25 = money_of_cents_string(
                                                        "219900")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_25 = (money_of_cents_string("219900") +
                                                                                                     (money_of_cents_string("19100") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_25 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_26(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3216, start_column=5,
                                                         end_line=3216, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(1997, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(1998, 7, 1))))):
                        match_arg_451 = zone_5
                        if match_arg_451.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_451.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_452 = situation_familiale_calcul_apl_7
                                if match_arg_452.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_452.value
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "163300")
                                elif match_arg_452.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_452.value
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "196900")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "211600")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                            "217600")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                "223600")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                    "229600")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                        "234600")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_27 = (money_of_cents_string("234600") +
                                                                                                     (money_of_cents_string("20400") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_451.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_451.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_453 = situation_familiale_calcul_apl_7
                                if match_arg_453.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_453.value
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "143300")
                                elif match_arg_453.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_453.value
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "175600")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "190100")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                            "196600")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                "203500")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                    "210200")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                        "225100")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_27 = (money_of_cents_string("225100") +
                                                                                                     (money_of_cents_string("19600") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_451.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_451.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_454 = situation_familiale_calcul_apl_7
                                if match_arg_454.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_454.value
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "134400")
                                elif match_arg_454.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_454.value
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "163000")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                        "177700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                            "185100")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                "192500")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                    "199900")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_27 = money_of_cents_string(
                                                        "214700")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_27 = (money_of_cents_string("214700") +
                                                                                                     (money_of_cents_string("18700") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_27 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_28(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3170, start_column=5,
                                                         end_line=3170, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(1994, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(1997, 7, 1))))):
                        match_arg_455 = zone_5
                        if match_arg_455.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_455.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_456 = situation_familiale_calcul_apl_7
                                if match_arg_456.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_456.value
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "160400")
                                elif match_arg_456.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_456.value
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "193400")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "207800")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                            "213700")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                "219600")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                    "225500")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                        "230500")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_29 = (money_of_cents_string("230500") +
                                                                                                     (money_of_cents_string("20000") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_455.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_455.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_457 = situation_familiale_calcul_apl_7
                                if match_arg_457.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_457.value
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "140800")
                                elif match_arg_457.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_457.value
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "172500")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "186700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                            "193300")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                "199900")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                    "206500")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                        "221100")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_29 = (money_of_cents_string("221100") +
                                                                                                     (money_of_cents_string("19300") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_455.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_455.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_458 = situation_familiale_calcul_apl_7
                                if match_arg_458.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_458.value
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "132000")
                                elif match_arg_458.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_458.value
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "180100")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                        "174500")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                            "181800")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                "189100")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                    "194200")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_29 = money_of_cents_string(
                                                        "210900")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_29 = (money_of_cents_string("210900") +
                                                                                                     (money_of_cents_string("18400") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_29 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError

                def temp_calcul_plafond_mensualite_d842_6_base_30(_: Any):
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=3124, start_column=5,
                                                         end_line=3124, end_column=64,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), ((date_courante_10 >=
                                                                                                                                                                                              date_of_numbers(2020, 1, 1)) and ((param_33 >=
                                                                                                                                                                                                                                 date_of_numbers(1992, 7, 1)) and (param_33 <
                                                                                                                                                                                                                                                                   date_of_numbers(1994, 7, 1))))):
                        match_arg_459 = zone_5
                        if match_arg_459.code == ZoneDHabitation_Code.Zone1:
                            _ = match_arg_459.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_460 = situation_familiale_calcul_apl_7
                                if match_arg_460.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_460.value
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "158700")
                                elif match_arg_460.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_460.value
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "191300")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "205500")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                            "211300")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                "217100")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                    "222900")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                        "228000")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_31 = (money_of_cents_string("228000") +
                                                                                                     (money_of_cents_string("19800") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_459.code == ZoneDHabitation_Code.Zone2:
                            _ = match_arg_459.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_461 = situation_familiale_calcul_apl_7
                                if match_arg_461.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_461.value
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "139300")
                                elif match_arg_461.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_461.value
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "170600")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "184700")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                            "191200")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                "197700")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                    "204200")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                        "218700")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_31 = (money_of_cents_string("218700") +
                                                                                                     (money_of_cents_string("19100") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        elif match_arg_459.code == ZoneDHabitation_Code.Zone3:
                            _ = match_arg_459.value
                            if (nombre_personnes_a_charge_7 ==
                                    integer_of_string("0")):
                                match_arg_462 = situation_familiale_calcul_apl_7
                                if match_arg_462.code == SituationFamilialeCalculAPL_Code.PersonneSeule:
                                    _ = match_arg_462.value
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "130600")
                                elif match_arg_462.code == SituationFamilialeCalculAPL_Code.Couple:
                                    _ = match_arg_462.value
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "158400")
                            else:
                                if (nombre_personnes_a_charge_7 ==
                                        integer_of_string("1")):
                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                        "172600")
                                else:
                                    if (nombre_personnes_a_charge_7 ==
                                            integer_of_string("2")):
                                        temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                            "179800")
                                    else:
                                        if (nombre_personnes_a_charge_7 ==
                                                integer_of_string("3")):
                                            temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                "187000")
                                        else:
                                            if (nombre_personnes_a_charge_7 ==
                                                    integer_of_string("4")):
                                                temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                    "194200")
                                            else:
                                                if (nombre_personnes_a_charge_7 ==
                                                        integer_of_string("5")):
                                                    temp_calcul_plafond_mensualite_d842_6_base_31 = money_of_cents_string(
                                                        "208600")
                                                else:
                                                    temp_calcul_plafond_mensualite_d842_6_base_31 = (money_of_cents_string("208600") +
                                                                                                     (money_of_cents_string("18200") *
                                                                                                      decimal_of_integer((nombre_personnes_a_charge_7 -
                                                                                                                          integer_of_string("5")))))
                        return (temp_calcul_plafond_mensualite_d842_6_base_31 *
                                taux_francs_vers_euros_1)
                    else:
                        raise EmptyError
                return handle_default([temp_calcul_plafond_mensualite_d842_6_base_30,
                                      temp_calcul_plafond_mensualite_d842_6_base_28,
                                      temp_calcul_plafond_mensualite_d842_6_base_26,
                                      temp_calcul_plafond_mensualite_d842_6_base_24,
                                      temp_calcul_plafond_mensualite_d842_6_base_22,
                                      temp_calcul_plafond_mensualite_d842_6_base_20,
                                      temp_calcul_plafond_mensualite_d842_6_base_18,
                                      temp_calcul_plafond_mensualite_d842_6_base_17,
                                      temp_calcul_plafond_mensualite_d842_6_base_16,
                                      temp_calcul_plafond_mensualite_d842_6_base_15,
                                      temp_calcul_plafond_mensualite_d842_6_base_14,
                                      temp_calcul_plafond_mensualite_d842_6_base_13,
                                      temp_calcul_plafond_mensualite_d842_6_base_12,
                                      temp_calcul_plafond_mensualite_d842_6_base_11,
                                      temp_calcul_plafond_mensualite_d842_6_base_10,
                                      temp_calcul_plafond_mensualite_d842_6_base_9,
                                      temp_calcul_plafond_mensualite_d842_6_base_8,
                                      temp_calcul_plafond_mensualite_d842_6_base_7,
                                      temp_calcul_plafond_mensualite_d842_6_base_6,
                                      temp_calcul_plafond_mensualite_d842_6_base_5,
                                      temp_calcul_plafond_mensualite_d842_6_base_4,
                                      temp_calcul_plafond_mensualite_d842_6_base_3],
                                      temp_calcul_plafond_mensualite_d842_6_base_2,
                                      temp_calcul_plafond_mensualite_d842_6_base_1)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=878,
                                                     start_column=10,
                                                     end_line=878,
                                                     end_column=14,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_calcul_plafond_mensualite_d842_6_base = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=878, start_column=10,
                                             end_line=878, end_column=14,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d842_6_base = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                     "calcul_plafond_mensualité_d842_6_base"],
                                                                    temp_calcul_plafond_mensualite_d842_6_base)
    try:
        def temp_seuil_minimal_ressources_menage(_: Any):
            raise EmptyError

        def temp_seuil_minimal_ressources_menage_1(_: Any):
            return False

        def temp_seuil_minimal_ressources_menage_2(_: Any):
            match_arg_463 = type_travaux_logement_1
            if match_arg_463.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_463.value
                temp_seuil_minimal_ressources_menage_3 = False
            elif match_arg_463.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_463.value
                temp_seuil_minimal_ressources_menage_3 = True
            elif match_arg_463.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_463.value
                temp_seuil_minimal_ressources_menage_3 = False
            elif match_arg_463.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_463.value
                temp_seuil_minimal_ressources_menage_3 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4774, start_column=5,
                                                 end_line=4775, end_column=59,
                                                 law_headings=["Article D842-12",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                               "Titre IV : Allocations de Logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), ((date_signature_pret_1 >=
                                                                                                                 date_of_numbers(1994, 9, 30)) and
                                                                                                                temp_seuil_minimal_ressources_menage_3)):
                return montant_forfaitaire_d842_12
            else:
                raise EmptyError

        def temp_seuil_minimal_ressources_menage_4(_: Any):
            match_arg_464 = type_travaux_logement_1
            if match_arg_464.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_464.value
                temp_seuil_minimal_ressources_menage_5 = False
            elif match_arg_464.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_464.value
                temp_seuil_minimal_ressources_menage_5 = False
            elif match_arg_464.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_464.value
                temp_seuil_minimal_ressources_menage_5 = True
            elif match_arg_464.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_464.value
                temp_seuil_minimal_ressources_menage_5 = False
            match_arg_465 = type_travaux_logement_1
            if match_arg_465.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_465.value
                temp_seuil_minimal_ressources_menage_6 = True
            elif match_arg_465.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_465.value
                temp_seuil_minimal_ressources_menage_6 = False
            elif match_arg_465.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_465.value
                temp_seuil_minimal_ressources_menage_6 = False
            elif match_arg_465.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_465.value
                temp_seuil_minimal_ressources_menage_6 = False
            match_arg_466 = type_travaux_logement_1
            if match_arg_466.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_466.value
                temp_seuil_minimal_ressources_menage_7 = False
            elif match_arg_466.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_466.value
                temp_seuil_minimal_ressources_menage_7 = False
            elif match_arg_466.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_466.value
                temp_seuil_minimal_ressources_menage_7 = False
            elif match_arg_466.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_466.value
                temp_seuil_minimal_ressources_menage_7 = True
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4756, start_column=6, end_line=4762, end_column=6,
                                                 law_headings=["Article D842-12",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                               "Titre IV : Allocations de Logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), (((date_signature_pret_1 >=
                                                                                                                  date_of_numbers(1992, 9, 30)) and (date_signature_pret_1 >=
                                                                                                                                                     date_of_numbers(1994, 9, 30))) or ((date_signature_pret_1 >=
                                                                                                                                                                                         date_of_numbers(1994, 9, 30)) and
                                                                                                                                                                                        (temp_seuil_minimal_ressources_menage_7 or
                                                                                                                                                                                         (temp_seuil_minimal_ressources_menage_6 or
                                                                                                                                                                                          temp_seuil_minimal_ressources_menage_5))))):
                return (mensualite_principale_1 * coefficient_d842_12)
            else:
                raise EmptyError
        temp_seuil_minimal_ressources_menage_8 = handle_default([temp_seuil_minimal_ressources_menage_4,
                                                                temp_seuil_minimal_ressources_menage_2],
                                                                temp_seuil_minimal_ressources_menage_1,
                                                                temp_seuil_minimal_ressources_menage)
    except EmptyError:
        temp_seuil_minimal_ressources_menage_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=882, start_column=11,
                                             end_line=882, end_column=42,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    seuil_minimal_ressources_menage = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                               "seuil_minimal_ressources_ménage"],
                                                              temp_seuil_minimal_ressources_menage_8)
    try:
        def temp_depense_nette_minimale_1(param_34: Money):
            try:
                return ((charges_mensuelles_pret +
                         montant_forfaitaire_charges_1) - param_34)
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=884,
                                                     start_column=11,
                                                     end_line=884,
                                                     end_column=33,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_depense_nette_minimale_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=884, start_column=11,
                                             end_line=884, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    depense_nette_minimale_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                        "dépense_nette_minimale"], temp_depense_nette_minimale_1)
    try:
        def temp_calcul_plafond_mensualite_d842_6_avec_copropriete(param_35: Date):
            try:
                try:
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=4178, start_column=24,
                                                         end_line=4178, end_column=56,
                                                         law_headings=["Article 37",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_10 >=
                                                                                                                                                                                             date_of_numbers(2021, 10, 1))):
                        if copropriete_1:
                            return (log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                  "calcul_plafond_mensualité_d842_6_base"],
                                                 log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                          "calcul_plafond_mensualité_d842_6_base",
                                                                          "output"],
                                                                         log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                         "calcul_plafond_mensualité_d842_6_base"],
                                                                                        calcul_plafond_mensualite_d842_6_base,
                                                                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                 "calcul_plafond_mensualité_d842_6_base",
                                                                                                                 "input"], param_35)))) *
                                    decimal_of_string("0.75"))
                        else:
                            return log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                 "calcul_plafond_mensualité_d842_6_base"],
                                                log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                         "calcul_plafond_mensualité_d842_6_base",
                                                                         "output"],
                                                                        log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                        "calcul_plafond_mensualité_d842_6_base"],
                                                                                       calcul_plafond_mensualite_d842_6_base,
                                                                                       log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                "calcul_plafond_mensualité_d842_6_base",
                                                                                                                "input"], param_35))))
                    else:
                        raise EmptyError
                except EmptyError:
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/arrete_2019-09-27.catala_fr",
                                                         start_line=4122, start_column=14,
                                                         end_line=4122, end_column=46,
                                                         law_headings=["Article 33",
                                                                       "Chapitre IV : Calcul des allocations de logement en secteur accession",
                                                                       "Arrêté du 27 septembre 2019 relatif au calcul des aides personnelles au logement et de la prime de déménagement"]), (date_courante_10 >=
                                                                                                                                                                                             date_of_numbers(2020, 1, 1))):
                        return log_end_call(["CalculAllocationLogementAccessionPropriété",
                                             "calcul_plafond_mensualité_d842_6_base"],
                                            log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                     "calcul_plafond_mensualité_d842_6_base",
                                                                     "output"],
                                                                    log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                    "calcul_plafond_mensualité_d842_6_base"],
                                                                                   calcul_plafond_mensualite_d842_6_base,
                                                                                   log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                            "calcul_plafond_mensualité_d842_6_base",
                                                                                                            "input"], param_35))))
                    else:
                        raise EmptyError
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=879,
                                                     start_column=10,
                                                     end_line=879,
                                                     end_column=26,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_calcul_plafond_mensualite_d842_6_avec_copropriete = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=879, start_column=10,
                                             end_line=879, end_column=26,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_plafond_mensualite_d842_6_avec_copropriete = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                 "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                                temp_calcul_plafond_mensualite_d842_6_avec_copropriete)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4795, start_column=5,
                                                 end_line=4795, end_column=28,
                                                 law_headings=["Article D842-12",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                               "Titre IV : Allocations de Logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), situation_r822_11_13_17_1):
                temp_ressources_menage_arrondies_seuil_1 = ressources_menage_arrondies_base_1
            else:
                temp_ressources_menage_arrondies_seuil_1 = dead_value
                raise EmptyError
        except EmptyError:
            if (ressources_menage_arrondies_base_1 <=
                    seuil_minimal_ressources_menage):
                temp_ressources_menage_arrondies_seuil_1 = (money_round(((seuil_minimal_ressources_menage +
                                                                          money_of_cents_string("4999")) *
                                                                         decimal_of_string("0.01"))) * decimal_of_string("100."))
            else:
                temp_ressources_menage_arrondies_seuil_1 = ressources_menage_arrondies_base_1
    except EmptyError:
        temp_ressources_menage_arrondies_seuil_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=858, start_column=10,
                                             end_line=858, end_column=15,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    ressources_menage_arrondies_seuil_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                   "ressources_ménage_arrondies_seuil"],
                                                                  temp_ressources_menage_arrondies_seuil_1)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4650, start_column=5,
                                                 end_line=4650, end_column=44, law_headings=["Article D842-9",
                                                                                             "Section 2 : Accession à la propriété",
                                                                                             "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                                             "Titre IV : Allocations de Logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie réglementaire",
                                                                                             "Code de la construction et de l'habitation"]), local_habite_premiere_fois_beneficiaire_1):
                if (log_end_call(["CalculAllocationLogementAccessionPropriété",
                    "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                 log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                          "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                          "output"],
                                                         log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                         "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                        calcul_plafond_mensualite_d842_6_avec_copropriete,
                                                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                 "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                                 "input"], date_signature_pret_1)))) <
                    log_end_call(["CalculAllocationLogementAccessionPropriété",
                                  "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                 log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                          "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                          "output"],
                                                         log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                         "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                        calcul_plafond_mensualite_d842_6_avec_copropriete,
                                                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                 "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                                 "input"],
                                                                                                date_entree_logement_1))))):
                    temp_plafond_mensualite_d842_6 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                   "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                  log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                           "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                           "output"],
                                                                                          log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                          "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                                                         calcul_plafond_mensualite_d842_6_avec_copropriete,
                                                                                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                  "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                                                                  "input"], date_entree_logement_1))))
                else:
                    temp_plafond_mensualite_d842_6 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                   "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                  log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                           "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                           "output"],
                                                                                          log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                          "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                                                         calcul_plafond_mensualite_d842_6_avec_copropriete,
                                                                                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                  "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                                                                  "input"], date_signature_pret_1))))
            else:
                temp_plafond_mensualite_d842_6 = dead_value
                raise EmptyError
        except EmptyError:
            temp_plafond_mensualite_d842_6 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                           "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                          log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                   "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                   "output"],
                                                                                  log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                  "calcul_plafond_mensualité_d842_6_avec_copropriété"],
                                                                                                 calcul_plafond_mensualite_d842_6_avec_copropriete,
                                                                                                 log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                          "calcul_plafond_mensualité_d842_6_avec_copropriété",
                                                                                                                          "input"], date_signature_pret_1))))
    except EmptyError:
        temp_plafond_mensualite_d842_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=876, start_column=11,
                                             end_line=876, end_column=36,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    plafond_mensualite_d842_6 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                         "plafond_mensualité_d842_6"], temp_plafond_mensualite_d842_6)
    try:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                            "calcul_équivalence_loyer_minimale.ressources_ménage_arrondies"],
                                                                                                           ressources_menage_arrondies_seuil_1)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=614, start_column=10,
                                             end_line=614, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3 = temp_calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3
    try:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                      "calcul_équivalence_loyer_minimale.condition_2_du_832_25"],
                                                                                                     True)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=615, start_column=10,
                                             end_line=615, end_column=31,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3 = temp_calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3
    try:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                       "calcul_équivalence_loyer_minimale.n_nombre_parts_d832_25"],
                                                                                                      calcul_nombre_parts_dot_n_nombre_parts_d832_11_1)
    except EmptyError:
        temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=616, start_column=10,
                                             end_line=616, end_column=32,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3 = temp_calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3
    result_17 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                              "calcul_équivalence_loyer_minimale",
                              "CalculÉquivalenceLoyerMinimale"],
                             log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                             "calcul_équivalence_loyer_minimale",
                                             "CalculÉquivalenceLoyerMinimale"],
                                            calcul_equivalence_loyer_minimale,
                                            CalculEquivalenceLoyerMinimaleIn(ressources_menage_arrondies_in=calcul_equivalence_loyer_minimale_dot_ressources_menage_arrondies_3,
                                                                             condition_2_du_832_25_in=calcul_equivalence_loyer_minimale_dot_condition_2_du_832_25_3,
                                                                             n_nombre_parts_d832_25_in=calcul_equivalence_loyer_minimale_dot_n_nombre_parts_d832_25_3)))
    calcul_equivalence_loyer_minimale_dot_montant_3 = result_17.montant_out
    try:
        temp_calcul_apl_logement_foyer_dot_mode_occupation_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                        "calcul_apl_logement_foyer.mode_occupation"],
                                                                                       ModeOccupation(ModeOccupation_Code.ResidentLogementFoyer,
                                                                                                      LogementFoyer(type=TypeLogementFoyer(TypeLogementFoyer_Code.ResidenceSociale,
                                                                                                                                           Unit()), date_conventionnement=date_of_numbers(2022, 1, 1),
                                                                                                                    location=Location(bailleur=Bailleur(type_bailleur=TypeBailleur(TypeBailleur_Code.BailleurSocial,
                                                                                                                                                                                   Unit()), respecte_convention_titre_V=True,
                                                                                                                                                        respecte_convention_titre_II=True,
                                                                                                                                                        construit_ameliore_conditions_l831_1_4=True,
                                                                                                                                                        acquisition_aides_etat_pret_titre_II_ou_livre_III=True)),
                                                                                                                    remplit_conditions_r832_21=False,
                                                                                                                    construit_application_loi_1957_12_III=False)))
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_mode_occupation_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=633, start_column=10,
                                             end_line=633, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_mode_occupation_1 = temp_calcul_apl_logement_foyer_dot_mode_occupation_1
    try:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                    "calcul_apl_logement_foyer.ressources_ménage_arrondies"],
                                                                                                   ressources_menage_arrondies_seuil_1)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=634, start_column=10,
                                             end_line=634, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1 = temp_calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1
    try:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                  "calcul_apl_logement_foyer.nombre_personnes_à_charge"],
                                                                                                 nombre_personnes_a_charge_7)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=635, start_column=10,
                                             end_line=635, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1 = temp_calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1
    try:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                       "calcul_apl_logement_foyer.situation_familiale_calcul_apl"],
                                                                                                      situation_familiale_calcul_apl_7)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=636, start_column=10,
                                             end_line=636, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1 = temp_calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1
    try:
        temp_calcul_apl_logement_foyer_dot_zone_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                             "calcul_apl_logement_foyer.zone"], zone_5)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_zone_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=637, start_column=10,
                                             end_line=637, end_column=14,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_zone_1 = temp_calcul_apl_logement_foyer_dot_zone_1
    try:
        temp_calcul_apl_logement_foyer_dot_date_courante_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                      "calcul_apl_logement_foyer.date_courante"], date_courante_10)
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=638, start_column=10,
                                             end_line=638, end_column=23,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_date_courante_1 = temp_calcul_apl_logement_foyer_dot_date_courante_1
    try:
        temp_calcul_apl_logement_foyer_dot_redevance_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                  "calcul_apl_logement_foyer.redevance"],
                                                                                 money_of_cents_string("0"))
    except EmptyError:
        temp_calcul_apl_logement_foyer_dot_redevance_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=639, start_column=10,
                                             end_line=639, end_column=19,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_apl_logement_foyer_dot_redevance_1 = temp_calcul_apl_logement_foyer_dot_redevance_1

    def temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25_1(_: Unit):
        return log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                        "calcul_apl_logement_foyer.condition_2_du_832_25"], True)
    calcul_apl_logement_foyer_dot_condition_2_du_832_25_1 = temp_calcul_apl_logement_foyer_dot_condition_2_du_832_25_1

    def temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_2(_: Unit):
        return log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                        "calcul_apl_logement_foyer.n_nombre_parts_d832_25"],
                                       calcul_nombre_parts_dot_n_nombre_parts_d832_11_1)
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_2 = temp_calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_2
    result_18 = log_end_call(["CalculAllocationLogementAccessionPropriété",
                              "calcul_apl_logement_foyer",
                              "CalculAidePersonnaliséeLogementFoyer"],
                             log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                             "calcul_apl_logement_foyer",
                                             "CalculAidePersonnaliséeLogementFoyer"],
                                            calcul_aide_personnalisee_logement_foyer,
                                            CalculAidePersonnaliseeLogementFoyerIn(mode_occupation_in=calcul_apl_logement_foyer_dot_mode_occupation_1,
                                                                                   ressources_menage_arrondies_in=calcul_apl_logement_foyer_dot_ressources_menage_arrondies_1,
                                                                                   nombre_personnes_a_charge_in=calcul_apl_logement_foyer_dot_nombre_personnes_a_charge_1,
                                                                                   situation_familiale_calcul_apl_in=calcul_apl_logement_foyer_dot_situation_familiale_calcul_apl_1,
                                                                                   zone_in=calcul_apl_logement_foyer_dot_zone_1,
                                                                                   date_courante_in=calcul_apl_logement_foyer_dot_date_courante_1,
                                                                                   redevance_in=calcul_apl_logement_foyer_dot_redevance_1,
                                                                                   condition_2_du_832_25_in=calcul_apl_logement_foyer_dot_condition_2_du_832_25_1,
                                                                                   n_nombre_parts_d832_25_in=calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_2)))
    calcul_apl_logement_foyer_dot_coefficient_multiplicateur_d832_25_1 = result_18.coefficient_multiplicateur_d832_25_out
    calcul_apl_logement_foyer_dot_coefficient_r_d832_25_1 = result_18.coefficient_r_d832_25_out
    calcul_apl_logement_foyer_dot_n_nombre_parts_d832_25_3 = result_18.n_nombre_parts_d832_25_out
    calcul_apl_logement_foyer_dot_equivalence_loyer_eligible_1 = result_18.equivalence_loyer_eligible_out
    calcul_apl_logement_foyer_dot_plafond_equivalence_loyer_eligible_1 = result_18.plafond_equivalence_loyer_eligible_out
    calcul_apl_logement_foyer_dot_equivalence_loyer_minimale_1 = result_18.equivalence_loyer_minimale_out
    calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil_1 = result_18.coefficient_prise_en_charge_d832_25_seuil_out
    calcul_apl_logement_foyer_dot_aide_finale_formule_1 = result_18.aide_finale_formule_out
    calcul_apl_logement_foyer_dot_traitement_aide_finale_montant_minimal_1 = result_18.traitement_aide_finale_montant_minimal_out
    try:
        try:
            match_arg_467 = type_travaux_logement_1
            if match_arg_467.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_467.value
                temp_seuil_minimal_depense_nette_minimale = False
            elif match_arg_467.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_467.value
                temp_seuil_minimal_depense_nette_minimale = False
            elif match_arg_467.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_467.value
                temp_seuil_minimal_depense_nette_minimale = True
            elif match_arg_467.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_467.value
                temp_seuil_minimal_depense_nette_minimale = False
            match_arg_468 = type_travaux_logement_1
            if match_arg_468.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_468.value
                temp_seuil_minimal_depense_nette_minimale_1 = True
            elif match_arg_468.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_468.value
                temp_seuil_minimal_depense_nette_minimale_1 = False
            elif match_arg_468.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_468.value
                temp_seuil_minimal_depense_nette_minimale_1 = False
            elif match_arg_468.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_468.value
                temp_seuil_minimal_depense_nette_minimale_1 = False
            match_arg_469 = type_travaux_logement_1
            if match_arg_469.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                _ = match_arg_469.value
                temp_seuil_minimal_depense_nette_minimale_2 = False
            elif match_arg_469.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                _ = match_arg_469.value
                temp_seuil_minimal_depense_nette_minimale_2 = False
            elif match_arg_469.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                _ = match_arg_469.value
                temp_seuil_minimal_depense_nette_minimale_2 = False
            elif match_arg_469.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                _ = match_arg_469.value
                temp_seuil_minimal_depense_nette_minimale_2 = True
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4731, start_column=7,
                                                 end_line=4734, end_column=45,
                                                 law_headings=["Article D842-11",
                                                               "Section 2 : Accession à la propriété",
                                                               "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                               "Titre IV : Allocations de Logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), ((temp_seuil_minimal_depense_nette_minimale_2 or
                                                                                                                 (temp_seuil_minimal_depense_nette_minimale_1 or
                                                                                                                  temp_seuil_minimal_depense_nette_minimale)) and
                                                                                                                (date_signature_pret_1 >=
                                                                                                                 date_of_numbers(1999, 7, 1)))):
                temp_seuil_minimal_depense_nette_minimale_3 = (ressources_menage_arrondies_seuil_1 *
                                                               coefficient_d842_11)
            else:
                temp_seuil_minimal_depense_nette_minimale_3 = dead_value
                raise EmptyError
        except EmptyError:
            temp_seuil_minimal_depense_nette_minimale_3 = montant_forfaitaire_d842_11
    except EmptyError:
        temp_seuil_minimal_depense_nette_minimale_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=881, start_column=11,
                                             end_line=881, end_column=47,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    seuil_minimal_depense_nette_minimale = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                    "seuil_minimal_dépense_nette_minimale"],
                                                                   temp_seuil_minimal_depense_nette_minimale_3)
    try:
        if (mensualite_principale_1 >
                plafond_mensualite_d842_6):
            temp_mensualite_eligible_1 = plafond_mensualite_d842_6
        else:
            temp_mensualite_eligible_1 = mensualite_principale_1
    except EmptyError:
        temp_mensualite_eligible_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=872, start_column=11,
                                             end_line=872, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    mensualite_eligible_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                     "mensualité_éligible"], temp_mensualite_eligible_1)
    try:
        temp_mensualite_minimale_10 = calcul_equivalence_loyer_minimale_dot_montant_3
    except EmptyError:
        temp_mensualite_minimale_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=874, start_column=11,
                                             end_line=874, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    mensualite_minimale_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                     "mensualité_minimale"], temp_mensualite_minimale_10)
    try:
        temp_coefficient_prise_en_charge_1 = calcul_apl_logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil_1
    except EmptyError:
        temp_coefficient_prise_en_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=875, start_column=11,
                                             end_line=875, end_column=38,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    coefficient_prise_en_charge_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                             "coefficient_prise_en_charge"], temp_coefficient_prise_en_charge_1)
    try:
        def temp_abattement_depense_nette_minimale_1(param_36: Money):
            try:
                if (log_end_call(["CalculAllocationLogementAccessionPropriété",
                    "dépense_nette_minimale"],
                                 log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                          "dépense_nette_minimale", "output"],
                                                         log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                         "dépense_nette_minimale"], depense_nette_minimale_1,
                                                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                 "dépense_nette_minimale", "input"], param_36)))) <
                        seuil_minimal_depense_nette_minimale):
                    return (seuil_minimal_depense_nette_minimale -
                            log_end_call(["CalculAllocationLogementAccessionPropriété",
                                          "dépense_nette_minimale"],
                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                  "dépense_nette_minimale", "output"],
                                                                 log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                 "dépense_nette_minimale"], depense_nette_minimale_1,
                                                                                log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                         "dépense_nette_minimale", "input"], param_36)))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=885,
                                                     start_column=11,
                                                     end_line=885,
                                                     end_column=44,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_abattement_depense_nette_minimale_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=885, start_column=11,
                                             end_line=885, end_column=44,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    abattement_depense_nette_minimale_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                   "abattement_dépense_nette_minimale"],
                                                                  temp_abattement_depense_nette_minimale_1)
    try:
        temp_aide_finale_formule_6 = (((mensualite_eligible_1 +
                                        montant_forfaitaire_charges_1) - mensualite_minimale_1) *
                                      coefficient_prise_en_charge_1)
    except EmptyError:
        temp_aide_finale_formule_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=900, start_column=10,
                                             end_line=900, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_5 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                     "aide_finale_formule"], temp_aide_finale_formule_6)
    try:
        def temp_traitement_aide_finale_depense_nette_minimale_1(param_37: Money):
            try:
                if ((log_end_call(["CalculAllocationLogementAccessionPropriété",
                    "traitement_aide_finale_minoration_forfaitaire"],
                                  log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                           "traitement_aide_finale_minoration_forfaitaire",
                                                           "output"],
                                                          log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                          "traitement_aide_finale_minoration_forfaitaire"],
                                                                         traitement_aide_finale_minoration_forfaitaire_4,
                                                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                                                  "input"], param_37)))) -
                     log_end_call(["CalculAllocationLogementAccessionPropriété",
                                  "abattement_dépense_nette_minimale"],
                                  log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                          "abattement_dépense_nette_minimale", "output"],
                                                          log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                         "abattement_dépense_nette_minimale"],
                                                                         abattement_depense_nette_minimale_1,
                                                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                 "abattement_dépense_nette_minimale", "input"],
                                                                                                 log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                              "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                              log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                      "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                       "output"],
                                                                                                                                      log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                     traitement_aide_finale_minoration_forfaitaire_4,
                                                                                                                                                     log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                              "input"], param_37))))))))) <
                        money_of_cents_string("0")):
                    return money_of_cents_string("0")
                else:
                    return (log_end_call(["CalculAllocationLogementAccessionPropriété",
                                          "traitement_aide_finale_minoration_forfaitaire"],
                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                  "traitement_aide_finale_minoration_forfaitaire",
                                                                  "output"],
                                                                 log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                 "traitement_aide_finale_minoration_forfaitaire"],
                                                                                traitement_aide_finale_minoration_forfaitaire_4,
                                                                                log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                         "traitement_aide_finale_minoration_forfaitaire",
                                                                                                         "input"], param_37)))) -
                            log_end_call(["CalculAllocationLogementAccessionPropriété",
                                          "abattement_dépense_nette_minimale"],
                                         log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                  "abattement_dépense_nette_minimale", "output"],
                                                                 log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                 "abattement_dépense_nette_minimale"],
                                                                                abattement_depense_nette_minimale_1,
                                                                                log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                         "abattement_dépense_nette_minimale", "input"],
                                                                                                        log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                      "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                     log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                              "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                              "output"],
                                                                                                                                             log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                             "traitement_aide_finale_minoration_forfaitaire"],
                                                                                                                                                            traitement_aide_finale_minoration_forfaitaire_4,
                                                                                                                                                            log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                                     "traitement_aide_finale_minoration_forfaitaire",
                                                                                                                                                                                     "input"], param_37)))))))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=904,
                                                     start_column=10,
                                                     end_line=904,
                                                     end_column=32,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_depense_nette_minimale_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=904, start_column=10,
                                             end_line=904, end_column=32,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_depense_nette_minimale_1 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                               "traitement_aide_finale_dépense_nette_minimale"],
                                                                              temp_traitement_aide_finale_depense_nette_minimale_1)
    try:
        def temp_traitement_aide_finale_contributions_sociales_arrondi_4(param_38: Money):
            try:
                if ((money_round(((log_end_call(["CalculAllocationLogementAccessionPropriété",
                    "traitement_aide_finale_dépense_nette_minimale"],
                                                log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                         "traitement_aide_finale_dépense_nette_minimale",
                                                                         "output"],
                                                                        log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                        "traitement_aide_finale_dépense_nette_minimale"],
                                                                                       traitement_aide_finale_depense_nette_minimale_1,
                                                                                       log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                "input"], param_38)))) -
                                   log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                 "montant"],
                                 log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                         log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_4,
                                                                        log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                              "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                         "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                         "output"],
                                                                                                                        log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                        "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                                                       traitement_aide_finale_depense_nette_minimale_1,
                                                                                                                                       log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                                                "input"], param_38))))))))) -
                                  money_of_cents_string("50"))) +
                     log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                  "montant"],
                                  log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                          "montant", "output"],
                                                          log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                         "montant"], contributions_sociales_dot_montant_4,
                                                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                 "montant", "input"],
                                                                                                 log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                              "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                              log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                      "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                       "output"],
                                                                                                                                      log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                     "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                                                                     traitement_aide_finale_depense_nette_minimale_1,
                                                                                                                                                     log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                             "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                                                              "input"], param_38))))))))) >=
                        money_of_cents_string("0")):
                    return (money_round(((log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                        "traitement_aide_finale_dépense_nette_minimale"],
                                                       log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                "traitement_aide_finale_dépense_nette_minimale",
                                                                                "output"],
                                                                               log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                               "traitement_aide_finale_dépense_nette_minimale"],
                                                                                              traitement_aide_finale_depense_nette_minimale_1,
                                                                                              log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                       "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                       "input"], param_38)))) -
                                          log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                        "montant"],
                                                       log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                "montant", "output"],
                                                                               log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                               "montant"], contributions_sociales_dot_montant_4,
                                                                                              log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                                       "montant", "input"],
                                                                                                                      log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                    "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                                                   log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                            "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                                            "output"],
                                                                                                                                                           log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                           "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                                                                                          traitement_aide_finale_depense_nette_minimale_1,
                                                                                                                                                                          log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                                                   "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                                                                                   "input"], param_38))))))))) -
                                         money_of_cents_string("50"))) +
                            log_end_call(["ContributionsSocialesAidesPersonnelleLogement",
                                          "montant"],
                                         log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                  "montant", "output"],
                                                                 log_begin_call(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                 "montant"], contributions_sociales_dot_montant_4,
                                                                                log_variable_definition(["ContributionsSocialesAidesPersonnelleLogement",
                                                                                                         "montant", "input"],
                                                                                                        log_end_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                      "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                                     log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                              "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                              "output"],
                                                                                                                                             log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                             "traitement_aide_finale_dépense_nette_minimale"],
                                                                                                                                                            traitement_aide_finale_depense_nette_minimale_1,
                                                                                                                                                            log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                                                                                                     "traitement_aide_finale_dépense_nette_minimale",
                                                                                                                                                                                     "input"], param_38)))))))))
                else:
                    return money_of_cents_string("0")
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=905,
                                                     start_column=10,
                                                     end_line=905,
                                                     end_column=40,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_contributions_sociales_arrondi_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=905, start_column=10,
                                             end_line=905, end_column=40,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_contributions_sociales_arrondi_4 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                       "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                                      temp_traitement_aide_finale_contributions_sociales_arrondi_4)
    try:
        def temp_traitement_aide_finale_montant_minimal_4(param_39: Money):
            try:
                if (log_end_call(["CalculAllocationLogementAccessionPropriété",
                    "traitement_aide_finale_contributions_sociales_arrondi"],
                                 log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                          "traitement_aide_finale_contributions_sociales_arrondi",
                                                          "output"],
                                                         log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                        traitement_aide_finale_contributions_sociales_arrondi_4,
                                                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                 "input"], param_39)))) <
                        montant_minimal_aide_d842_6):
                    return money_of_cents_string("0")
                else:
                    return log_end_call(["CalculAllocationLogementAccessionPropriété",
                                         "traitement_aide_finale_contributions_sociales_arrondi"],
                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                 "traitement_aide_finale_contributions_sociales_arrondi",
                                                                 "output"],
                                                                log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                "traitement_aide_finale_contributions_sociales_arrondi"],
                                                                               traitement_aide_finale_contributions_sociales_arrondi_4,
                                                                               log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                        "traitement_aide_finale_contributions_sociales_arrondi",
                                                                                                        "input"], param_39))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=906,
                                                     start_column=10,
                                                     end_line=906,
                                                     end_column=25,
                                                     law_headings=["Secteur accession à la propriété",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_montant_minimal_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=906, start_column=10,
                                             end_line=906, end_column=25,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_montant_minimal_4 = log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                        "traitement_aide_finale_montant_minimal"],
                                                                       temp_traitement_aide_finale_montant_minimal_4)
    return CalculAllocationLogementAccessionProprieteOut(aide_finale_formule_out=aide_finale_formule_5,
                                                         traitement_aide_finale_montant_minimal_out=traitement_aide_finale_montant_minimal_4)


def calcul_aide_personnalisee_logement(calcul_aide_personnalisee_logement_in: CalculAidePersonnaliseeLogementIn):
    mode_occupation_4 = calcul_aide_personnalisee_logement_in.mode_occupation_in
    type_aide_2 = calcul_aide_personnalisee_logement_in.type_aide_in
    informations_calcul = calcul_aide_personnalisee_logement_in.informations_calcul_in
    ressources_menage_sans_arrondi = calcul_aide_personnalisee_logement_in.ressources_menage_sans_arrondi_in
    situation_familiale_1 = calcul_aide_personnalisee_logement_in.situation_familiale_in
    nombre_personnes_a_charge_8 = calcul_aide_personnalisee_logement_in.nombre_personnes_a_charge_in
    zone_6 = calcul_aide_personnalisee_logement_in.zone_in
    date_courante_11 = calcul_aide_personnalisee_logement_in.date_courante_in
    try:
        match_arg_470 = mode_occupation_4
        if match_arg_470.code == ModeOccupation_Code.Locataire:
            _ = match_arg_470.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                                                           Unit())
        elif match_arg_470.code == ModeOccupation_Code.ResidentLogementFoyer:
            _ = match_arg_470.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.LogementFoyer,
                                                           Unit())
        elif match_arg_470.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            _ = match_arg_470.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                                                           Unit())
        elif match_arg_470.code == ModeOccupation_Code.SousLocataire:
            _ = match_arg_470.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                                                           Unit())
        elif match_arg_470.code == ModeOccupation_Code.LocationAccession:
            _ = match_arg_470.value
            temp_categorie_calcul_apl = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                                                           Unit())
    except EmptyError:
        temp_categorie_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=763, start_column=11,
                                             end_line=763, end_column=31,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    categorie_calcul_apl = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                    "catégorie_calcul_apl"], temp_categorie_calcul_apl)
    try:
        temp_ressources_menage_avec_arrondi = (money_round(((ressources_menage_sans_arrondi +
                                                             money_of_cents_string("4999")) * decimal_of_string("0.01"))) *
                                               decimal_of_string("100."))
    except EmptyError:
        temp_ressources_menage_avec_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=757, start_column=10,
                                             end_line=757, end_column=22,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    ressources_menage_avec_arrondi = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                              "ressources_ménage_avec_arrondi"],
                                                             temp_ressources_menage_avec_arrondi)
    try:
        match_arg_471 = situation_familiale_1
        if match_arg_471.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_471.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                                                                              Unit())
        elif match_arg_471.code == SituationFamiliale_Code.Maries:
            _ = match_arg_471.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                              Unit())
        elif match_arg_471.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_471.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                              Unit())
        elif match_arg_471.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_471.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                              Unit())
        elif match_arg_471.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_471.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                                                                              Unit())
        elif match_arg_471.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_471.value
            temp_situation_familiale_calcul_apl = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                              Unit())
    except EmptyError:
        temp_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=764, start_column=11,
                                             end_line=764, end_column=41,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    situation_familiale_calcul_apl_8 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                "situation_familiale_calcul_apl"],
                                                               temp_situation_familiale_calcul_apl)
    try:
        match_arg_472 = informations_calcul
        if match_arg_472.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_472.value
            temp_accession_propriete_dot_mensualite_principale = money_of_cents_string(
                "0")
        elif match_arg_472.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_472.value
            temp_accession_propriete_dot_mensualite_principale = money_of_cents_string(
                "0")
        elif match_arg_472.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_3 = match_arg_472.value
            temp_accession_propriete_dot_mensualite_principale = infos_3.mensualite_principale
        temp_accession_propriete_dot_mensualite_principale_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                        "accession_propriété.mensualité_principale"],
                                                                                       temp_accession_propriete_dot_mensualite_principale)
    except EmptyError:
        temp_accession_propriete_dot_mensualite_principale_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=690, start_column=10,
                                             end_line=690, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_mensualite_principale = temp_accession_propriete_dot_mensualite_principale_1
    try:
        temp_accession_propriete_dot_ressources_menage_arrondies = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                            "accession_propriété.ressources_ménage_arrondies"],
                                                                                           ressources_menage_avec_arrondi)
    except EmptyError:
        temp_accession_propriete_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=691, start_column=10,
                                             end_line=691, end_column=37,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_ressources_menage_arrondies = temp_accession_propriete_dot_ressources_menage_arrondies
    try:
        temp_accession_propriete_dot_nombre_personnes_a_charge = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                          "accession_propriété.nombre_personnes_à_charge"],
                                                                                         nombre_personnes_a_charge_8)
    except EmptyError:
        temp_accession_propriete_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=692, start_column=10,
                                             end_line=692, end_column=35,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_nombre_personnes_a_charge = temp_accession_propriete_dot_nombre_personnes_a_charge
    try:
        temp_accession_propriete_dot_situation_familiale_calcul_apl = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                               "accession_propriété.situation_familiale_calcul_apl"],
                                                                                              situation_familiale_calcul_apl_8)
    except EmptyError:
        temp_accession_propriete_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=693, start_column=10,
                                             end_line=693, end_column=40,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_situation_familiale_calcul_apl = temp_accession_propriete_dot_situation_familiale_calcul_apl
    try:
        match_arg_473 = informations_calcul
        if match_arg_473.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_473.value
            temp_accession_propriete_dot_type_travaux_logement = TypeTravauxLogementD83215(TypeTravauxLogementD83215_Code.PasDeTravaux,
                                                                                           Unit())
        elif match_arg_473.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_473.value
            temp_accession_propriete_dot_type_travaux_logement = TypeTravauxLogementD83215(TypeTravauxLogementD83215_Code.PasDeTravaux,
                                                                                           Unit())
        elif match_arg_473.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_4 = match_arg_473.value
            temp_accession_propriete_dot_type_travaux_logement = infos_4.type_travaux_logement_d832_15
        temp_accession_propriete_dot_type_travaux_logement_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                        "accession_propriété.type_travaux_logement"],
                                                                                       temp_accession_propriete_dot_type_travaux_logement)
    except EmptyError:
        temp_accession_propriete_dot_type_travaux_logement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=694, start_column=10,
                                             end_line=694, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_type_travaux_logement = temp_accession_propriete_dot_type_travaux_logement_1
    try:
        match_arg_474 = informations_calcul
        if match_arg_474.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_474.value
            temp_accession_propriete_dot_date_signature_pret = date_of_numbers(
                2010, 1, 1)
        elif match_arg_474.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_474.value
            temp_accession_propriete_dot_date_signature_pret = date_of_numbers(
                2010, 1, 1)
        elif match_arg_474.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_5 = match_arg_474.value
            temp_accession_propriete_dot_date_signature_pret = infos_5.date_signature_pret
        temp_accession_propriete_dot_date_signature_pret_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                      "accession_propriété.date_signature_prêt"],
                                                                                     temp_accession_propriete_dot_date_signature_pret)
    except EmptyError:
        temp_accession_propriete_dot_date_signature_pret_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=695, start_column=10,
                                             end_line=695, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_date_signature_pret = temp_accession_propriete_dot_date_signature_pret_1
    try:
        match_arg_475 = informations_calcul
        if match_arg_475.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_475.value
            temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire = False
        elif match_arg_475.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_475.value
            temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire = False
        elif match_arg_475.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_6 = match_arg_475.value
            temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire = infos_6.local_habite_premiere_fois_beneficiaire
        temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                          "accession_propriété.local_habité_première_fois_bénéficiaire"],
                                                                                                         temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire)
    except EmptyError:
        temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=696, start_column=10,
                                             end_line=696, end_column=49,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_local_habite_premiere_fois_beneficiaire = temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_1
    try:
        match_arg_476 = informations_calcul
        if match_arg_476.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_476.value
            temp_accession_propriete_dot_date_entree_logement = date_of_numbers(
                2010, 1, 1)
        elif match_arg_476.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_476.value
            temp_accession_propriete_dot_date_entree_logement = date_of_numbers(
                2010, 1, 1)
        elif match_arg_476.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_7 = match_arg_476.value
            temp_accession_propriete_dot_date_entree_logement = infos_7.date_entree_logement
        temp_accession_propriete_dot_date_entree_logement_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                       "accession_propriété.date_entrée_logement"],
                                                                                      temp_accession_propriete_dot_date_entree_logement)
    except EmptyError:
        temp_accession_propriete_dot_date_entree_logement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=697, start_column=10,
                                             end_line=697, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_date_entree_logement = temp_accession_propriete_dot_date_entree_logement_1
    try:
        match_arg_477 = informations_calcul
        if match_arg_477.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_477.value
            temp_accession_propriete_dot_copropriete = False
        elif match_arg_477.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_477.value
            temp_accession_propriete_dot_copropriete = False
        elif match_arg_477.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_8 = match_arg_477.value
            temp_accession_propriete_dot_copropriete = infos_8.copropriete
        temp_accession_propriete_dot_copropriete_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                              "accession_propriété.copropriété"],
                                                                             temp_accession_propriete_dot_copropriete)
    except EmptyError:
        temp_accession_propriete_dot_copropriete_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=698, start_column=10,
                                             end_line=698, end_column=21,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_copropriete = temp_accession_propriete_dot_copropriete_1
    try:
        match_arg_478 = informations_calcul
        if match_arg_478.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_478.value
            temp_accession_propriete_dot_situation_r822_11_13_17 = False
        elif match_arg_478.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_478.value
            temp_accession_propriete_dot_situation_r822_11_13_17 = False
        elif match_arg_478.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_9 = match_arg_478.value
            temp_accession_propriete_dot_situation_r822_11_13_17 = infos_9.situation_r822_11_13_17
        temp_accession_propriete_dot_situation_r822_11_13_17_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                          "accession_propriété.situation_r822_11_13_17"],
                                                                                         temp_accession_propriete_dot_situation_r822_11_13_17)
    except EmptyError:
        temp_accession_propriete_dot_situation_r822_11_13_17_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=699, start_column=10,
                                             end_line=699, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_situation_r822_11_13_17 = temp_accession_propriete_dot_situation_r822_11_13_17_1
    try:
        temp_accession_propriete_dot_zone = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                     "accession_propriété.zone"], zone_6)
    except EmptyError:
        temp_accession_propriete_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=700, start_column=10,
                                             end_line=700, end_column=14,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_zone = temp_accession_propriete_dot_zone
    try:
        match_arg_479 = informations_calcul
        if match_arg_479.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_479.value
            temp_accession_propriete_dot_type_pret = TypePret(TypePret_Code.D331_32,
                                                              Unit())
        elif match_arg_479.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_479.value
            temp_accession_propriete_dot_type_pret = TypePret(TypePret_Code.D331_32,
                                                              Unit())
        elif match_arg_479.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_10 = match_arg_479.value
            temp_accession_propriete_dot_type_pret = infos_10.type_pret
        temp_accession_propriete_dot_type_pret_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                            "accession_propriété.type_prêt"],
                                                                           temp_accession_propriete_dot_type_pret)
    except EmptyError:
        temp_accession_propriete_dot_type_pret_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=701, start_column=10,
                                             end_line=701, end_column=19,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_type_pret = temp_accession_propriete_dot_type_pret_1
    try:
        match_arg_480 = informations_calcul
        if match_arg_480.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_480.value
            temp_accession_propriete_dot_anciennete_logement = NeufOuAncien(NeufOuAncien_Code.Neuf,
                                                                            Unit())
        elif match_arg_480.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_480.value
            temp_accession_propriete_dot_anciennete_logement = NeufOuAncien(NeufOuAncien_Code.Neuf,
                                                                            Unit())
        elif match_arg_480.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_11 = match_arg_480.value
            temp_accession_propriete_dot_anciennete_logement = infos_11.anciennete_logement
        temp_accession_propriete_dot_anciennete_logement_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                      "accession_propriété.ancienneté_logement"],
                                                                                     temp_accession_propriete_dot_anciennete_logement)
    except EmptyError:
        temp_accession_propriete_dot_anciennete_logement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=702, start_column=10,
                                             end_line=702, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_anciennete_logement = temp_accession_propriete_dot_anciennete_logement_1
    try:
        temp_accession_propriete_dot_date_courante = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                              "accession_propriété.date_courante"], date_courante_11)
    except EmptyError:
        temp_accession_propriete_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=703, start_column=10,
                                             end_line=703, end_column=23,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_date_courante = temp_accession_propriete_dot_date_courante
    result_19 = log_end_call(["CalculAidePersonnaliséeLogement",
                              "accession_propriété",
                              "CalculAidePersonnaliséeLogementAccessionPropriété"],
                             log_begin_call(["CalculAidePersonnaliséeLogement",
                                             "accession_propriété",
                                             "CalculAidePersonnaliséeLogementAccessionPropriété"],
                                            calcul_aide_personnalisee_logement_accession_propriete,
                                            CalculAidePersonnaliseeLogementAccessionProprieteIn(mensualite_principale_in=accession_propriete_dot_mensualite_principale,
                                                                                                ressources_menage_arrondies_in=accession_propriete_dot_ressources_menage_arrondies,
                                                                                                nombre_personnes_a_charge_in=accession_propriete_dot_nombre_personnes_a_charge,
                                                                                                situation_familiale_calcul_apl_in=accession_propriete_dot_situation_familiale_calcul_apl,
                                                                                                type_travaux_logement_in=accession_propriete_dot_type_travaux_logement,
                                                                                                date_signature_pret_in=accession_propriete_dot_date_signature_pret,
                                                                                                local_habite_premiere_fois_beneficiaire_in=accession_propriete_dot_local_habite_premiere_fois_beneficiaire,
                                                                                                date_entree_logement_in=accession_propriete_dot_date_entree_logement,
                                                                                                copropriete_in=accession_propriete_dot_copropriete,
                                                                                                situation_r822_11_13_17_in=accession_propriete_dot_situation_r822_11_13_17,
                                                                                                zone_in=accession_propriete_dot_zone,
                                                                                                type_pret_in=accession_propriete_dot_type_pret,
                                                                                                anciennete_logement_in=accession_propriete_dot_anciennete_logement,
                                                                                                date_courante_in=accession_propriete_dot_date_courante)))
    accession_propriete_dot_mensualite_eligible = result_19.mensualite_eligible_out
    accession_propriete_dot_mensualite_minimale = result_19.mensualite_minimale_out
    accession_propriete_dot_coefficient_prise_en_charge_d832_10_seuil = result_19.coefficient_prise_en_charge_d832_10_seuil_out
    accession_propriete_dot_aide_finale_formule = result_19.aide_finale_formule_out
    accession_propriete_dot_traitement_aide_finale_montant_minimal = result_19.traitement_aide_finale_montant_minimal_out
    try:
        temp_logement_foyer_dot_mode_occupation = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                           "logement_foyer.mode_occupation"], mode_occupation_4)
    except EmptyError:
        temp_logement_foyer_dot_mode_occupation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=633, start_column=10,
                                             end_line=633, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_mode_occupation = temp_logement_foyer_dot_mode_occupation
    try:
        temp_logement_foyer_dot_ressources_menage_arrondies = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                       "logement_foyer.ressources_ménage_arrondies"],
                                                                                      ressources_menage_avec_arrondi)
    except EmptyError:
        temp_logement_foyer_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=634, start_column=10,
                                             end_line=634, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_ressources_menage_arrondies = temp_logement_foyer_dot_ressources_menage_arrondies
    try:
        temp_logement_foyer_dot_nombre_personnes_a_charge = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                     "logement_foyer.nombre_personnes_à_charge"],
                                                                                    nombre_personnes_a_charge_8)
    except EmptyError:
        temp_logement_foyer_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=635, start_column=10,
                                             end_line=635, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_nombre_personnes_a_charge = temp_logement_foyer_dot_nombre_personnes_a_charge
    try:
        temp_logement_foyer_dot_situation_familiale_calcul_apl = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                          "logement_foyer.situation_familiale_calcul_apl"],
                                                                                         situation_familiale_calcul_apl_8)
    except EmptyError:
        temp_logement_foyer_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=636, start_column=10,
                                             end_line=636, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_situation_familiale_calcul_apl = temp_logement_foyer_dot_situation_familiale_calcul_apl
    try:
        temp_logement_foyer_dot_zone = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                "logement_foyer.zone"], zone_6)
    except EmptyError:
        temp_logement_foyer_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=637, start_column=10,
                                             end_line=637, end_column=14,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_zone = temp_logement_foyer_dot_zone
    try:
        temp_logement_foyer_dot_date_courante = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                         "logement_foyer.date_courante"], date_courante_11)
    except EmptyError:
        temp_logement_foyer_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=638, start_column=10,
                                             end_line=638, end_column=23,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_date_courante = temp_logement_foyer_dot_date_courante
    try:
        match_arg_481 = informations_calcul
        if match_arg_481.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_481.value
            temp_logement_foyer_dot_redevance = money_of_cents_string("0")
        elif match_arg_481.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            infos_12 = match_arg_481.value
            temp_logement_foyer_dot_redevance = infos_12.redevance
        elif match_arg_481.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_481.value
            temp_logement_foyer_dot_redevance = money_of_cents_string("0")
        temp_logement_foyer_dot_redevance_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                       "logement_foyer.redevance"], temp_logement_foyer_dot_redevance)
    except EmptyError:
        temp_logement_foyer_dot_redevance_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=639, start_column=10,
                                             end_line=639, end_column=19,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_redevance = temp_logement_foyer_dot_redevance_1

    def temp_logement_foyer_dot_condition_2_du_832_25(_: Unit):
        temp_logement_foyer_dot_condition_2_du_832_25_1 = dead_value
        raise EmptyError
        return log_variable_definition(["CalculAidePersonnaliséeLogement",
                                        "logement_foyer.condition_2_du_832_25"],
                                       temp_logement_foyer_dot_condition_2_du_832_25_1)
    logement_foyer_dot_condition_2_du_832_25 = temp_logement_foyer_dot_condition_2_du_832_25

    def temp_logement_foyer_dot_n_nombre_parts_d832_25(_: Unit):
        temp_logement_foyer_dot_n_nombre_parts_d832_25_1 = dead_value
        raise EmptyError
        return log_variable_definition(["CalculAidePersonnaliséeLogement",
                                        "logement_foyer.n_nombre_parts_d832_25"],
                                       temp_logement_foyer_dot_n_nombre_parts_d832_25_1)
    logement_foyer_dot_n_nombre_parts_d832_25 = temp_logement_foyer_dot_n_nombre_parts_d832_25
    result_20 = log_end_call(["CalculAidePersonnaliséeLogement",
                              "logement_foyer", "CalculAidePersonnaliséeLogementFoyer"],
                             log_begin_call(["CalculAidePersonnaliséeLogement", "logement_foyer",
                                             "CalculAidePersonnaliséeLogementFoyer"],
                                            calcul_aide_personnalisee_logement_foyer,
                                            CalculAidePersonnaliseeLogementFoyerIn(mode_occupation_in=logement_foyer_dot_mode_occupation,
                                                                                   ressources_menage_arrondies_in=logement_foyer_dot_ressources_menage_arrondies,
                                                                                   nombre_personnes_a_charge_in=logement_foyer_dot_nombre_personnes_a_charge,
                                                                                   situation_familiale_calcul_apl_in=logement_foyer_dot_situation_familiale_calcul_apl,
                                                                                   zone_in=logement_foyer_dot_zone,
                                                                                   date_courante_in=logement_foyer_dot_date_courante,
                                                                                   redevance_in=logement_foyer_dot_redevance,
                                                                                   condition_2_du_832_25_in=logement_foyer_dot_condition_2_du_832_25,
                                                                                   n_nombre_parts_d832_25_in=logement_foyer_dot_n_nombre_parts_d832_25)))
    logement_foyer_dot_coefficient_multiplicateur_d832_25 = result_20.coefficient_multiplicateur_d832_25_out
    logement_foyer_dot_coefficient_r_d832_25 = result_20.coefficient_r_d832_25_out
    logement_foyer_dot_n_nombre_parts_d832_25_1 = result_20.n_nombre_parts_d832_25_out
    logement_foyer_dot_equivalence_loyer_eligible = result_20.equivalence_loyer_eligible_out
    logement_foyer_dot_plafond_equivalence_loyer_eligible = result_20.plafond_equivalence_loyer_eligible_out
    logement_foyer_dot_equivalence_loyer_minimale = result_20.equivalence_loyer_minimale_out
    logement_foyer_dot_coefficient_prise_en_charge_d832_25_seuil = result_20.coefficient_prise_en_charge_d832_25_seuil_out
    logement_foyer_dot_aide_finale_formule = result_20.aide_finale_formule_out
    logement_foyer_dot_traitement_aide_finale_montant_minimal = result_20.traitement_aide_finale_montant_minimal_out
    try:
        match_arg_482 = informations_calcul
        if match_arg_482.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_13 = match_arg_482.value
            temp_locatif_dot_loyer_principal = infos_13.loyer_principal
        elif match_arg_482.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_482.value
            temp_locatif_dot_loyer_principal = money_of_cents_string("0")
        elif match_arg_482.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_482.value
            temp_locatif_dot_loyer_principal = money_of_cents_string("0")
        temp_locatif_dot_loyer_principal_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                      "locatif.loyer_principal"], temp_locatif_dot_loyer_principal)
    except EmptyError:
        temp_locatif_dot_loyer_principal_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=559, start_column=10,
                                             end_line=559, end_column=25,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_loyer_principal = temp_locatif_dot_loyer_principal_1
    try:
        temp_locatif_dot_ressources_menage_arrondies = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                "locatif.ressources_ménage_arrondies"],
                                                                               ressources_menage_avec_arrondi)
    except EmptyError:
        temp_locatif_dot_ressources_menage_arrondies = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=560, start_column=10,
                                             end_line=560, end_column=37,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_ressources_menage_arrondies = temp_locatif_dot_ressources_menage_arrondies
    try:
        match_arg_483 = informations_calcul
        if match_arg_483.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_14 = match_arg_483.value
            temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = infos_14.beneficiaire_aide_adulte_ou_enfant_handicapes
        elif match_arg_483.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_483.value
            temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = False
        elif match_arg_483.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_483.value
            temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = False
        temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                    "locatif.bénéficiaire_aide_adulte_ou_enfant_handicapés"],
                                                                                                   temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes)
    except EmptyError:
        temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=561, start_column=10,
                                             end_line=561, end_column=55,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes = temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_1
    try:
        temp_locatif_dot_date_courante = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                  "locatif.date_courante"], date_courante_11)
    except EmptyError:
        temp_locatif_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=563, start_column=10,
                                             end_line=563, end_column=23,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_date_courante = temp_locatif_dot_date_courante
    try:
        temp_locatif_dot_nombre_personnes_a_charge = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                              "locatif.nombre_personnes_à_charge"],
                                                                             nombre_personnes_a_charge_8)
    except EmptyError:
        temp_locatif_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=564, start_column=10,
                                             end_line=564, end_column=35,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_nombre_personnes_a_charge = temp_locatif_dot_nombre_personnes_a_charge
    try:
        temp_locatif_dot_situation_familiale_calcul_apl = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                   "locatif.situation_familiale_calcul_apl"],
                                                                                  situation_familiale_calcul_apl_8)
    except EmptyError:
        temp_locatif_dot_situation_familiale_calcul_apl = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=565, start_column=10,
                                             end_line=565, end_column=40,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_situation_familiale_calcul_apl = temp_locatif_dot_situation_familiale_calcul_apl
    try:
        temp_locatif_dot_zone = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                         "locatif.zone"], zone_6)
    except EmptyError:
        temp_locatif_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=566, start_column=10,
                                             end_line=566, end_column=14,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_zone = temp_locatif_dot_zone
    try:
        match_arg_484 = informations_calcul
        if match_arg_484.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_15 = match_arg_484.value
            temp_locatif_dot_logement_est_chambre = infos_15.logement_est_chambre
        elif match_arg_484.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_484.value
            temp_locatif_dot_logement_est_chambre = False
        elif match_arg_484.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_484.value
            temp_locatif_dot_logement_est_chambre = False
        temp_locatif_dot_logement_est_chambre_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                           "locatif.logement_est_chambre"],
                                                                          temp_locatif_dot_logement_est_chambre)
    except EmptyError:
        temp_locatif_dot_logement_est_chambre_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=567, start_column=10,
                                             end_line=567, end_column=30,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_logement_est_chambre = temp_locatif_dot_logement_est_chambre_1
    try:
        match_arg_485 = informations_calcul
        if match_arg_485.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_16 = match_arg_485.value
            temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = infos_16.agees_ou_handicap_adultes_hebergees_onereux_particuliers
        elif match_arg_485.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_485.value
            temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = False
        elif match_arg_485.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_485.value
            temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = False
        temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                               "locatif.âgées_ou_handicap_adultes_hébergées_onéreux_particuliers"],
                                                                                                              temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers)
    except EmptyError:
        temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=568, start_column=10,
                                             end_line=568, end_column=66,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers = temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_1
    try:
        temp_locatif_dot_type_aide = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                              "locatif.type_aide"], type_aide_2)
    except EmptyError:
        temp_locatif_dot_type_aide = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=570, start_column=10,
                                             end_line=570, end_column=19,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_type_aide = temp_locatif_dot_type_aide
    try:
        match_arg_486 = informations_calcul
        if match_arg_486.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_17 = match_arg_486.value
            temp_locatif_dot_colocation = infos_17.colocation
        elif match_arg_486.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_486.value
            temp_locatif_dot_colocation = False
        elif match_arg_486.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_486.value
            temp_locatif_dot_colocation = False
        temp_locatif_dot_colocation_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                 "locatif.colocation"], temp_locatif_dot_colocation)
    except EmptyError:
        temp_locatif_dot_colocation_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=571, start_column=10,
                                             end_line=571, end_column=20,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_colocation = temp_locatif_dot_colocation_1
    try:
        match_arg_487 = informations_calcul
        if match_arg_487.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_18 = match_arg_487.value
            temp_locatif_dot_reduction_loyer_solidarite = infos_18.reduction_loyer_solidarite
        elif match_arg_487.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_487.value
            temp_locatif_dot_reduction_loyer_solidarite = money_of_cents_string(
                "0")
        elif match_arg_487.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_487.value
            temp_locatif_dot_reduction_loyer_solidarite = money_of_cents_string(
                "0")
        temp_locatif_dot_reduction_loyer_solidarite_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                 "locatif.réduction_loyer_solidarité"],
                                                                                temp_locatif_dot_reduction_loyer_solidarite)
    except EmptyError:
        temp_locatif_dot_reduction_loyer_solidarite_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=572, start_column=10,
                                             end_line=572, end_column=36,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    locatif_dot_reduction_loyer_solidarite = temp_locatif_dot_reduction_loyer_solidarite_1
    result_21 = log_end_call(["CalculAidePersonnaliséeLogement", "locatif",
                              "CalculAidePersonnaliséeLogementLocatif"],
                             log_begin_call(["CalculAidePersonnaliséeLogement", "locatif",
                                             "CalculAidePersonnaliséeLogementLocatif"],
                                            calcul_aide_personnalisee_logement_locatif,
                                            CalculAidePersonnaliseeLogementLocatifIn(loyer_principal_in=locatif_dot_loyer_principal,
                                                                                     ressources_menage_arrondies_in=locatif_dot_ressources_menage_arrondies,
                                                                                     beneficiaire_aide_adulte_ou_enfant_handicapes_in=locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes,
                                                                                     date_courante_in=locatif_dot_date_courante,
                                                                                     nombre_personnes_a_charge_in=locatif_dot_nombre_personnes_a_charge,
                                                                                     situation_familiale_calcul_apl_in=locatif_dot_situation_familiale_calcul_apl,
                                                                                     zone_in=locatif_dot_zone,
                                                                                     logement_est_chambre_in=locatif_dot_logement_est_chambre,
                                                                                     agees_ou_handicap_adultes_hebergees_onereux_particuliers_in=locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers,
                                                                                     type_aide_in=locatif_dot_type_aide,
                                                                                     colocation_in=locatif_dot_colocation,
                                                                                     reduction_loyer_solidarite_in=locatif_dot_reduction_loyer_solidarite)))
    locatif_dot_montant_forfaitaire_charges_d823_16 = result_21.montant_forfaitaire_charges_d823_16_out
    locatif_dot_plafond_loyer_d823_16_2 = result_21.plafond_loyer_d823_16_2_out
    locatif_dot_participation_minimale = result_21.participation_minimale_out
    locatif_dot_taux_composition_familiale = result_21.taux_composition_familiale_out
    locatif_dot_participation_personnelle = result_21.participation_personnelle_out
    locatif_dot_aide_finale_formule = result_21.aide_finale_formule_out
    locatif_dot_traitement_aide_finale_montant_minimal = result_21.traitement_aide_finale_montant_minimal_out
    try:
        def temp_traitement_aide_finale_2(param_40: Money):
            try:
                match_arg_488 = categorie_calcul_apl
                if match_arg_488.code == CategorieCalculAPL_Code.Location:
                    _ = match_arg_488.value
                    return log_end_call(["CalculAidePersonnaliséeLogementLocatif",
                                         "traitement_aide_finale_montant_minimal"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                 "traitement_aide_finale_montant_minimal", "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementLocatif",
                                                                                "traitement_aide_finale_montant_minimal"],
                                                                               locatif_dot_traitement_aide_finale_montant_minimal,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementLocatif",
                                                                                                        "traitement_aide_finale_montant_minimal", "input"],
                                                                                                       param_40))))
                elif match_arg_488.code == CategorieCalculAPL_Code.AccessionPropriete:
                    _ = match_arg_488.value
                    return log_end_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                         "traitement_aide_finale_montant_minimal"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                 "traitement_aide_finale_montant_minimal", "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                "traitement_aide_finale_montant_minimal"],
                                                                               accession_propriete_dot_traitement_aide_finale_montant_minimal,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementAccessionPropriété",
                                                                                                        "traitement_aide_finale_montant_minimal", "input"],
                                                                                                       param_40))))
                elif match_arg_488.code == CategorieCalculAPL_Code.LogementFoyer:
                    _ = match_arg_488.value
                    return log_end_call(["CalculAidePersonnaliséeLogementFoyer",
                                         "traitement_aide_finale_montant_minimal"],
                                        log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                 "traitement_aide_finale_montant_minimal", "output"],
                                                                log_begin_call(["CalculAidePersonnaliséeLogementFoyer",
                                                                                "traitement_aide_finale_montant_minimal"],
                                                                               logement_foyer_dot_traitement_aide_finale_montant_minimal,
                                                                               log_variable_definition(["CalculAidePersonnaliséeLogementFoyer",
                                                                                                        "traitement_aide_finale_montant_minimal", "input"],
                                                                                                       param_40))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=772,
                                                     start_column=10,
                                                     end_line=772,
                                                     end_column=32,
                                                     law_headings=["Tous secteurs",
                                                                   "Calcul du montant de l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=772, start_column=10,
                                             end_line=772, end_column=32,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_1 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                        "traitement_aide_finale"], temp_traitement_aide_finale_2)
    try:
        match_arg_489 = categorie_calcul_apl
        if match_arg_489.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_489.value
            temp_aide_finale_formule_7 = locatif_dot_aide_finale_formule
        elif match_arg_489.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_489.value
            temp_aide_finale_formule_7 = accession_propriete_dot_aide_finale_formule
        elif match_arg_489.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_489.value
            temp_aide_finale_formule_7 = logement_foyer_dot_aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_7 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=771, start_column=10,
                                             end_line=771, end_column=29,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_6 = log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                     "aide_finale_formule"], temp_aide_finale_formule_7)
    try:
        match_arg_490 = categorie_calcul_apl
        if match_arg_490.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_490.value
            temp___7 = False
        elif match_arg_490.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_490.value
            temp___7 = True
        elif match_arg_490.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_490.value
            temp___7 = False
        if temp___7:
            match_arg_491 = informations_calcul
            if match_arg_491.code == InformationsCalculAPL_Code.InfosLocatif:
                _ = match_arg_491.value
                temp___8 = False
            elif match_arg_491.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                _ = match_arg_491.value
                temp___8 = False
            elif match_arg_491.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                _ = match_arg_491.value
                temp___8 = True
        else:
            temp___8 = True
    except EmptyError:
        temp___8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1469, start_column=5,
                                             end_line=1471, end_column=15,
                                             law_headings=["Article D823-9",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___8
    try:
        match_arg_492 = categorie_calcul_apl
        if match_arg_492.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_492.value
            temp___9 = False
        elif match_arg_492.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_492.value
            temp___9 = False
        elif match_arg_492.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_492.value
            temp___9 = True
        if temp___9:
            match_arg_493 = informations_calcul
            if match_arg_493.code == InformationsCalculAPL_Code.InfosLocatif:
                _ = match_arg_493.value
                temp___10 = False
            elif match_arg_493.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                _ = match_arg_493.value
                temp___10 = True
            elif match_arg_493.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                _ = match_arg_493.value
                temp___10 = False
        else:
            temp___10 = True
    except EmptyError:
        temp___10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1465, start_column=5,
                                             end_line=1467, end_column=15,
                                             law_headings=["Article D823-9",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___10
    try:
        match_arg_494 = categorie_calcul_apl
        if match_arg_494.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_494.value
            temp___11 = True
        elif match_arg_494.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_494.value
            temp___11 = False
        elif match_arg_494.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_494.value
            temp___11 = False
        if temp___11:
            match_arg_495 = informations_calcul
            if match_arg_495.code == InformationsCalculAPL_Code.InfosLocatif:
                _ = match_arg_495.value
                temp___12 = True
            elif match_arg_495.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                _ = match_arg_495.value
                temp___12 = False
            elif match_arg_495.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                _ = match_arg_495.value
                temp___12 = False
        else:
            temp___12 = True
    except EmptyError:
        temp___12 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1461, start_column=5,
                                             end_line=1463, end_column=15,
                                             law_headings=["Article D823-9",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___12
    return CalculAidePersonnaliseeLogementOut(aide_finale_formule_out=aide_finale_formule_6,
                                              traitement_aide_finale_out=traitement_aide_finale_1)


def eligibilite_prime_de_demenagement(eligibilite_prime_de_demenagement_in: EligibilitePrimeDeDemenagementIn):
    date_emmenagement = eligibilite_prime_de_demenagement_in.date_emmenagement_in
    menage_1 = eligibilite_prime_de_demenagement_in.menage_in
    demandeur_1 = eligibilite_prime_de_demenagement_in.demandeur_in
    date_courante_12 = eligibilite_prime_de_demenagement_in.date_courante_in
    depenses_justifiees_reellement_engagees = eligibilite_prime_de_demenagement_in.depenses_justifiees_reellement_engagees_in
    try:
        temp_delai_apres_emmenagement_l823_8_2 = duration_of_numbers(0, 6, 0)
    except EmptyError:
        temp_delai_apres_emmenagement_l823_8_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=487, start_column=11,
                                             end_line=487, end_column=44,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    delai_apres_emmenagement_l823_8_2 = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                                 "délai_après_emménagement_l823_8_2"],
                                                                temp_delai_apres_emmenagement_l823_8_2)
    try:
        try:
            def temp_condition_rang_enfant(acc_5: Integer, personne_a_charge_3: Any):
                match_arg_496 = personne_a_charge_3
                if match_arg_496.code == PersonneACharge_Code.EnfantACharge:
                    _ = match_arg_496.value
                    temp_condition_rang_enfant_1 = True
                elif match_arg_496.code == PersonneACharge_Code.AutrePersonneACharge:
                    _ = match_arg_496.value
                    temp_condition_rang_enfant_1 = False
                if temp_condition_rang_enfant_1:
                    return (acc_5 + integer_of_string("1"))
                else:
                    return acc_5
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2127, start_column=5,
                                                 end_line=2132, end_column=71,
                                                 law_headings=["Article D823-20",
                                                               "Section 2 : Prime de déménagement",
                                                               "Chapitre III : Modalités de liquidation et de versement",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), ((list_fold_left(
                                                                   temp_condition_rang_enfant, integer_of_string(
                                                                       "0"),
                                                                   menage_1.personnes_a_charge) +
                                                                   menage_1.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse) >=
                    integer_of_string("3"))):
                temp_condition_rang_enfant_2 = True
            else:
                temp_condition_rang_enfant_2 = dead_value
                raise EmptyError
        except EmptyError:
            temp_condition_rang_enfant_2 = False
    except EmptyError:
        temp_condition_rang_enfant_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=484, start_column=11,
                                             end_line=484, end_column=32,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_rang_enfant = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                     "condition_rang_enfant"], temp_condition_rang_enfant_2)
    try:
        temp_base_mensuelle_allocations_familiales_dot_date_courante_1 = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                                                                  "base_mensuelle_allocations_familiales.date_courante"],
                                                                                                 date_courante_12)
    except EmptyError:
        temp_base_mensuelle_allocations_familiales_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../base_mensuelle_allocations_familiales/bmaf.catala_fr",
                                             start_line=5, start_column=10,
                                             end_line=5, end_column=23,
                                             law_headings=["Montant de la base mensuelle des allocations familiales"]))
    base_mensuelle_allocations_familiales_dot_date_courante_1 = temp_base_mensuelle_allocations_familiales_dot_date_courante_1
    result_22 = log_end_call(["ÉligibilitéPrimeDeDéménagement",
                              "base_mensuelle_allocations_familiales",
                              "BaseMensuelleAllocationsFamiliales"],
                             log_begin_call(["ÉligibilitéPrimeDeDéménagement",
                                             "base_mensuelle_allocations_familiales",
                                             "BaseMensuelleAllocationsFamiliales"],
                                            base_mensuelle_allocations_familiales,
                                            BaseMensuelleAllocationsFamilialesIn(date_courante_in=base_mensuelle_allocations_familiales_dot_date_courante_1)))
    base_mensuelle_allocations_familiales_dot_montant_1 = result_22.montant_out
    try:
        temp_eligibilite_apl_dot_menage = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                                   "éligibilité_apl.ménage"], menage_1)
    except EmptyError:
        temp_eligibilite_apl_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=312, start_column=10,
                                             end_line=312, end_column=16,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_apl_dot_menage = temp_eligibilite_apl_dot_menage
    try:
        temp_eligibilite_apl_dot_demandeur = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                                      "éligibilité_apl.demandeur"], demandeur_1)
    except EmptyError:
        temp_eligibilite_apl_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=313, start_column=10,
                                             end_line=313, end_column=19,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_apl_dot_demandeur = temp_eligibilite_apl_dot_demandeur
    try:
        temp_eligibilite_apl_dot_date_courante = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                                          "éligibilité_apl.date_courante"], date_courante_12)
    except EmptyError:
        temp_eligibilite_apl_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=314, start_column=17,
                                             end_line=314, end_column=30,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_apl_dot_date_courante = temp_eligibilite_apl_dot_date_courante

    def temp_eligibilite_apl_dot_condition_logement_residence_principale(_: Unit):
        temp_eligibilite_apl_dot_condition_logement_residence_principale_1 = dead_value
        raise EmptyError
        return log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                        "éligibilité_apl.condition_logement_résidence_principale"],
                                       temp_eligibilite_apl_dot_condition_logement_residence_principale_1)
    eligibilite_apl_dot_condition_logement_residence_principale = temp_eligibilite_apl_dot_condition_logement_residence_principale

    def temp_eligibilite_apl_dot_condition_logement_surface(_: Unit):
        temp_eligibilite_apl_dot_condition_logement_surface_1 = dead_value
        raise EmptyError
        return log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                        "éligibilité_apl.condition_logement_surface"],
                                       temp_eligibilite_apl_dot_condition_logement_surface_1)
    eligibilite_apl_dot_condition_logement_surface = temp_eligibilite_apl_dot_condition_logement_surface
    result_23 = log_end_call(["ÉligibilitéPrimeDeDéménagement",
                              "éligibilité_apl", "ÉligibilitéAidesPersonnelleLogement"],
                             log_begin_call(["ÉligibilitéPrimeDeDéménagement",
                                             "éligibilité_apl", "ÉligibilitéAidesPersonnelleLogement"],
                                            eligibilite_aides_personnelle_logement,
                                            EligibiliteAidesPersonnelleLogementIn(menage_in=eligibilite_apl_dot_menage,
                                                                                  demandeur_in=eligibilite_apl_dot_demandeur,
                                                                                  date_courante_in=eligibilite_apl_dot_date_courante,
                                                                                  condition_logement_residence_principale_in=eligibilite_apl_dot_condition_logement_residence_principale,
                                                                                  condition_logement_surface_in=eligibilite_apl_dot_condition_logement_surface)))
    eligibilite_apl_dot_date_courante_1 = result_23.date_courante_out
    eligibilite_apl_dot_eligibilite = result_23.eligibilite_out
    eligibilite_apl_dot_nombre_personnes_a_charge_prises_en_compte = result_23.nombre_personnes_a_charge_prises_en_compte_out
    eligibilite_apl_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_23.coefficents_enfants_garde_alternee_pris_en_compte_out
    eligibilite_apl_dot_condition_2_r823_4 = result_23.condition_2_r823_4_out
    try:
        try:
            match_arg_497 = menage_1.date_naissance_troisieme_enfant_ou_dernier_si_plus
            if match_arg_497.code == DateNaissanceTroisiemeOuDernierPlusEnfant_Code.MoinsDeTroisEnfants:
                _ = match_arg_497.value
                temp_condition_periode_demenagement = False
            elif match_arg_497.code == DateNaissanceTroisiemeOuDernierPlusEnfant_Code.PlusDeTroisEnfants:
                date_naissance_ou_grossesse = match_arg_497.value
                match_arg_498 = date_naissance_ou_grossesse
                if match_arg_498.code == DateDeNaissanceOuMoisDeGrossesse_Code.DateDeNaissance:
                    date_naissance = match_arg_498.value
                    temp_condition_periode_demenagement = (date_courante_12 <=
                                                           (first_day_of_month((date_naissance +
                                                                                duration_of_numbers(2, 0, 0))) +
                                                               duration_of_numbers(0, 0, -1)))
                elif match_arg_498.code == DateDeNaissanceOuMoisDeGrossesse_Code.AvantPremierJourMoisCivilTroisiemeMoisDeGrossesse:
                    _ = match_arg_498.value
                    temp_condition_periode_demenagement = False
                elif match_arg_498.code == DateDeNaissanceOuMoisDeGrossesse_Code.ApresPremierJourMoisCivilTroisiemeMoisDeGrossesse:
                    _ = match_arg_498.value
                    temp_condition_periode_demenagement = True
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=2136, start_column=6,
                                                 end_line=2144, end_column=77,
                                                 law_headings=["Article D823-20",
                                                               "Section 2 : Prime de déménagement",
                                                               "Chapitre III : Modalités de liquidation et de versement",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), temp_condition_periode_demenagement):
                temp_condition_periode_demenagement_1 = True
            else:
                temp_condition_periode_demenagement_1 = dead_value
                raise EmptyError
        except EmptyError:
            temp_condition_periode_demenagement_1 = False
    except EmptyError:
        temp_condition_periode_demenagement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=485, start_column=11,
                                             end_line=485, end_column=41,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_periode_demenagement = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                              "condition_période_déménagement"],
                                                             temp_condition_periode_demenagement_1)
    try:
        def temp_plafond_d823_22(acc_6: Integer, personne_a_charge_4: Any):
            match_arg_499 = personne_a_charge_4
            if match_arg_499.code == PersonneACharge_Code.EnfantACharge:
                _ = match_arg_499.value
                temp_plafond_d823_22_1 = True
            elif match_arg_499.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_499.value
                temp_plafond_d823_22_1 = False
            if temp_plafond_d823_22_1:
                return (acc_6 + integer_of_string("1"))
            else:
                return acc_6
        if (list_fold_left(temp_plafond_d823_22, integer_of_string("0"),
                           menage_1.personnes_a_charge) >
                integer_of_string("3")):
            def temp_plafond_d823_22_2(acc_7: Integer, personne_a_charge_5: Any):
                match_arg_500 = personne_a_charge_5
                if match_arg_500.code == PersonneACharge_Code.EnfantACharge:
                    _ = match_arg_500.value
                    temp_plafond_d823_22_3 = True
                elif match_arg_500.code == PersonneACharge_Code.AutrePersonneACharge:
                    _ = match_arg_500.value
                    temp_plafond_d823_22_3 = False
                if temp_plafond_d823_22_3:
                    return (acc_7 + integer_of_string("1"))
                else:
                    return acc_7
            temp_plafond_d823_22_4 = (base_mensuelle_allocations_familiales_dot_montant_1 *
                                      (decimal_of_integer((list_fold_left(temp_plafond_d823_22_2,
                                                                          integer_of_string(
                                                                              "0"),
                                                                          menage_1.personnes_a_charge) -
                                                           integer_of_string("3"))) * decimal_of_string("0.2")))
        else:
            temp_plafond_d823_22_4 = money_of_cents_string("0")
        temp_plafond_d823_22_5 = ((base_mensuelle_allocations_familiales_dot_montant_1 *
                                   decimal_of_string("2.4")) + temp_plafond_d823_22_4)
    except EmptyError:
        temp_plafond_d823_22_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=488, start_column=11,
                                             end_line=488, end_column=26,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    plafond_d823_22 = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                               "plafond_d823_22"], temp_plafond_d823_22_5)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=556, start_column=5, end_line=559, end_column=43,
                                                 law_headings=["Article L823-8",
                                                               "Chapitre III : Modalités de liquidation et de versement",
                                                               "Titre II : Dispositions communes aux aides personnelles au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie législative",
                                                               "Code de la construction et de l'habitation"]), (eligibilite_apl_dot_eligibilite and
                                                                                                                (condition_rang_enfant and
                                                                                                                 (condition_periode_demenagement and
                                                                                                                  ((eligibilite_apl_dot_date_courante_1 - date_emmenagement) <=
                                                                                                                   delai_apres_emmenagement_l823_8_2))))):
                temp_eligibilite_logement_1 = True
            else:
                temp_eligibilite_logement_1 = dead_value
                raise EmptyError
        except EmptyError:
            temp_eligibilite_logement_1 = False
    except EmptyError:
        temp_eligibilite_logement_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=486, start_column=11,
                                             end_line=486, end_column=31,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_logement_1 = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                      "éligibilité_logement"], temp_eligibilite_logement_1)
    try:
        if (depenses_justifiees_reellement_engagees <=
                plafond_d823_22):
            temp_montant_prime_demenagement = depenses_justifiees_reellement_engagees
        else:
            temp_montant_prime_demenagement = plafond_d823_22
    except EmptyError:
        temp_montant_prime_demenagement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=494, start_column=10,
                                             end_line=494, end_column=36,
                                             law_headings=["Éligibilité à la prime de déménagement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    montant_prime_demenagement = log_variable_definition(["ÉligibilitéPrimeDeDéménagement",
                                                          "montant_prime_déménagement"], temp_montant_prime_demenagement)
    return EligibilitePrimeDeDemenagementOut(montant_prime_demenagement_out=montant_prime_demenagement)


def eligibilite_aide_personnalisee_logement(eligibilite_aide_personnalisee_logement_in: EligibiliteAidePersonnaliseeLogementIn):
    menage_2 = eligibilite_aide_personnalisee_logement_in.menage_in
    demandeur_2 = eligibilite_aide_personnalisee_logement_in.demandeur_in
    date_courante_13 = eligibilite_aide_personnalisee_logement_in.date_courante_in
    try:
        def temp_caracteristiques_pret_l831_1_1(param_41: Pret):
            try:
                try:
                    try:
                        match_arg_501 = param_41.type_pret
                        if match_arg_501.code == TypePret_Code.D331_32:
                            _ = match_arg_501.value
                            temp_caracteristiques_pret_l831_1_1_1 = False
                        elif match_arg_501.code == TypePret_Code.D331_63_64:
                            _ = match_arg_501.value
                            temp_caracteristiques_pret_l831_1_1_1 = False
                        elif match_arg_501.code == TypePret_Code.D331_59_8:
                            _ = match_arg_501.value
                            temp_caracteristiques_pret_l831_1_1_1 = False
                        elif match_arg_501.code == TypePret_Code.D331_76_1:
                            _ = match_arg_501.value
                            temp_caracteristiques_pret_l831_1_1_1 = True
                        elif match_arg_501.code == TypePret_Code.Autre:
                            _ = match_arg_501.value
                            temp_caracteristiques_pret_l831_1_1_1 = False
                        match_arg_502 = param_41.type_pret
                        if match_arg_502.code == TypePret_Code.D331_32:
                            _ = match_arg_502.value
                            temp_caracteristiques_pret_l831_1_1_2 = False
                        elif match_arg_502.code == TypePret_Code.D331_63_64:
                            _ = match_arg_502.value
                            temp_caracteristiques_pret_l831_1_1_2 = False
                        elif match_arg_502.code == TypePret_Code.D331_59_8:
                            _ = match_arg_502.value
                            temp_caracteristiques_pret_l831_1_1_2 = True
                        elif match_arg_502.code == TypePret_Code.D331_76_1:
                            _ = match_arg_502.value
                            temp_caracteristiques_pret_l831_1_1_2 = False
                        elif match_arg_502.code == TypePret_Code.Autre:
                            _ = match_arg_502.value
                            temp_caracteristiques_pret_l831_1_1_2 = False
                        match_arg_503 = param_41.titulaire_pret
                        if match_arg_503.code == TitulairePret_Code.Demandeur:
                            _ = match_arg_503.value
                            temp_caracteristiques_pret_l831_1_1_3 = False
                        elif match_arg_503.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                            _ = match_arg_503.value
                            temp_caracteristiques_pret_l831_1_1_3 = True
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=3085, start_column=5,
                                                             end_line=3088, end_column=46,
                                                             law_headings=["Article R832-7",
                                                                           "Section 2 : Accession à la propriété",
                                                                           "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                                           "Titre III : Aide personnalisée au logement",
                                                                           "Livre VIII : Aides personnelles au logement",
                                                                           "Partie réglementaire",
                                                                           "Code de la construction et de l'habitation"]), (temp_caracteristiques_pret_l831_1_1_3 and
                                                                                                                            (temp_caracteristiques_pret_l831_1_1_2 or
                                                                                                                             temp_caracteristiques_pret_l831_1_1_1))):
                            return True
                        else:
                            raise EmptyError
                    except EmptyError:
                        match_arg_504 = param_41.type_pret
                        if match_arg_504.code == TypePret_Code.D331_32:
                            _ = match_arg_504.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        elif match_arg_504.code == TypePret_Code.D331_63_64:
                            _ = match_arg_504.value
                            temp_caracteristiques_pret_l831_1_1_4 = True
                        elif match_arg_504.code == TypePret_Code.D331_59_8:
                            _ = match_arg_504.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        elif match_arg_504.code == TypePret_Code.D331_76_1:
                            _ = match_arg_504.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        elif match_arg_504.code == TypePret_Code.Autre:
                            _ = match_arg_504.value
                            temp_caracteristiques_pret_l831_1_1_4 = False
                        match_arg_505 = param_41.type_pret
                        if match_arg_505.code == TypePret_Code.D331_32:
                            _ = match_arg_505.value
                            temp_caracteristiques_pret_l831_1_1_5 = True
                        elif match_arg_505.code == TypePret_Code.D331_63_64:
                            _ = match_arg_505.value
                            temp_caracteristiques_pret_l831_1_1_5 = False
                        elif match_arg_505.code == TypePret_Code.D331_59_8:
                            _ = match_arg_505.value
                            temp_caracteristiques_pret_l831_1_1_5 = False
                        elif match_arg_505.code == TypePret_Code.D331_76_1:
                            _ = match_arg_505.value
                            temp_caracteristiques_pret_l831_1_1_5 = False
                        elif match_arg_505.code == TypePret_Code.Autre:
                            _ = match_arg_505.value
                            temp_caracteristiques_pret_l831_1_1_5 = False
                        match_arg_506 = param_41.titulaire_pret
                        if match_arg_506.code == TitulairePret_Code.Demandeur:
                            _ = match_arg_506.value
                            temp_caracteristiques_pret_l831_1_1_6 = True
                        elif match_arg_506.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                            _ = match_arg_506.value
                            temp_caracteristiques_pret_l831_1_1_6 = False
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                             start_line=3050, start_column=5,
                                                             end_line=3052, end_column=47,
                                                             law_headings=["Article R832-5",
                                                                           "Section 2 : Accession à la propriété",
                                                                           "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                                           "Titre III : Aide personnalisée au logement",
                                                                           "Livre VIII : Aides personnelles au logement",
                                                                           "Partie réglementaire",
                                                                           "Code de la construction et de l'habitation"]), (temp_caracteristiques_pret_l831_1_1_6 and
                                                                                                                            (temp_caracteristiques_pret_l831_1_1_5 or
                                                                                                                             temp_caracteristiques_pret_l831_1_1_4))):
                            return True
                        else:
                            raise EmptyError
                except EmptyError:
                    return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=393,
                                                     start_column=11,
                                                     end_line=393,
                                                     end_column=41,
                                                     law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_caracteristiques_pret_l831_1_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=393, start_column=11,
                                             end_line=393, end_column=41,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    caracteristiques_pret_l831_1_1 = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                              "caractéristiques_prêt_l831_1_1"],
                                                             temp_caracteristiques_pret_l831_1_1)
    try:
        def temp_caracteristiques_pret_l831_1_6(param_42: Pret):
            try:
                return False
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=394,
                                                     start_column=11,
                                                     end_line=394,
                                                     end_column=41,
                                                     law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_caracteristiques_pret_l831_1_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=394, start_column=11,
                                             end_line=394, end_column=41,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    caracteristiques_pret_l831_1_6 = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                              "caractéristiques_prêt_l831_1_6"],
                                                             temp_caracteristiques_pret_l831_1_6)
    try:
        try:
            try:
                try:
                    match_arg_507 = menage_2.logement.mode_occupation
                    if match_arg_507.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_507.value
                        temp_condition_logement_pret = False
                    elif match_arg_507.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_507.value
                        temp_condition_logement_pret = False
                    elif match_arg_507.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        propriete = match_arg_507.value
                        temp_condition_logement_pret = ((propriete.pret.date_signature >=
                                                         date_of_numbers(2018, 1, 1)) and
                                                        ((propriete.pret.date_signature <
                                                          date_of_numbers(2020, 1, 1)) and
                                                         (menage_2.logement.est_ancien_l831_2 and
                                                            menage_2.logement.situe_commune_desequilibre_l831_2)))
                    elif match_arg_507.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_507.value
                        temp_condition_logement_pret = False
                    elif match_arg_507.code == ModeOccupation_Code.LocationAccession:
                        propriete_1 = match_arg_507.value
                        temp_condition_logement_pret = ((propriete_1.pret.date_signature >=
                                                         date_of_numbers(2018, 1, 1)) and
                                                        ((propriete_1.pret.date_signature <
                                                          date_of_numbers(2020, 1, 1)) and
                                                         (menage_2.logement.est_ancien_l831_2 and
                                                            menage_2.logement.situe_commune_desequilibre_l831_2)))
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=756, start_column=5,
                                                         end_line=769, end_column=30,
                                                         law_headings=["Article L831-2",
                                                                       "Chapitre Ier : Champ d'application",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_pret):
                        temp_condition_logement_pret_1 = True
                    else:
                        temp_condition_logement_pret_1 = dead_value
                        raise EmptyError
                except EmptyError:
                    match_arg_508 = menage_2.logement.mode_occupation
                    if match_arg_508.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_508.value
                        temp_condition_logement_pret_2 = False
                    elif match_arg_508.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_508.value
                        temp_condition_logement_pret_2 = False
                    elif match_arg_508.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        propriete_2 = match_arg_508.value
                        temp_condition_logement_pret_2 = (propriete_2.pret.date_signature >=
                                                          date_of_numbers(2017, 12, 31))
                    elif match_arg_508.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_508.value
                        temp_condition_logement_pret_2 = False
                    elif match_arg_508.code == ModeOccupation_Code.LocationAccession:
                        propriete_3 = match_arg_508.value
                        temp_condition_logement_pret_2 = (propriete_3.pret.date_signature >=
                                                          date_of_numbers(2017, 12, 31))
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=737, start_column=5,
                                                         end_line=742, end_column=30,
                                                         law_headings=["Article L831-2",
                                                                       "Chapitre Ier : Champ d'application",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_pret_2):
                        temp_condition_logement_pret_1 = False
                    else:
                        temp_condition_logement_pret_1 = dead_value
                        raise EmptyError
            except EmptyError:
                temp_condition_logement_pret_1 = True
        except EmptyError:
            temp_condition_logement_pret_1 = False
    except EmptyError:
        temp_condition_logement_pret_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=392, start_column=11,
                                             end_line=392, end_column=34,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_pret = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                       "condition_logement_prêt"], temp_condition_logement_pret_1)
    try:
        temp_eligibilite_commune_dot_menage = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                       "éligibilité_commune.ménage"], menage_2)
    except EmptyError:
        temp_eligibilite_commune_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=312, start_column=10,
                                             end_line=312, end_column=16,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_commune_dot_menage = temp_eligibilite_commune_dot_menage
    try:
        temp_eligibilite_commune_dot_demandeur = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                          "éligibilité_commune.demandeur"], demandeur_2)
    except EmptyError:
        temp_eligibilite_commune_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=313, start_column=10,
                                             end_line=313, end_column=19,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_commune_dot_demandeur = temp_eligibilite_commune_dot_demandeur
    try:
        temp_eligibilite_commune_dot_date_courante = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                              "éligibilité_commune.date_courante"], date_courante_13)
    except EmptyError:
        temp_eligibilite_commune_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=314, start_column=17,
                                             end_line=314, end_column=30,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_commune_dot_date_courante = temp_eligibilite_commune_dot_date_courante

    def temp_eligibilite_commune_dot_condition_logement_residence_principale(_: Unit):
        temp_eligibilite_commune_dot_condition_logement_residence_principale_1 = dead_value
        raise EmptyError
        return log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                        "éligibilité_commune.condition_logement_résidence_principale"],
                                       temp_eligibilite_commune_dot_condition_logement_residence_principale_1)
    eligibilite_commune_dot_condition_logement_residence_principale = temp_eligibilite_commune_dot_condition_logement_residence_principale

    def temp_eligibilite_commune_dot_condition_logement_surface(_: Unit):
        temp_eligibilite_commune_dot_condition_logement_surface_1 = dead_value
        raise EmptyError
        return log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                        "éligibilité_commune.condition_logement_surface"],
                                       temp_eligibilite_commune_dot_condition_logement_surface_1)
    eligibilite_commune_dot_condition_logement_surface = temp_eligibilite_commune_dot_condition_logement_surface
    result_24 = log_end_call(["ÉligibilitéAidePersonnaliséeLogement",
                              "éligibilité_commune", "ÉligibilitéAidesPersonnelleLogement"],
                             log_begin_call(["ÉligibilitéAidePersonnaliséeLogement",
                                             "éligibilité_commune", "ÉligibilitéAidesPersonnelleLogement"],
                                            eligibilite_aides_personnelle_logement,
                                            EligibiliteAidesPersonnelleLogementIn(menage_in=eligibilite_commune_dot_menage,
                                                                                  demandeur_in=eligibilite_commune_dot_demandeur,
                                                                                  date_courante_in=eligibilite_commune_dot_date_courante,
                                                                                  condition_logement_residence_principale_in=eligibilite_commune_dot_condition_logement_residence_principale,
                                                                                  condition_logement_surface_in=eligibilite_commune_dot_condition_logement_surface)))
    eligibilite_commune_dot_date_courante_1 = result_24.date_courante_out
    eligibilite_commune_dot_eligibilite = result_24.eligibilite_out
    eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte = result_24.nombre_personnes_a_charge_prises_en_compte_out
    eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_24.coefficents_enfants_garde_alternee_pris_en_compte_out
    eligibilite_commune_dot_condition_2_r823_4 = result_24.condition_2_r823_4_out
    try:
        def temp_condition_logement_bailleur(_: Any):
            return False

        def temp_condition_logement_bailleur_1(_: Any):
            return log_decision_taken(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=391, start_column=11, end_line=391, end_column=38,
                                                     law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                                   "Déclarations des champs d'application",
                                                                   "Prologue : aides au logement"]), True)

        def temp_condition_logement_bailleur_2(_: Any):
            try:
                try:
                    match_arg_509 = menage_2.logement.mode_occupation
                    if match_arg_509.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_509.value
                        temp_condition_logement_bailleur_3 = False
                    elif match_arg_509.code == ModeOccupation_Code.ResidentLogementFoyer:
                        logement_foyer_1 = match_arg_509.value
                        temp_condition_logement_bailleur_3 = logement_foyer_1.remplit_conditions_r832_21
                    elif match_arg_509.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_509.value
                        temp_condition_logement_bailleur_3 = False
                    elif match_arg_509.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_509.value
                        temp_condition_logement_bailleur_3 = False
                    elif match_arg_509.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_509.value
                        temp_condition_logement_bailleur_3 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=3758, start_column=5,
                                                         end_line=3763, end_column=30,
                                                         law_headings=["Article R832-21",
                                                                       "Sous-Section 1 : Conditions d'assimilation des logements-foyers aux logements à usage locatif",
                                                                       "Section 3 : Logements-foyers",
                                                                       "Chapitre II : Modalités de liquidation et de versement de l'aide personnalisée au logement",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_bailleur_3):
                        return True
                    else:
                        raise EmptyError
                except EmptyError:
                    match_arg_510 = menage_2.logement.mode_occupation
                    if match_arg_510.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_510.value
                        temp_condition_logement_bailleur_4 = False
                    elif match_arg_510.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_510.value
                        temp_condition_logement_bailleur_4 = False
                    elif match_arg_510.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_510.value
                        temp_condition_logement_bailleur_4 = False
                    elif match_arg_510.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_510.value
                        temp_condition_logement_bailleur_4 = False
                    elif match_arg_510.code == ModeOccupation_Code.LocationAccession:
                        propriete_4 = match_arg_510.value
                        temp_condition_logement_bailleur_4 = log_end_call(["ÉligibilitéAidePersonnaliséeLogement",
                                                                           "caractéristiques_prêt_l831_1_6"],
                                                                          log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                                   "caractéristiques_prêt_l831_1_6", "output"],
                                                                                                  log_begin_call(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                                                  "caractéristiques_prêt_l831_1_6"],
                                                                                                                 caracteristiques_pret_l831_1_6,
                                                                                                                 log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                                                                          "caractéristiques_prêt_l831_1_6", "input"],
                                                                                                                                         propriete_4.pret))))
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=718, start_column=5,
                                                         end_line=721, end_column=30,
                                                         law_headings=["Article L831-1",
                                                                       "Chapitre Ier : Champ d'application",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_bailleur_4):
                        return True
                    else:
                        raise EmptyError
            except EmptyError:
                match_arg_511 = menage_2.logement.mode_occupation
                if match_arg_511.code == ModeOccupation_Code.Locataire:
                    _ = match_arg_511.value
                    temp_condition_logement_bailleur_5 = False
                elif match_arg_511.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_511.value
                    temp_condition_logement_bailleur_5 = False
                elif match_arg_511.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    propriete_5 = match_arg_511.value
                    temp_condition_logement_bailleur_5 = log_end_call(["ÉligibilitéAidePersonnaliséeLogement",
                                                                       "caractéristiques_prêt_l831_1_1"],
                                                                      log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                               "caractéristiques_prêt_l831_1_1", "output"],
                                                                                              log_begin_call(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                                              "caractéristiques_prêt_l831_1_1"],
                                                                                                             caracteristiques_pret_l831_1_1,
                                                                                                             log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                                                                      "caractéristiques_prêt_l831_1_1", "input"],
                                                                                                                                     propriete_5.pret))))
                elif match_arg_511.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_511.value
                    temp_condition_logement_bailleur_5 = False
                elif match_arg_511.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_511.value
                    temp_condition_logement_bailleur_5 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=613, start_column=5,
                                                     end_line=616, end_column=30,
                                                     law_headings=["Article L831-1",
                                                                   "Chapitre Ier : Champ d'application",
                                                                   "Titre III : Aide personnalisée au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_bailleur_5):
                    return True
                else:
                    raise EmptyError

        def temp_condition_logement_bailleur_6(_: Any):
            try:
                try:
                    match_arg_512 = menage_2.logement.mode_occupation
                    if match_arg_512.code == ModeOccupation_Code.Locataire:
                        location = match_arg_512.value
                        match_arg_513 = location.bailleur.type_bailleur
                        if match_arg_513.code == TypeBailleur_Code.BailleurSocial:
                            _ = match_arg_513.value
                            temp_condition_logement_bailleur_7 = False
                        elif match_arg_513.code == TypeBailleur_Code.BailleurPrive:
                            _ = match_arg_513.value
                            temp_condition_logement_bailleur_7 = (location.bailleur.acquisition_aides_etat_pret_titre_II_ou_livre_III and
                                                                  not location.bailleur.respecte_convention_titre_V)
                    elif match_arg_512.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_512.value
                        temp_condition_logement_bailleur_7 = False
                    elif match_arg_512.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_512.value
                        temp_condition_logement_bailleur_7 = False
                    elif match_arg_512.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_512.value
                        temp_condition_logement_bailleur_7 = False
                    elif match_arg_512.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_512.value
                        temp_condition_logement_bailleur_7 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=661, start_column=5,
                                                         end_line=671, end_column=30,
                                                         law_headings=["Article L831-1",
                                                                       "Chapitre Ier : Champ d'application",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_bailleur_7):
                        return False
                    else:
                        raise EmptyError
                except EmptyError:
                    match_arg_514 = menage_2.logement.mode_occupation
                    if match_arg_514.code == ModeOccupation_Code.Locataire:
                        location_1 = match_arg_514.value
                        match_arg_515 = location_1.bailleur.type_bailleur
                        if match_arg_515.code == TypeBailleur_Code.BailleurSocial:
                            _ = match_arg_515.value
                            temp_condition_logement_bailleur_8 = (location_1.bailleur.construit_ameliore_conditions_l831_1_4 and
                                                                  (location_1.bailleur.respecte_convention_titre_V or
                                                                   location_1.bailleur.respecte_convention_titre_II))
                        elif match_arg_515.code == TypeBailleur_Code.BailleurPrive:
                            _ = match_arg_515.value
                            temp_condition_logement_bailleur_8 = (location_1.bailleur.construit_ameliore_conditions_l831_1_4 and
                                                                  (location_1.bailleur.respecte_convention_titre_V or
                                                                   location_1.bailleur.respecte_convention_titre_II))
                    elif match_arg_514.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_514.value
                        temp_condition_logement_bailleur_8 = False
                    elif match_arg_514.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        _ = match_arg_514.value
                        temp_condition_logement_bailleur_8 = False
                    elif match_arg_514.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_514.value
                        temp_condition_logement_bailleur_8 = False
                    elif match_arg_514.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_514.value
                        temp_condition_logement_bailleur_8 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=684, start_column=5,
                                                         end_line=695, end_column=30,
                                                         law_headings=["Article L831-1",
                                                                       "Chapitre Ier : Champ d'application",
                                                                       "Titre III : Aide personnalisée au logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_bailleur_8):
                        return True
                    else:
                        raise EmptyError
            except EmptyError:
                match_arg_516 = menage_2.logement.mode_occupation
                if match_arg_516.code == ModeOccupation_Code.Locataire:
                    location_2 = match_arg_516.value
                    match_arg_517 = location_2.bailleur.type_bailleur
                    if match_arg_517.code == TypeBailleur_Code.BailleurSocial:
                        _ = match_arg_517.value
                        temp_condition_logement_bailleur_9 = location_2.bailleur.respecte_convention_titre_V
                    elif match_arg_517.code == TypeBailleur_Code.BailleurPrive:
                        _ = match_arg_517.value
                        temp_condition_logement_bailleur_9 = location_2.bailleur.respecte_convention_titre_II
                elif match_arg_516.code == ModeOccupation_Code.ResidentLogementFoyer:
                    _ = match_arg_516.value
                    temp_condition_logement_bailleur_9 = False
                elif match_arg_516.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                    _ = match_arg_516.value
                    temp_condition_logement_bailleur_9 = False
                elif match_arg_516.code == ModeOccupation_Code.SousLocataire:
                    _ = match_arg_516.value
                    temp_condition_logement_bailleur_9 = False
                elif match_arg_516.code == ModeOccupation_Code.LocationAccession:
                    _ = match_arg_516.value
                    temp_condition_logement_bailleur_9 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=634, start_column=5,
                                                     end_line=641, end_column=30,
                                                     law_headings=["Article L831-1",
                                                                   "Chapitre Ier : Champ d'application",
                                                                   "Titre III : Aide personnalisée au logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_bailleur_9):
                    return True
                else:
                    raise EmptyError
        temp_condition_logement_bailleur_10 = handle_default([temp_condition_logement_bailleur_6,
                                                             temp_condition_logement_bailleur_2],
                                                             temp_condition_logement_bailleur_1,
                                                             temp_condition_logement_bailleur)
    except EmptyError:
        temp_condition_logement_bailleur_10 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=391, start_column=11,
                                             end_line=391, end_column=38,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement_bailleur = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                           "condition_logement_bailleur"], temp_condition_logement_bailleur_10)
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_3 = eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=400, start_column=10,
                                             end_line=400, end_column=59,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_1 = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                                   "coefficents_enfants_garde_alternée_pris_en_compte"],
                                                                                  temp_coefficents_enfants_garde_alternee_pris_en_compte_3)
    try:
        temp_nombre_personnes_a_charge_prises_en_compte_1 = eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte
    except EmptyError:
        temp_nombre_personnes_a_charge_prises_en_compte_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=399, start_column=10,
                                             end_line=399, end_column=52,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    nombre_personnes_a_charge_prises_en_compte_1 = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                                                            "nombre_personnes_à_charge_prises_en_compte"],
                                                                           temp_nombre_personnes_a_charge_prises_en_compte_1)
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=584, start_column=5, end_line=586, end_column=36,
                                                 law_headings=["Chapitre Ier : Champ d'application",
                                                               "Titre III : Aide personnalisée au logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie législative",
                                                               "Code de la construction et de l'habitation"]), (condition_logement_bailleur and
                                                                                                                (condition_logement_pret and
                                                                                                                 eligibilite_commune_dot_eligibilite))):
                temp_eligibilite_1 = True
            else:
                temp_eligibilite_1 = dead_value
                raise EmptyError
        except EmptyError:
            temp_eligibilite_1 = False
    except EmptyError:
        temp_eligibilite_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=398, start_column=10,
                                             end_line=398, end_column=21,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_1 = log_variable_definition(["ÉligibilitéAidePersonnaliséeLogement",
                                             "éligibilité"], temp_eligibilite_1)
    return EligibiliteAidePersonnaliseeLogementOut(date_courante_out=date_courante_13,
                                                   eligibilite_out=eligibilite_1,
                                                   nombre_personnes_a_charge_prises_en_compte_out=nombre_personnes_a_charge_prises_en_compte_1,
                                                   coefficents_enfants_garde_alternee_pris_en_compte_out=coefficents_enfants_garde_alternee_pris_en_compte_1)


def eligibilite_allocation_logement(eligibilite_allocation_logement_in: EligibiliteAllocationLogementIn):
    date_courante_14 = eligibilite_allocation_logement_in.date_courante_in
    menage_3 = eligibilite_allocation_logement_in.menage_in
    demandeur_3 = eligibilite_allocation_logement_in.demandeur_in
    beneficie_aide_personnalisee_logement = eligibilite_allocation_logement_in.beneficie_aide_personnalisee_logement_in
    informations_calcul_1 = eligibilite_allocation_logement_in.informations_calcul_in
    try:
        temp_duree_l841_1_3 = duration_of_numbers(5, 0, 0)
    except EmptyError:
        temp_duree_l841_1_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=434, start_column=11,
                                             end_line=434, end_column=25,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    duree_l841_1_3 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                              "durée_l841_1_3"], temp_duree_l841_1_3)
    try:
        temp_prestations_familiales_dot_date_courante = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                                 "prestations_familiales.date_courante"], date_courante_14)
    except EmptyError:
        temp_prestations_familiales_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=46, start_column=10,
                                             end_line=46, end_column=23,
                                             law_headings=["Prologue : prestations familiales"]))
    prestations_familiales_dot_date_courante = temp_prestations_familiales_dot_date_courante
    try:
        temp_prestations_familiales_dot_prestation_courante = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                                       "prestations_familiales.prestation_courante"],
                                                                                      ElementPrestationsFamiliales(ElementPrestationsFamiliales_Code.AllocationsFamiliales,
                                                                                                                   Unit()))
    except EmptyError:
        temp_prestations_familiales_dot_prestation_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=47, start_column=10,
                                             end_line=47, end_column=29,
                                             law_headings=["Prologue : prestations familiales"]))
    prestations_familiales_dot_prestation_courante = temp_prestations_familiales_dot_prestation_courante
    try:
        temp_prestations_familiales_dot_residence = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                             "prestations_familiales.résidence"],
                                                                            Collectivite(Collectivite_Code.Metropole, Unit()))
    except EmptyError:
        temp_prestations_familiales_dot_residence = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/../prestations_familiales/prologue.catala_fr",
                                             start_line=48, start_column=10,
                                             end_line=48, end_column=19,
                                             law_headings=["Prologue : prestations familiales"]))
    prestations_familiales_dot_residence = temp_prestations_familiales_dot_residence
    result_25 = log_end_call(["ÉligibilitéAllocationLogement",
                              "prestations_familiales", "ÉligibilitéPrestationsFamiliales"],
                             log_begin_call(["ÉligibilitéAllocationLogement",
                                             "prestations_familiales", "ÉligibilitéPrestationsFamiliales"],
                                            eligibilite_prestations_familiales,
                                            EligibilitePrestationsFamilialesIn(date_courante_in=prestations_familiales_dot_date_courante,
                                                                               prestation_courante_in=prestations_familiales_dot_prestation_courante,
                                                                               residence_in=prestations_familiales_dot_residence)))
    prestations_familiales_dot_droit_ouvert = result_25.droit_ouvert_out
    prestations_familiales_dot_conditions_hors_age = result_25.conditions_hors_age_out
    prestations_familiales_dot_age_l512_3_2 = result_25.age_l512_3_2_out
    prestations_familiales_dot_regime_outre_mer_l751_1 = result_25.regime_outre_mer_l751_1_out
    try:
        temp_eligibilite_commune_dot_menage_1 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                         "éligibilité_commune.ménage"], menage_3)
    except EmptyError:
        temp_eligibilite_commune_dot_menage_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=312, start_column=10,
                                             end_line=312, end_column=16,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_commune_dot_menage_1 = temp_eligibilite_commune_dot_menage_1
    try:
        temp_eligibilite_commune_dot_demandeur_1 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                            "éligibilité_commune.demandeur"], demandeur_3)
    except EmptyError:
        temp_eligibilite_commune_dot_demandeur_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=313, start_column=10,
                                             end_line=313, end_column=19,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_commune_dot_demandeur_1 = temp_eligibilite_commune_dot_demandeur_1
    try:
        temp_eligibilite_commune_dot_date_courante_1 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                                "éligibilité_commune.date_courante"], date_courante_14)
    except EmptyError:
        temp_eligibilite_commune_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=314, start_column=17,
                                             end_line=314, end_column=30,
                                             law_headings=["Éligibilité aux aides personnelles au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_commune_dot_date_courante_2 = temp_eligibilite_commune_dot_date_courante_1

    def temp_eligibilite_commune_dot_condition_logement_residence_principale_2(_: Unit):
        try:
            match_arg_518 = menage_3.logement.mode_occupation
            if match_arg_518.code == ModeOccupation_Code.Locataire:
                _ = match_arg_518.value
                temp_eligibilite_commune_dot_condition_logement_residence_principale_3 = False
            elif match_arg_518.code == ModeOccupation_Code.ResidentLogementFoyer:
                logement_foyer_2 = match_arg_518.value
                temp_eligibilite_commune_dot_condition_logement_residence_principale_3 = logement_foyer_2.construit_application_loi_1957_12_III
            elif match_arg_518.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_518.value
                temp_eligibilite_commune_dot_condition_logement_residence_principale_3 = False
            elif match_arg_518.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_518.value
                temp_eligibilite_commune_dot_condition_logement_residence_principale_3 = False
            elif match_arg_518.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_518.value
                temp_eligibilite_commune_dot_condition_logement_residence_principale_3 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4828, start_column=9,
                                                 end_line=4828, end_column=68,
                                                 law_headings=["Article R842-14",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                               "Titre IV : Allocations de Logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), temp_eligibilite_commune_dot_condition_logement_residence_principale_3):
                temp_eligibilite_commune_dot_condition_logement_residence_principale_4 = True
            else:
                temp_eligibilite_commune_dot_condition_logement_residence_principale_4 = dead_value
                raise EmptyError
        except EmptyError:
            temp_eligibilite_commune_dot_condition_logement_residence_principale_4 = False
        return log_variable_definition(["ÉligibilitéAllocationLogement",
                                        "éligibilité_commune.condition_logement_résidence_principale"],
                                       temp_eligibilite_commune_dot_condition_logement_residence_principale_4)
    eligibilite_commune_dot_condition_logement_residence_principale_1 = temp_eligibilite_commune_dot_condition_logement_residence_principale_2

    def temp_eligibilite_commune_dot_condition_logement_surface_2(_: Unit):
        try:
            match_arg_519 = menage_3.logement.mode_occupation
            if match_arg_519.code == ModeOccupation_Code.Locataire:
                _ = match_arg_519.value
                temp_eligibilite_commune_dot_condition_logement_surface_3 = False
            elif match_arg_519.code == ModeOccupation_Code.ResidentLogementFoyer:
                logement_foyer_3 = match_arg_519.value
                temp_eligibilite_commune_dot_condition_logement_surface_3 = logement_foyer_3.construit_application_loi_1957_12_III
            elif match_arg_519.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                _ = match_arg_519.value
                temp_eligibilite_commune_dot_condition_logement_surface_3 = False
            elif match_arg_519.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_519.value
                temp_eligibilite_commune_dot_condition_logement_surface_3 = False
            elif match_arg_519.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_519.value
                temp_eligibilite_commune_dot_condition_logement_surface_3 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                 start_line=4829, start_column=9,
                                                 end_line=4829, end_column=55,
                                                 law_headings=["Article R842-14",
                                                               "Section 3 : Logements-foyers",
                                                               "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                               "Titre IV : Allocations de Logement",
                                                               "Livre VIII : Aides personnelles au logement",
                                                               "Partie réglementaire",
                                                               "Code de la construction et de l'habitation"]), temp_eligibilite_commune_dot_condition_logement_surface_3):
                temp_eligibilite_commune_dot_condition_logement_surface_4 = True
            else:
                temp_eligibilite_commune_dot_condition_logement_surface_4 = dead_value
                raise EmptyError
        except EmptyError:
            temp_eligibilite_commune_dot_condition_logement_surface_4 = False
        return log_variable_definition(["ÉligibilitéAllocationLogement",
                                        "éligibilité_commune.condition_logement_surface"],
                                       temp_eligibilite_commune_dot_condition_logement_surface_4)
    eligibilite_commune_dot_condition_logement_surface_1 = temp_eligibilite_commune_dot_condition_logement_surface_2
    result_26 = log_end_call(["ÉligibilitéAllocationLogement",
                              "éligibilité_commune", "ÉligibilitéAidesPersonnelleLogement"],
                             log_begin_call(["ÉligibilitéAllocationLogement",
                                             "éligibilité_commune", "ÉligibilitéAidesPersonnelleLogement"],
                                            eligibilite_aides_personnelle_logement,
                                            EligibiliteAidesPersonnelleLogementIn(menage_in=eligibilite_commune_dot_menage_1,
                                                                                  demandeur_in=eligibilite_commune_dot_demandeur_1,
                                                                                  date_courante_in=eligibilite_commune_dot_date_courante_2,
                                                                                  condition_logement_residence_principale_in=eligibilite_commune_dot_condition_logement_residence_principale_1,
                                                                                  condition_logement_surface_in=eligibilite_commune_dot_condition_logement_surface_1)))
    eligibilite_commune_dot_date_courante_3 = result_26.date_courante_out
    eligibilite_commune_dot_eligibilite_1 = result_26.eligibilite_out
    eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte_1 = result_26.nombre_personnes_a_charge_prises_en_compte_out
    eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte_1 = result_26.coefficents_enfants_garde_alternee_pris_en_compte_out
    eligibilite_commune_dot_condition_2_r823_4_1 = result_26.condition_2_r823_4_out
    try:
        try:
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=1136, start_column=5,
                                                 end_line=1136, end_column=73, law_headings=["Article L841-3",
                                                                                             "Chapitre Ier : Champ d'application",
                                                                                             "Titre IV : Allocations de logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie législative",
                                                                                             "Code de la construction et de l'habitation"]), demandeur_3.personne_hebergee_centre_soin_l_L162_22_3_securite_sociale):
                temp_eligibilite_allocation_logement_sociale = True
            else:
                temp_eligibilite_allocation_logement_sociale = dead_value
                raise EmptyError
        except EmptyError:
            temp_eligibilite_allocation_logement_sociale = False
    except EmptyError:
        temp_eligibilite_allocation_logement_sociale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=433, start_column=11,
                                             end_line=433, end_column=50,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_sociale = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                       "éligibilité_allocation_logement_sociale"],
                                                                      temp_eligibilite_allocation_logement_sociale)
    try:
        try:
            try:
                try:
                    match_arg_520 = informations_calcul_1
                    if match_arg_520.code == InformationsCalculAPL_Code.InfosLocatif:
                        _ = match_arg_520.value
                        temp_condition_logement = False
                    elif match_arg_520.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                        _ = match_arg_520.value
                        temp_condition_logement = False
                    elif match_arg_520.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                        infos_19 = match_arg_520.value
                        match_arg_521 = menage_3.logement.mode_occupation
                        if match_arg_521.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_521.value
                            temp_condition_logement = False
                        elif match_arg_521.code == ModeOccupation_Code.ResidentLogementFoyer:
                            _ = match_arg_521.value
                            temp_condition_logement = False
                        elif match_arg_521.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            proprietaire = match_arg_521.value
                            match_arg_522 = infos_19.type_travaux_logement_r842_5
                            if match_arg_522.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                                _ = match_arg_522.value
                                temp_condition_logement_1 = False
                            elif match_arg_522.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                                _ = match_arg_522.value
                                temp_condition_logement_1 = False
                            elif match_arg_522.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                                _ = match_arg_522.value
                                temp_condition_logement_1 = True
                            elif match_arg_522.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                                _ = match_arg_522.value
                                temp_condition_logement_1 = False
                            match_arg_523 = proprietaire.pret.titulaire_pret
                            if match_arg_523.code == TitulairePret_Code.Demandeur:
                                _ = match_arg_523.value
                                temp_condition_logement_2 = True
                            elif match_arg_523.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                                _ = match_arg_523.value
                                temp_condition_logement_2 = False
                            temp_condition_logement = (temp_condition_logement_2 and
                                                       temp_condition_logement_1)
                        elif match_arg_521.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_521.value
                            temp_condition_logement = False
                        elif match_arg_521.code == ModeOccupation_Code.LocationAccession:
                            _ = match_arg_521.value
                            temp_condition_logement = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=4418, start_column=5,
                                                         end_line=4426, end_column=28,
                                                         law_headings=["Article R842-5",
                                                                       "Section 2 : Accession à la propriété",
                                                                       "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                       "Titre IV : Allocations de Logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement):
                        temp_condition_logement_3 = True
                    else:
                        temp_condition_logement_3 = dead_value
                        raise EmptyError
                except EmptyError:
                    match_arg_524 = informations_calcul_1
                    if match_arg_524.code == InformationsCalculAPL_Code.InfosLocatif:
                        _ = match_arg_524.value
                        temp_condition_logement_4 = False
                    elif match_arg_524.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                        _ = match_arg_524.value
                        temp_condition_logement_4 = False
                    elif match_arg_524.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                        infos_20 = match_arg_524.value
                        match_arg_525 = menage_3.logement.mode_occupation
                        if match_arg_525.code == ModeOccupation_Code.Locataire:
                            _ = match_arg_525.value
                            temp_condition_logement_4 = False
                        elif match_arg_525.code == ModeOccupation_Code.ResidentLogementFoyer:
                            _ = match_arg_525.value
                            temp_condition_logement_4 = False
                        elif match_arg_525.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                            proprietaire_1 = match_arg_525.value
                            match_arg_526 = infos_20.type_travaux_logement_r842_5
                            if match_arg_526.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                                _ = match_arg_526.value
                                temp_condition_logement_5 = False
                            elif match_arg_526.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                                _ = match_arg_526.value
                                temp_condition_logement_5 = True
                            elif match_arg_526.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                                _ = match_arg_526.value
                                temp_condition_logement_5 = False
                            elif match_arg_526.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                                _ = match_arg_526.value
                                temp_condition_logement_5 = False
                            match_arg_527 = proprietaire_1.pret.titulaire_pret
                            if match_arg_527.code == TitulairePret_Code.Demandeur:
                                _ = match_arg_527.value
                                temp_condition_logement_6 = True
                            elif match_arg_527.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                                _ = match_arg_527.value
                                temp_condition_logement_6 = False
                            temp_condition_logement_4 = (temp_condition_logement_6 and
                                                         temp_condition_logement_5)
                        elif match_arg_525.code == ModeOccupation_Code.SousLocataire:
                            _ = match_arg_525.value
                            temp_condition_logement_4 = False
                        elif match_arg_525.code == ModeOccupation_Code.LocationAccession:
                            _ = match_arg_525.value
                            temp_condition_logement_4 = False
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                         start_line=4399, start_column=5,
                                                         end_line=4406, end_column=28,
                                                         law_headings=["Article R842-5",
                                                                       "Section 2 : Accession à la propriété",
                                                                       "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                       "Titre IV : Allocations de Logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie réglementaire",
                                                                       "Code de la construction et de l'habitation"]), temp_condition_logement_4):
                        temp_condition_logement_3 = True
                    else:
                        temp_condition_logement_3 = dead_value
                        raise EmptyError
            except EmptyError:
                match_arg_528 = informations_calcul_1
                if match_arg_528.code == InformationsCalculAPL_Code.InfosLocatif:
                    _ = match_arg_528.value
                    temp_condition_logement_7 = False
                elif match_arg_528.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                    _ = match_arg_528.value
                    temp_condition_logement_7 = False
                elif match_arg_528.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                    infos_21 = match_arg_528.value
                    match_arg_529 = menage_3.logement.mode_occupation
                    if match_arg_529.code == ModeOccupation_Code.Locataire:
                        _ = match_arg_529.value
                        temp_condition_logement_7 = False
                    elif match_arg_529.code == ModeOccupation_Code.ResidentLogementFoyer:
                        _ = match_arg_529.value
                        temp_condition_logement_7 = False
                    elif match_arg_529.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                        proprietaire_2 = match_arg_529.value
                        match_arg_530 = infos_21.type_travaux_logement_r842_5
                        if match_arg_530.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                            _ = match_arg_530.value
                            temp_condition_logement_8 = True
                        elif match_arg_530.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                            _ = match_arg_530.value
                            temp_condition_logement_8 = False
                        elif match_arg_530.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                            _ = match_arg_530.value
                            temp_condition_logement_8 = False
                        elif match_arg_530.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                            _ = match_arg_530.value
                            temp_condition_logement_8 = False
                        match_arg_531 = infos_21.type_travaux_logement_r842_5
                        if match_arg_531.code == TypeTravauxLogementR8425_Code.ObjectifDecenceLogement:
                            _ = match_arg_531.value
                            temp_condition_logement_9 = False
                        elif match_arg_531.code == TypeTravauxLogementR8425_Code.PrevuDansListeR321_15:
                            _ = match_arg_531.value
                            temp_condition_logement_9 = False
                        elif match_arg_531.code == TypeTravauxLogementR8425_Code.AgrandirOuRendreHabitableD331_63:
                            _ = match_arg_531.value
                            temp_condition_logement_9 = False
                        elif match_arg_531.code == TypeTravauxLogementR8425_Code.PasDeTravaux:
                            _ = match_arg_531.value
                            temp_condition_logement_9 = True
                        match_arg_532 = proprietaire_2.pret.titulaire_pret
                        if match_arg_532.code == TitulairePret_Code.Demandeur:
                            _ = match_arg_532.value
                            temp_condition_logement_10 = True
                        elif match_arg_532.code == TitulairePret_Code.VendeurQuandDemandeurAContratLocationAccession:
                            _ = match_arg_532.value
                            temp_condition_logement_10 = False
                        temp_condition_logement_7 = (temp_condition_logement_10 and
                                                     (temp_condition_logement_9 or
                                                      temp_condition_logement_8))
                    elif match_arg_529.code == ModeOccupation_Code.SousLocataire:
                        _ = match_arg_529.value
                        temp_condition_logement_7 = False
                    elif match_arg_529.code == ModeOccupation_Code.LocationAccession:
                        _ = match_arg_529.value
                        temp_condition_logement_7 = False
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                                     start_line=4380, start_column=5,
                                                     end_line=4389, end_column=28,
                                                     law_headings=["Article R842-5",
                                                                   "Section 2 : Accession à la propriété",
                                                                   "Chapitre 2 : Modalités de liquidation et de versement des allocations de logement",
                                                                   "Titre IV : Allocations de Logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie réglementaire",
                                                                   "Code de la construction et de l'habitation"]), temp_condition_logement_7):
                    temp_condition_logement_3 = True
                else:
                    temp_condition_logement_3 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_condition_logement_3 = False
    except EmptyError:
        temp_condition_logement_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=430, start_column=11,
                                             end_line=430, end_column=29,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    condition_logement = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                  "condition_logement"], temp_condition_logement_3)
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_4 = eligibilite_commune_dot_coefficents_enfants_garde_alternee_pris_en_compte_1
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=445, start_column=10,
                                             end_line=445, end_column=59,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_2 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                                   "coefficents_enfants_garde_alternée_pris_en_compte"],
                                                                                  temp_coefficents_enfants_garde_alternee_pris_en_compte_4)
    try:
        temp_nombre_personnes_a_charge_prises_en_compte_2 = eligibilite_commune_dot_nombre_personnes_a_charge_prises_en_compte_1
    except EmptyError:
        temp_nombre_personnes_a_charge_prises_en_compte_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=444, start_column=10,
                                             end_line=444, end_column=52,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    nombre_personnes_a_charge_prises_en_compte_2 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                            "nombre_personnes_à_charge_prises_en_compte"],
                                                                           temp_nombre_personnes_a_charge_prises_en_compte_2)
    try:
        if not eligibilite_commune_dot_eligibilite_1:
            temp_eligibilite_dispositions_communes = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.PasEligible,
                                                                                   Unit())
        else:
            temp_eligibilite_dispositions_communes = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.AllocationLogementSociale,
                                                                                   Unit())
    except EmptyError:
        temp_eligibilite_dispositions_communes = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=441, start_column=10,
                                             end_line=441, end_column=31,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_dispositions_communes = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                 "éligibilité_dispositions_communes"],
                                                                temp_eligibilite_dispositions_communes)
    try:
        try:
            try:
                try:
                    try:
                        try:
                            match_arg_533 = menage_3.situation_familiale
                            if match_arg_533.code == SituationFamiliale_Code.Celibataire:
                                _ = match_arg_533.value
                                temp_eligibilite_allocation_logement_familiale = ((list_length(menage_3.personnes_a_charge) ==
                                                                                   integer_of_string("0")) and
                                                                                  menage_3.enfant_a_naitre_apres_quatrieme_mois_grossesse)
                            elif match_arg_533.code == SituationFamiliale_Code.Maries:
                                _ = match_arg_533.value
                                temp_eligibilite_allocation_logement_familiale = False
                            elif match_arg_533.code == SituationFamiliale_Code.Pacses:
                                _ = match_arg_533.value
                                temp_eligibilite_allocation_logement_familiale = False
                            elif match_arg_533.code == SituationFamiliale_Code.Concubins:
                                _ = match_arg_533.value
                                temp_eligibilite_allocation_logement_familiale = False
                            elif match_arg_533.code == SituationFamiliale_Code.CelibataireSepareDeFait:
                                _ = match_arg_533.value
                                temp_eligibilite_allocation_logement_familiale = False
                            elif match_arg_533.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
                                _ = match_arg_533.value
                                temp_eligibilite_allocation_logement_familiale = False
                            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                                 start_line=1018, start_column=5,
                                                                 end_line=1022, end_column=29,
                                                                 law_headings=["Article L841-1",
                                                                               "Chapitre Ier : Champ d'application",
                                                                               "Titre IV : Allocations de logement",
                                                                               "Livre VIII : Aides personnelles au logement",
                                                                               "Partie législative",
                                                                               "Code de la construction et de l'habitation"]), temp_eligibilite_allocation_logement_familiale):
                                temp_eligibilite_allocation_logement_familiale_1 = True
                            else:
                                temp_eligibilite_allocation_logement_familiale_1 = dead_value
                                raise EmptyError
                        except EmptyError:
                            try:
                                def temp_eligibilite_allocation_logement_familiale_2(acc_8: Integer, personne_a_charge_6: Any):
                                    match_arg_534 = personne_a_charge_6
                                    if match_arg_534.code == PersonneACharge_Code.EnfantACharge:
                                        enfant_5 = match_arg_534.value
                                        temp_eligibilite_allocation_logement_familiale_3 = False
                                    elif match_arg_534.code == PersonneACharge_Code.AutrePersonneACharge:
                                        parent_3 = match_arg_534.value
                                        temp_eligibilite_allocation_logement_familiale_3 = (parent_3.ascendant_descendant_collateral_deuxieme_troisieme_degre and
                                                                                            parent_3.incapacite_80_pourcent_ou_restriction_emploi)
                                    if temp_eligibilite_allocation_logement_familiale_3:
                                        return (acc_8 +
                                                integer_of_string("1"))
                                    else:
                                        return acc_8
                                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                                     start_line=995, start_column=5,
                                                                     end_line=1006, end_column=12,
                                                                     law_headings=["Article L841-1",
                                                                                   "Chapitre Ier : Champ d'application",
                                                                                   "Titre IV : Allocations de logement",
                                                                                   "Livre VIII : Aides personnelles au logement",
                                                                                   "Partie législative",
                                                                                   "Code de la construction et de l'habitation"]), (list_fold_left(
                                                                                       temp_eligibilite_allocation_logement_familiale_2,
                                                                                       integer_of_string(
                                                                                           "0"),
                                                                                       menage_3.personnes_a_charge) >=
                                        integer_of_string("1"))):
                                    temp_eligibilite_allocation_logement_familiale_1 = True
                                else:
                                    temp_eligibilite_allocation_logement_familiale_1 = dead_value
                                    raise EmptyError
                            except EmptyError:
                                def temp_eligibilite_allocation_logement_familiale_4(acc_9: Integer, personne_a_charge_7: Any):
                                    if log_end_call(["ÉligibilitéAidesPersonnelleLogement",
                                                     "condition_2_r823_4"],
                                                    log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                             "condition_2_r823_4", "output"],
                                                                            log_begin_call(["ÉligibilitéAidesPersonnelleLogement",
                                                                                            "condition_2_r823_4"],
                                                                                           eligibilite_commune_dot_condition_2_r823_4_1,
                                                                                           log_variable_definition(["ÉligibilitéAidesPersonnelleLogement",
                                                                                                                    "condition_2_r823_4", "input"],
                                                                                                                   personne_a_charge_7)))):
                                        return (acc_9 +
                                                integer_of_string("1"))
                                    else:
                                        return acc_9
                                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                                     start_line=978, start_column=5,
                                                                     end_line=979, end_column=72,
                                                                     law_headings=["Article L841-1",
                                                                                   "Chapitre Ier : Champ d'application",
                                                                                   "Titre IV : Allocations de logement",
                                                                                   "Livre VIII : Aides personnelles au logement",
                                                                                   "Partie législative",
                                                                                   "Code de la construction et de l'habitation"]), (list_fold_left(
                                                                                       temp_eligibilite_allocation_logement_familiale_4,
                                                                                       integer_of_string(
                                                                                           "0"),
                                                                                       menage_3.personnes_a_charge) >=
                                        integer_of_string("1"))):
                                    temp_eligibilite_allocation_logement_familiale_1 = True
                                else:
                                    temp_eligibilite_allocation_logement_familiale_1 = dead_value
                                    raise EmptyError
                    except EmptyError:
                        match_arg_535 = menage_3.situation_familiale
                        if match_arg_535.code == SituationFamiliale_Code.Celibataire:
                            _ = match_arg_535.value
                            temp_eligibilite_allocation_logement_familiale_5 = False
                        elif match_arg_535.code == SituationFamiliale_Code.Maries:
                            date_mariage = match_arg_535.value
                            temp_eligibilite_allocation_logement_familiale_5 = (date_courante_14 <=
                                                                                (date_mariage + duree_l841_1_3))
                        elif match_arg_535.code == SituationFamiliale_Code.Pacses:
                            _ = match_arg_535.value
                            temp_eligibilite_allocation_logement_familiale_5 = False
                        elif match_arg_535.code == SituationFamiliale_Code.Concubins:
                            _ = match_arg_535.value
                            temp_eligibilite_allocation_logement_familiale_5 = False
                        elif match_arg_535.code == SituationFamiliale_Code.CelibataireSepareDeFait:
                            _ = match_arg_535.value
                            temp_eligibilite_allocation_logement_familiale_5 = False
                        elif match_arg_535.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
                            _ = match_arg_535.value
                            temp_eligibilite_allocation_logement_familiale_5 = False

                        def temp_eligibilite_allocation_logement_familiale_6(acc_10: Integer, personne_a_charge_8: Any):
                            match_arg_536 = personne_a_charge_8
                            if match_arg_536.code == PersonneACharge_Code.EnfantACharge:
                                enfant_6 = match_arg_536.value
                                match_arg_537 = enfant_6.prise_en_charge
                                if match_arg_537.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                    _ = match_arg_537.value
                                    temp_eligibilite_allocation_logement_familiale_7 = PriseEnChargeEnfant(PriseEnChargeEnfant_Code.EffectiveEtPermanente,
                                                                                                           Unit())
                                elif match_arg_537.code == PriseEnCharge_Code.ResidenceAlterneeAllocataireUnique:
                                    _ = match_arg_537.value
                                    temp_eligibilite_allocation_logement_familiale_7 = PriseEnChargeEnfant(PriseEnChargeEnfant_Code.GardeAlterneeAllocataireUnique,
                                                                                                           Unit())
                                elif match_arg_537.code == PriseEnCharge_Code.ResidenceAlterneeAllocationsPartagee:
                                    _ = match_arg_537.value
                                    temp_eligibilite_allocation_logement_familiale_7 = PriseEnChargeEnfant(PriseEnChargeEnfant_Code.GardeAlterneePartageAllocations,
                                                                                                           Unit())
                                temp_eligibilite_allocation_logement_familiale_8 = not log_end_call(["ÉligibilitéPrestationsFamiliales",
                                                                                                     "droit_ouvert"],
                                                                                                    log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                                                                                             "droit_ouvert", "output"],
                                                                                                                            log_begin_call(["ÉligibilitéPrestationsFamiliales",
                                                                                                                                            "droit_ouvert"],
                                                                                                                                           prestations_familiales_dot_droit_ouvert,
                                                                                                                                           log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                                                                                                                                    "droit_ouvert", "input"],
                                                                                                                                                                   EnfantPrestationsFamiliales(identifiant=enfant_6.identifiant,
                                                                                                                                                                                               obligation_scolaire=enfant_6.obligation_scolaire,
                                                                                                                                                                                               remuneration_mensuelle=enfant_6.remuneration_mensuelle,
                                                                                                                                                                                               date_de_naissance=enfant_6.date_de_naissance,
                                                                                                                                                                                               age=enfant_6.age,
                                                                                                                                                                                               prise_en_charge=temp_eligibilite_allocation_logement_familiale_7,
                                                                                                                                                                                               a_deja_ouvert_droit_aux_allocations_familiales=enfant_6.a_deja_ouvert_droit_aux_allocations_familiales,
                                                                                                                                                                                               beneficie_titre_personnel_aide_personnelle_logement=enfant_6.beneficie_titre_personnel_aide_personnelle_logement)))))
                            elif match_arg_536.code == PersonneACharge_Code.AutrePersonneACharge:
                                _ = match_arg_536.value
                                temp_eligibilite_allocation_logement_familiale_8 = False
                            if temp_eligibilite_allocation_logement_familiale_8:
                                return (acc_10 + integer_of_string("1"))
                            else:
                                return acc_10
                        if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                             start_line=937, start_column=5,
                                                             end_line=964, end_column=29,
                                                             law_headings=["Article L841-1",
                                                                           "Chapitre Ier : Champ d'application",
                                                                           "Titre IV : Allocations de logement",
                                                                           "Livre VIII : Aides personnelles au logement",
                                                                           "Partie législative",
                                                                           "Code de la construction et de l'habitation"]), ((list_fold_left(
                                                                               temp_eligibilite_allocation_logement_familiale_6,
                                                                               integer_of_string(
                                                                                   "0"),
                                                                               menage_3.personnes_a_charge) ==
                                                                               integer_of_string("0")) and
                                temp_eligibilite_allocation_logement_familiale_5)):
                            temp_eligibilite_allocation_logement_familiale_1 = True
                        else:
                            temp_eligibilite_allocation_logement_familiale_1 = dead_value
                            raise EmptyError
                except EmptyError:
                    def temp_eligibilite_allocation_logement_familiale_9(acc_11: Integer, personne_a_charge_9: Any):
                        match_arg_538 = personne_a_charge_9
                        if match_arg_538.code == PersonneACharge_Code.EnfantACharge:
                            enfant_7 = match_arg_538.value
                            match_arg_539 = enfant_7.prise_en_charge
                            if match_arg_539.code == PriseEnCharge_Code.EffectiveEtPermanente:
                                _ = match_arg_539.value
                                temp_eligibilite_allocation_logement_familiale_10 = PriseEnChargeEnfant(PriseEnChargeEnfant_Code.EffectiveEtPermanente,
                                                                                                        Unit())
                            elif match_arg_539.code == PriseEnCharge_Code.ResidenceAlterneeAllocataireUnique:
                                _ = match_arg_539.value
                                temp_eligibilite_allocation_logement_familiale_10 = PriseEnChargeEnfant(PriseEnChargeEnfant_Code.GardeAlterneeAllocataireUnique,
                                                                                                        Unit())
                            elif match_arg_539.code == PriseEnCharge_Code.ResidenceAlterneeAllocationsPartagee:
                                _ = match_arg_539.value
                                temp_eligibilite_allocation_logement_familiale_10 = PriseEnChargeEnfant(PriseEnChargeEnfant_Code.GardeAlterneePartageAllocations,
                                                                                                        Unit())
                            temp_eligibilite_allocation_logement_familiale_11 = log_end_call(["ÉligibilitéPrestationsFamiliales",
                                                                                              "droit_ouvert"],
                                                                                             log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                                                                                      "droit_ouvert", "output"],
                                                                                                                     log_begin_call(["ÉligibilitéPrestationsFamiliales",
                                                                                                                                     "droit_ouvert"],
                                                                                                                                    prestations_familiales_dot_droit_ouvert,
                                                                                                                                    log_variable_definition(["ÉligibilitéPrestationsFamiliales",
                                                                                                                                                             "droit_ouvert", "input"],
                                                                                                                                                            EnfantPrestationsFamiliales(identifiant=enfant_7.identifiant,
                                                                                                                                                                                        obligation_scolaire=enfant_7.obligation_scolaire,
                                                                                                                                                                                        remuneration_mensuelle=enfant_7.remuneration_mensuelle,
                                                                                                                                                                                        date_de_naissance=enfant_7.date_de_naissance,
                                                                                                                                                                                        age=enfant_7.age,
                                                                                                                                                                                        prise_en_charge=temp_eligibilite_allocation_logement_familiale_10,
                                                                                                                                                                                        a_deja_ouvert_droit_aux_allocations_familiales=enfant_7.a_deja_ouvert_droit_aux_allocations_familiales,
                                                                                                                                                                                        beneficie_titre_personnel_aide_personnelle_logement=enfant_7.beneficie_titre_personnel_aide_personnelle_logement)))))
                        elif match_arg_538.code == PersonneACharge_Code.AutrePersonneACharge:
                            _ = match_arg_538.value
                            temp_eligibilite_allocation_logement_familiale_11 = False
                        if temp_eligibilite_allocation_logement_familiale_11:
                            return (acc_11 + integer_of_string("1"))
                        else:
                            return acc_11
                    if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                         start_line=902, start_column=5,
                                                         end_line=926, end_column=11,
                                                         law_headings=["Article L841-1",
                                                                       "Chapitre Ier : Champ d'application",
                                                                       "Titre IV : Allocations de logement",
                                                                       "Livre VIII : Aides personnelles au logement",
                                                                       "Partie législative",
                                                                       "Code de la construction et de l'habitation"]), (list_fold_left(
                                                                           temp_eligibilite_allocation_logement_familiale_9,
                                                                           integer_of_string("0"), menage_3.personnes_a_charge) ==
                            integer_of_string("1"))):
                        temp_eligibilite_allocation_logement_familiale_1 = True
                    else:
                        temp_eligibilite_allocation_logement_familiale_1 = dead_value
                        raise EmptyError
            except EmptyError:
                def temp_eligibilite_allocation_logement_familiale_12(acc_12: bool, prestation_1: Any):
                    return (acc_12 or ((prestation_1 ==
                                        PrestationRecue(PrestationRecue_Code.AllocationsFamiliales,
                                                        Unit())) or ((prestation_1 ==
                                                                      PrestationRecue(PrestationRecue_Code.ComplementFamilial,
                                                                                      Unit())) or ((prestation_1 ==
                                                                                                    PrestationRecue(PrestationRecue_Code.AllocationSoutienFamilial,
                                                                                                                    Unit())) or (prestation_1 ==
                                                                                                                                 PrestationRecue(PrestationRecue_Code.AllocationSoutienEnfantHandicape,
                                                                                                                                                 Unit()))))))
                if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                     start_line=883, start_column=5,
                                                     end_line=887, end_column=52,
                                                     law_headings=["Article L841-1",
                                                                   "Chapitre Ier : Champ d'application",
                                                                   "Titre IV : Allocations de logement",
                                                                   "Livre VIII : Aides personnelles au logement",
                                                                   "Partie législative",
                                                                   "Code de la construction et de l'habitation"]), list_fold_left(
                        temp_eligibilite_allocation_logement_familiale_12, False,
                        menage_3.prestations_recues)):
                    temp_eligibilite_allocation_logement_familiale_1 = True
                else:
                    temp_eligibilite_allocation_logement_familiale_1 = dead_value
                    raise EmptyError
        except EmptyError:
            temp_eligibilite_allocation_logement_familiale_1 = False
    except EmptyError:
        temp_eligibilite_allocation_logement_familiale_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=432, start_column=11,
                                             end_line=432, end_column=52,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_familiale = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                         "éligibilité_allocation_logement_familiale"],
                                                                        temp_eligibilite_allocation_logement_familiale_1)
    try:
        try:
            match_arg_540 = menage_3.logement.mode_occupation
            if match_arg_540.code == ModeOccupation_Code.Locataire:
                _ = match_arg_540.value
                temp_eligibilite_l841_2 = False
            elif match_arg_540.code == ModeOccupation_Code.ResidentLogementFoyer:
                _ = match_arg_540.value
                temp_eligibilite_l841_2 = False
            elif match_arg_540.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
                proprietaire_3 = match_arg_540.value
                temp_eligibilite_l841_2 = (proprietaire_3.pret.date_signature >
                                           date_of_numbers(2017, 12, 31))
            elif match_arg_540.code == ModeOccupation_Code.SousLocataire:
                _ = match_arg_540.value
                temp_eligibilite_l841_2 = False
            elif match_arg_540.code == ModeOccupation_Code.LocationAccession:
                _ = match_arg_540.value
                temp_eligibilite_l841_2 = False
            if log_decision_taken(SourcePosition(filename="examples/aides_logement/code_construction_legislatif.catala_fr",
                                                 start_line=1148, start_column=5,
                                                 end_line=1151, end_column=28, law_headings=["Article L841-4",
                                                                                             "Chapitre Ier : Champ d'application",
                                                                                             "Titre IV : Allocations de logement",
                                                                                             "Livre VIII : Aides personnelles au logement",
                                                                                             "Partie législative",
                                                                                             "Code de la construction et de l'habitation"]), temp_eligibilite_l841_2):
                temp_eligibilite_l841_2_1 = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.PasEligible,
                                                                          Unit())
            else:
                temp_eligibilite_l841_2_1 = dead_value
                raise EmptyError
        except EmptyError:
            if ((eligibilite_dispositions_communes ==
                EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.PasEligible,
                                              Unit())) or
                    beneficie_aide_personnalisee_logement):
                temp_eligibilite_l841_2_1 = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.PasEligible,
                                                                          Unit())
            else:
                if eligibilite_allocation_logement_familiale:
                    temp_eligibilite_l841_2_1 = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.AllocationLogementFamiliale,
                                                                              Unit())
                else:
                    if eligibilite_allocation_logement_sociale:
                        temp_eligibilite_l841_2_1 = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.AllocationLogementSociale,
                                                                                  Unit())
                    else:
                        temp_eligibilite_l841_2_1 = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.PasEligible,
                                                                                  Unit())
    except EmptyError:
        temp_eligibilite_l841_2_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=442, start_column=10,
                                             end_line=442, end_column=16,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_l841_2 = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                  "éligibilité_l841_2"], temp_eligibilite_l841_2_1)
    try:
        if not condition_logement:
            temp_eligibilite_avec_condition_logement = EligibiliteAllocationLogement(EligibiliteAllocationLogement_Code.PasEligible,
                                                                                     Unit())
        else:
            temp_eligibilite_avec_condition_logement = eligibilite_l841_2
    except EmptyError:
        temp_eligibilite_avec_condition_logement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=443, start_column=10,
                                             end_line=443, end_column=33,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_avec_condition_logement = log_variable_definition(["ÉligibilitéAllocationLogement",
                                                                   "éligibilité_avec_condition_logement"],
                                                                  temp_eligibilite_avec_condition_logement)
    return EligibiliteAllocationLogementOut(eligibilite_avec_condition_logement_out=eligibilite_avec_condition_logement,
                                            nombre_personnes_a_charge_prises_en_compte_out=nombre_personnes_a_charge_prises_en_compte_2,
                                            coefficents_enfants_garde_alternee_pris_en_compte_out=coefficents_enfants_garde_alternee_pris_en_compte_2)


def calcul_allocation_logement(calcul_allocation_logement_in: CalculAllocationLogementIn):
    mode_occupation_5 = calcul_allocation_logement_in.mode_occupation_in
    informations_calcul_2 = calcul_allocation_logement_in.informations_calcul_in
    ressources_menage_sans_arrondi_1 = calcul_allocation_logement_in.ressources_menage_sans_arrondi_in
    situation_familiale_2 = calcul_allocation_logement_in.situation_familiale_in
    nombre_personnes_a_charge_9 = calcul_allocation_logement_in.nombre_personnes_a_charge_in
    zone_7 = calcul_allocation_logement_in.zone_in
    date_courante_15 = calcul_allocation_logement_in.date_courante_in
    type_aide_3 = calcul_allocation_logement_in.type_aide_in
    try:
        match_arg_541 = mode_occupation_5
        if match_arg_541.code == ModeOccupation_Code.Locataire:
            _ = match_arg_541.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                                                             Unit())
        elif match_arg_541.code == ModeOccupation_Code.ResidentLogementFoyer:
            _ = match_arg_541.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.LogementFoyer,
                                                             Unit())
        elif match_arg_541.code == ModeOccupation_Code.AccessionProprieteLocalUsageExclusifHabitation:
            _ = match_arg_541.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                                                             Unit())
        elif match_arg_541.code == ModeOccupation_Code.SousLocataire:
            _ = match_arg_541.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.Location,
                                                             Unit())
        elif match_arg_541.code == ModeOccupation_Code.LocationAccession:
            _ = match_arg_541.value
            temp_categorie_calcul_apl_1 = CategorieCalculAPL(CategorieCalculAPL_Code.AccessionPropriete,
                                                             Unit())
    except EmptyError:
        temp_categorie_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1018,
                                             start_column=11, end_line=1018,
                                             end_column=31,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    categorie_calcul_apl_1 = log_variable_definition(["CalculAllocationLogement",
                                                      "catégorie_calcul_apl"], temp_categorie_calcul_apl_1)
    try:
        temp_ressources_menage_avec_arrondi_1 = (money_round(((ressources_menage_sans_arrondi_1 +
                                                               money_of_cents_string("4999")) * decimal_of_string("0.01"))) *
                                                 decimal_of_string("100."))
    except EmptyError:
        temp_ressources_menage_avec_arrondi_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1011,
                                             start_column=10, end_line=1011,
                                             end_column=22,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    ressources_menage_avec_arrondi_1 = log_variable_definition(["CalculAllocationLogement",
                                                                "ressources_ménage_avec_arrondi"],
                                                               temp_ressources_menage_avec_arrondi_1)
    try:
        match_arg_542 = situation_familiale_2
        if match_arg_542.code == SituationFamiliale_Code.Celibataire:
            _ = match_arg_542.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                                                                                Unit())
        elif match_arg_542.code == SituationFamiliale_Code.Maries:
            _ = match_arg_542.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                                Unit())
        elif match_arg_542.code == SituationFamiliale_Code.Pacses:
            _ = match_arg_542.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                                Unit())
        elif match_arg_542.code == SituationFamiliale_Code.Concubins:
            _ = match_arg_542.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                                Unit())
        elif match_arg_542.code == SituationFamiliale_Code.CelibataireSepareDeFait:
            _ = match_arg_542.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.PersonneSeule,
                                                                                Unit())
        elif match_arg_542.code == SituationFamiliale_Code.ConcubinageDontSepareDeFait:
            _ = match_arg_542.value
            temp_situation_familiale_calcul_apl_1 = SituationFamilialeCalculAPL(SituationFamilialeCalculAPL_Code.Couple,
                                                                                Unit())
    except EmptyError:
        temp_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1019,
                                             start_column=11, end_line=1019,
                                             end_column=41,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    situation_familiale_calcul_apl_9 = log_variable_definition(["CalculAllocationLogement",
                                                                "situation_familiale_calcul_apl"],
                                                               temp_situation_familiale_calcul_apl_1)
    try:
        temp_accession_propriete_dot_ressources_menage_arrondies_base = log_variable_definition(["CalculAllocationLogement",
                                                                                                 "accession_propriété.ressources_ménage_arrondies_base"],
                                                                                                ressources_menage_avec_arrondi_1)
    except EmptyError:
        temp_accession_propriete_dot_ressources_menage_arrondies_base = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=856, start_column=10,
                                             end_line=856, end_column=37,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_ressources_menage_arrondies_base = temp_accession_propriete_dot_ressources_menage_arrondies_base
    try:
        temp_accession_propriete_dot_nombre_personnes_a_charge_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                            "accession_propriété.nombre_personnes_à_charge"],
                                                                                           nombre_personnes_a_charge_9)
    except EmptyError:
        temp_accession_propriete_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=859, start_column=10,
                                             end_line=859, end_column=35,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_nombre_personnes_a_charge_1 = temp_accession_propriete_dot_nombre_personnes_a_charge_1
    try:
        temp_accession_propriete_dot_situation_familiale_calcul_apl_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                                 "accession_propriété.situation_familiale_calcul_apl"],
                                                                                                situation_familiale_calcul_apl_9)
    except EmptyError:
        temp_accession_propriete_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=860, start_column=10,
                                             end_line=860, end_column=40,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_situation_familiale_calcul_apl_1 = temp_accession_propriete_dot_situation_familiale_calcul_apl_1
    try:
        temp_accession_propriete_dot_zone_1 = log_variable_definition(["CalculAllocationLogement",
                                                                       "accession_propriété.zone"], zone_7)
    except EmptyError:
        temp_accession_propriete_dot_zone_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=861, start_column=10,
                                             end_line=861, end_column=14,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_zone_1 = temp_accession_propriete_dot_zone_1
    try:
        temp_accession_propriete_dot_date_courante_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                "accession_propriété.date_courante"], date_courante_15)
    except EmptyError:
        temp_accession_propriete_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=862, start_column=10,
                                             end_line=862, end_column=23,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_date_courante_1 = temp_accession_propriete_dot_date_courante_1
    try:
        match_arg_543 = informations_calcul_2
        if match_arg_543.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_543.value
            temp_accession_propriete_dot_mensualite_principale_2 = money_of_cents_string(
                "0")
        elif match_arg_543.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_543.value
            temp_accession_propriete_dot_mensualite_principale_2 = money_of_cents_string(
                "0")
        elif match_arg_543.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_22 = match_arg_543.value
            temp_accession_propriete_dot_mensualite_principale_2 = infos_22.mensualite_principale
        temp_accession_propriete_dot_mensualite_principale_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                        "accession_propriété.mensualité_principale"],
                                                                                       temp_accession_propriete_dot_mensualite_principale_2)
    except EmptyError:
        temp_accession_propriete_dot_mensualite_principale_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=863, start_column=10,
                                             end_line=863, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_mensualite_principale_1 = temp_accession_propriete_dot_mensualite_principale_3
    try:
        match_arg_544 = informations_calcul_2
        if match_arg_544.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_544.value
            temp_accession_propriete_dot_situation_r822_11_13_17_2 = False
        elif match_arg_544.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_544.value
            temp_accession_propriete_dot_situation_r822_11_13_17_2 = False
        elif match_arg_544.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_23 = match_arg_544.value
            temp_accession_propriete_dot_situation_r822_11_13_17_2 = infos_23.situation_r822_11_13_17
        temp_accession_propriete_dot_situation_r822_11_13_17_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                          "accession_propriété.situation_r822_11_13_17"],
                                                                                         temp_accession_propriete_dot_situation_r822_11_13_17_2)
    except EmptyError:
        temp_accession_propriete_dot_situation_r822_11_13_17_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=864, start_column=10,
                                             end_line=864, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_situation_r822_11_13_17_1 = temp_accession_propriete_dot_situation_r822_11_13_17_3
    try:
        match_arg_545 = informations_calcul_2
        if match_arg_545.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_545.value
            temp_accession_propriete_dot_date_signature_pret_2 = date_of_numbers(
                2010, 1, 1)
        elif match_arg_545.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_545.value
            temp_accession_propriete_dot_date_signature_pret_2 = date_of_numbers(
                2010, 1, 1)
        elif match_arg_545.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_24 = match_arg_545.value
            temp_accession_propriete_dot_date_signature_pret_2 = infos_24.date_signature_pret
        temp_accession_propriete_dot_date_signature_pret_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                      "accession_propriété.date_signature_prêt"],
                                                                                     temp_accession_propriete_dot_date_signature_pret_2)
    except EmptyError:
        temp_accession_propriete_dot_date_signature_pret_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=865, start_column=10,
                                             end_line=865, end_column=29,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_date_signature_pret_1 = temp_accession_propriete_dot_date_signature_pret_3
    try:
        match_arg_546 = informations_calcul_2
        if match_arg_546.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_546.value
            temp_accession_propriete_dot_type_travaux_logement_2 = TypeTravauxLogementR8425(TypeTravauxLogementR8425_Code.PasDeTravaux,
                                                                                            Unit())
        elif match_arg_546.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_546.value
            temp_accession_propriete_dot_type_travaux_logement_2 = TypeTravauxLogementR8425(TypeTravauxLogementR8425_Code.PasDeTravaux,
                                                                                            Unit())
        elif match_arg_546.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_25 = match_arg_546.value
            temp_accession_propriete_dot_type_travaux_logement_2 = infos_25.type_travaux_logement_r842_5
        temp_accession_propriete_dot_type_travaux_logement_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                        "accession_propriété.type_travaux_logement"],
                                                                                       temp_accession_propriete_dot_type_travaux_logement_2)
    except EmptyError:
        temp_accession_propriete_dot_type_travaux_logement_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=866, start_column=10,
                                             end_line=866, end_column=31,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_type_travaux_logement_1 = temp_accession_propriete_dot_type_travaux_logement_3
    try:
        match_arg_547 = informations_calcul_2
        if match_arg_547.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_547.value
            temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_2 = False
        elif match_arg_547.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_547.value
            temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_2 = False
        elif match_arg_547.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_26 = match_arg_547.value
            temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_2 = infos_26.local_habite_premiere_fois_beneficiaire
        temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                                          "accession_propriété.local_habité_première_fois_bénéficiaire"],
                                                                                                         temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_2)
    except EmptyError:
        temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=867, start_column=10,
                                             end_line=867, end_column=49,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_local_habite_premiere_fois_beneficiaire_1 = temp_accession_propriete_dot_local_habite_premiere_fois_beneficiaire_3
    try:
        match_arg_548 = informations_calcul_2
        if match_arg_548.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_548.value
            temp_accession_propriete_dot_date_entree_logement_2 = date_of_numbers(
                2010, 1, 1)
        elif match_arg_548.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_548.value
            temp_accession_propriete_dot_date_entree_logement_2 = date_of_numbers(
                2010, 1, 1)
        elif match_arg_548.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_27 = match_arg_548.value
            temp_accession_propriete_dot_date_entree_logement_2 = infos_27.date_entree_logement
        temp_accession_propriete_dot_date_entree_logement_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                       "accession_propriété.date_entrée_logement"],
                                                                                      temp_accession_propriete_dot_date_entree_logement_2)
    except EmptyError:
        temp_accession_propriete_dot_date_entree_logement_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=868, start_column=10,
                                             end_line=868, end_column=30,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_date_entree_logement_1 = temp_accession_propriete_dot_date_entree_logement_3
    try:
        match_arg_549 = informations_calcul_2
        if match_arg_549.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_549.value
            temp_accession_propriete_dot_charges_mensuelles_pret = money_of_cents_string(
                "0")
        elif match_arg_549.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_549.value
            temp_accession_propriete_dot_charges_mensuelles_pret = money_of_cents_string(
                "0")
        elif match_arg_549.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_28 = match_arg_549.value
            temp_accession_propriete_dot_charges_mensuelles_pret = infos_28.charges_mensuelles_pret
        temp_accession_propriete_dot_charges_mensuelles_pret_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                          "accession_propriété.charges_mensuelles_prêt"],
                                                                                         temp_accession_propriete_dot_charges_mensuelles_pret)
    except EmptyError:
        temp_accession_propriete_dot_charges_mensuelles_pret_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=869, start_column=10,
                                             end_line=869, end_column=33,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_charges_mensuelles_pret = temp_accession_propriete_dot_charges_mensuelles_pret_1
    try:
        match_arg_550 = informations_calcul_2
        if match_arg_550.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_550.value
            temp_accession_propriete_dot_copropriete_2 = False
        elif match_arg_550.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_550.value
            temp_accession_propriete_dot_copropriete_2 = False
        elif match_arg_550.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            infos_29 = match_arg_550.value
            temp_accession_propriete_dot_copropriete_2 = infos_29.copropriete
        temp_accession_propriete_dot_copropriete_3 = log_variable_definition(["CalculAllocationLogement",
                                                                              "accession_propriété.copropriété"],
                                                                             temp_accession_propriete_dot_copropriete_2)
    except EmptyError:
        temp_accession_propriete_dot_copropriete_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=870, start_column=10,
                                             end_line=870, end_column=21,
                                             law_headings=["Secteur accession à la propriété",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    accession_propriete_dot_copropriete_1 = temp_accession_propriete_dot_copropriete_3
    result_27 = log_end_call(["CalculAllocationLogement",
                              "accession_propriété",
                              "CalculAllocationLogementAccessionPropriété"],
                             log_begin_call(["CalculAllocationLogement", "accession_propriété",
                                             "CalculAllocationLogementAccessionPropriété"],
                                            calcul_allocation_logement_accession_propriete,
                                            CalculAllocationLogementAccessionProprieteIn(ressources_menage_arrondies_base_in=accession_propriete_dot_ressources_menage_arrondies_base,
                                                                                         nombre_personnes_a_charge_in=accession_propriete_dot_nombre_personnes_a_charge_1,
                                                                                         situation_familiale_calcul_apl_in=accession_propriete_dot_situation_familiale_calcul_apl_1,
                                                                                         zone_in=accession_propriete_dot_zone_1,
                                                                                         date_courante_in=accession_propriete_dot_date_courante_1,
                                                                                         mensualite_principale_in=accession_propriete_dot_mensualite_principale_1,
                                                                                         situation_r822_11_13_17_in=accession_propriete_dot_situation_r822_11_13_17_1,
                                                                                         date_signature_pret_in=accession_propriete_dot_date_signature_pret_1,
                                                                                         type_travaux_logement_in=accession_propriete_dot_type_travaux_logement_1,
                                                                                         local_habite_premiere_fois_beneficiaire_in=accession_propriete_dot_local_habite_premiere_fois_beneficiaire_1,
                                                                                         date_entree_logement_in=accession_propriete_dot_date_entree_logement_1,
                                                                                         charges_mensuelles_pret_in=accession_propriete_dot_charges_mensuelles_pret,
                                                                                         copropriete_in=accession_propriete_dot_copropriete_1)))
    accession_propriete_dot_aide_finale_formule_1 = result_27.aide_finale_formule_out
    accession_propriete_dot_traitement_aide_finale_montant_minimal_1 = result_27.traitement_aide_finale_montant_minimal_out
    try:
        match_arg_551 = informations_calcul_2
        if match_arg_551.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_551.value
            temp_logement_foyer_dot_redevance_2 = money_of_cents_string("0")
        elif match_arg_551.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            infos_30 = match_arg_551.value
            temp_logement_foyer_dot_redevance_2 = infos_30.redevance
        elif match_arg_551.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_551.value
            temp_logement_foyer_dot_redevance_2 = money_of_cents_string("0")
        temp_logement_foyer_dot_redevance_3 = log_variable_definition(["CalculAllocationLogement",
                                                                       "logement_foyer.redevance"], temp_logement_foyer_dot_redevance_2)
    except EmptyError:
        temp_logement_foyer_dot_redevance_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=949, start_column=10,
                                             end_line=949, end_column=19,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_redevance_1 = temp_logement_foyer_dot_redevance_3
    try:
        temp_logement_foyer_dot_mode_occupation_1 = log_variable_definition(["CalculAllocationLogement",
                                                                             "logement_foyer.mode_occupation"], mode_occupation_5)
    except EmptyError:
        temp_logement_foyer_dot_mode_occupation_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=950, start_column=10,
                                             end_line=950, end_column=25,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_mode_occupation_1 = temp_logement_foyer_dot_mode_occupation_1
    try:
        temp_logement_foyer_dot_ressources_menage_arrondies_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                         "logement_foyer.ressources_ménage_arrondies"],
                                                                                        ressources_menage_avec_arrondi_1)
    except EmptyError:
        temp_logement_foyer_dot_ressources_menage_arrondies_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=951, start_column=10,
                                             end_line=951, end_column=37,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_ressources_menage_arrondies_1 = temp_logement_foyer_dot_ressources_menage_arrondies_1
    try:
        temp_logement_foyer_dot_nombre_personnes_a_charge_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                       "logement_foyer.nombre_personnes_à_charge"],
                                                                                      nombre_personnes_a_charge_9)
    except EmptyError:
        temp_logement_foyer_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=952, start_column=10,
                                             end_line=952, end_column=35,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_nombre_personnes_a_charge_1 = temp_logement_foyer_dot_nombre_personnes_a_charge_1
    try:
        temp_logement_foyer_dot_situation_familiale_calcul_apl_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                            "logement_foyer.situation_familiale_calcul_apl"],
                                                                                           situation_familiale_calcul_apl_9)
    except EmptyError:
        temp_logement_foyer_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=953, start_column=10,
                                             end_line=953, end_column=40,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_situation_familiale_calcul_apl_1 = temp_logement_foyer_dot_situation_familiale_calcul_apl_1
    try:
        temp_logement_foyer_dot_zone_1 = log_variable_definition(["CalculAllocationLogement",
                                                                  "logement_foyer.zone"], zone_7)
    except EmptyError:
        temp_logement_foyer_dot_zone_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=954, start_column=10,
                                             end_line=954, end_column=14,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_zone_1 = temp_logement_foyer_dot_zone_1
    try:
        temp_logement_foyer_dot_date_courante_1 = log_variable_definition(["CalculAllocationLogement",
                                                                           "logement_foyer.date_courante"], date_courante_15)
    except EmptyError:
        temp_logement_foyer_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=955, start_column=10,
                                             end_line=955, end_column=23,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_date_courante_1 = temp_logement_foyer_dot_date_courante_1
    try:
        match_arg_552 = informations_calcul_2
        if match_arg_552.code == InformationsCalculAPL_Code.InfosLocatif:
            _ = match_arg_552.value
            temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16 = CategorieEquivalenceLoyerAllocationLogementFoyer(CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes,
                                                                                                                           Unit())
        elif match_arg_552.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            infos_31 = match_arg_552.value
            temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16 = infos_31.categorie_equivalence_loyer_d842_16
        elif match_arg_552.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_552.value
            temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16 = CategorieEquivalenceLoyerAllocationLogementFoyer(CategorieEquivalenceLoyerAllocationLogementFoyer_Code.AutresPersonnes,
                                                                                                                           Unit())
        temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                                 "logement_foyer.catégorie_équivalence_loyer_d842_16"],
                                                                                                temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16)
    except EmptyError:
        temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=956, start_column=10,
                                             end_line=956, end_column=45,
                                             law_headings=["Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    logement_foyer_dot_categorie_equivalence_loyer_d842_16 = temp_logement_foyer_dot_categorie_equivalence_loyer_d842_16_1
    result_28 = log_end_call(["CalculAllocationLogement", "logement_foyer",
                              "CalculAllocationLogementFoyer"],
                             log_begin_call(["CalculAllocationLogement", "logement_foyer",
                                             "CalculAllocationLogementFoyer"], calcul_allocation_logement_foyer,
                                            CalculAllocationLogementFoyerIn(redevance_in=logement_foyer_dot_redevance_1,
                                                                            mode_occupation_in=logement_foyer_dot_mode_occupation_1,
                                                                            ressources_menage_arrondies_in=logement_foyer_dot_ressources_menage_arrondies_1,
                                                                            nombre_personnes_a_charge_in=logement_foyer_dot_nombre_personnes_a_charge_1,
                                                                            situation_familiale_calcul_apl_in=logement_foyer_dot_situation_familiale_calcul_apl_1,
                                                                            zone_in=logement_foyer_dot_zone_1,
                                                                            date_courante_in=logement_foyer_dot_date_courante_1,
                                                                            categorie_equivalence_loyer_d842_16_in=logement_foyer_dot_categorie_equivalence_loyer_d842_16)))
    logement_foyer_dot_coefficient_prise_en_charge = result_28.coefficient_prise_en_charge_out
    logement_foyer_dot_equivalence_loyer = result_28.equivalence_loyer_out
    logement_foyer_dot_montant_forfaitaire_charges = result_28.montant_forfaitaire_charges_out
    logement_foyer_dot_loyer_minimal = result_28.loyer_minimal_out
    logement_foyer_dot_aide_finale_formule_1 = result_28.aide_finale_formule_out
    logement_foyer_dot_traitement_aide_finale_montant_minimal_1 = result_28.traitement_aide_finale_montant_minimal_out
    try:
        match_arg_553 = informations_calcul_2
        if match_arg_553.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_32 = match_arg_553.value
            temp_locatif_dot_loyer_principal_2 = infos_32.loyer_principal
        elif match_arg_553.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_553.value
            temp_locatif_dot_loyer_principal_2 = money_of_cents_string("0")
        elif match_arg_553.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_553.value
            temp_locatif_dot_loyer_principal_2 = money_of_cents_string("0")
        temp_locatif_dot_loyer_principal_3 = log_variable_definition(["CalculAllocationLogement",
                                                                      "locatif.loyer_principal"], temp_locatif_dot_loyer_principal_2)
    except EmptyError:
        temp_locatif_dot_loyer_principal_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=791, start_column=10,
                                             end_line=791, end_column=25,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_loyer_principal_1 = temp_locatif_dot_loyer_principal_3
    try:
        temp_locatif_dot_ressources_menage_arrondies_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                  "locatif.ressources_ménage_arrondies"],
                                                                                 ressources_menage_avec_arrondi_1)
    except EmptyError:
        temp_locatif_dot_ressources_menage_arrondies_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=792, start_column=10,
                                             end_line=792, end_column=37,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_ressources_menage_arrondies_1 = temp_locatif_dot_ressources_menage_arrondies_1
    try:
        match_arg_554 = informations_calcul_2
        if match_arg_554.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_33 = match_arg_554.value
            temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_2 = infos_33.beneficiaire_aide_adulte_ou_enfant_handicapes
        elif match_arg_554.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_554.value
            temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_2 = False
        elif match_arg_554.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_554.value
            temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_2 = False
        temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                                    "locatif.bénéficiaire_aide_adulte_ou_enfant_handicapés"],
                                                                                                   temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_2)
    except EmptyError:
        temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=793, start_column=10,
                                             end_line=793, end_column=55,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_1 = temp_locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_3
    try:
        temp_locatif_dot_date_courante_1 = log_variable_definition(["CalculAllocationLogement",
                                                                    "locatif.date_courante"], date_courante_15)
    except EmptyError:
        temp_locatif_dot_date_courante_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=795, start_column=10,
                                             end_line=795, end_column=23,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_date_courante_1 = temp_locatif_dot_date_courante_1
    try:
        temp_locatif_dot_nombre_personnes_a_charge_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                "locatif.nombre_personnes_à_charge"],
                                                                               nombre_personnes_a_charge_9)
    except EmptyError:
        temp_locatif_dot_nombre_personnes_a_charge_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=796, start_column=10,
                                             end_line=796, end_column=35,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_nombre_personnes_a_charge_1 = temp_locatif_dot_nombre_personnes_a_charge_1
    try:
        temp_locatif_dot_situation_familiale_calcul_apl_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                     "locatif.situation_familiale_calcul_apl"],
                                                                                    situation_familiale_calcul_apl_9)
    except EmptyError:
        temp_locatif_dot_situation_familiale_calcul_apl_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=797, start_column=10,
                                             end_line=797, end_column=40,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_situation_familiale_calcul_apl_1 = temp_locatif_dot_situation_familiale_calcul_apl_1
    try:
        temp_locatif_dot_zone_1 = log_variable_definition(["CalculAllocationLogement",
                                                           "locatif.zone"], zone_7)
    except EmptyError:
        temp_locatif_dot_zone_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=798, start_column=10,
                                             end_line=798, end_column=14,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_zone_1 = temp_locatif_dot_zone_1
    try:
        match_arg_555 = informations_calcul_2
        if match_arg_555.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_34 = match_arg_555.value
            temp_locatif_dot_logement_est_chambre_2 = infos_34.logement_est_chambre
        elif match_arg_555.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_555.value
            temp_locatif_dot_logement_est_chambre_2 = False
        elif match_arg_555.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_555.value
            temp_locatif_dot_logement_est_chambre_2 = False
        temp_locatif_dot_logement_est_chambre_3 = log_variable_definition(["CalculAllocationLogement",
                                                                           "locatif.logement_est_chambre"],
                                                                          temp_locatif_dot_logement_est_chambre_2)
    except EmptyError:
        temp_locatif_dot_logement_est_chambre_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=799, start_column=10,
                                             end_line=799, end_column=30,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_logement_est_chambre_1 = temp_locatif_dot_logement_est_chambre_3
    try:
        match_arg_556 = informations_calcul_2
        if match_arg_556.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_35 = match_arg_556.value
            temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_2 = infos_35.agees_ou_handicap_adultes_hebergees_onereux_particuliers
        elif match_arg_556.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_556.value
            temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_2 = False
        elif match_arg_556.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_556.value
            temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_2 = False
        temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                                               "locatif.âgées_ou_handicap_adultes_hébergées_onéreux_particuliers"],
                                                                                                              temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_2)
    except EmptyError:
        temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=800, start_column=10,
                                             end_line=800, end_column=66,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_1 = temp_locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_3
    try:
        temp_locatif_dot_type_aide_1 = log_variable_definition(["CalculAllocationLogement",
                                                                "locatif.type_aide"], type_aide_3)
    except EmptyError:
        temp_locatif_dot_type_aide_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=802, start_column=10,
                                             end_line=802, end_column=19,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_type_aide_1 = temp_locatif_dot_type_aide_1
    try:
        match_arg_557 = informations_calcul_2
        if match_arg_557.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_36 = match_arg_557.value
            temp_locatif_dot_colocation_2 = infos_36.colocation
        elif match_arg_557.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_557.value
            temp_locatif_dot_colocation_2 = False
        elif match_arg_557.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_557.value
            temp_locatif_dot_colocation_2 = False
        temp_locatif_dot_colocation_3 = log_variable_definition(["CalculAllocationLogement",
                                                                 "locatif.colocation"], temp_locatif_dot_colocation_2)
    except EmptyError:
        temp_locatif_dot_colocation_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=803, start_column=10,
                                             end_line=803, end_column=20,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_colocation_1 = temp_locatif_dot_colocation_3
    try:
        match_arg_558 = informations_calcul_2
        if match_arg_558.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_37 = match_arg_558.value
            temp_locatif_dot_reduction_loyer_solidarite_2 = infos_37.reduction_loyer_solidarite
        elif match_arg_558.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_558.value
            temp_locatif_dot_reduction_loyer_solidarite_2 = money_of_cents_string(
                "0")
        elif match_arg_558.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_558.value
            temp_locatif_dot_reduction_loyer_solidarite_2 = money_of_cents_string(
                "0")
        temp_locatif_dot_reduction_loyer_solidarite_3 = log_variable_definition(["CalculAllocationLogement",
                                                                                 "locatif.réduction_loyer_solidarité"],
                                                                                temp_locatif_dot_reduction_loyer_solidarite_2)
    except EmptyError:
        temp_locatif_dot_reduction_loyer_solidarite_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=804, start_column=10,
                                             end_line=804, end_column=36,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_reduction_loyer_solidarite_1 = temp_locatif_dot_reduction_loyer_solidarite_3
    try:
        match_arg_559 = informations_calcul_2
        if match_arg_559.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_38 = match_arg_559.value
            temp_locatif_dot_logement_meuble_d842_2 = infos_38.logement_meuble_d842_2
        elif match_arg_559.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_559.value
            temp_locatif_dot_logement_meuble_d842_2 = False
        elif match_arg_559.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_559.value
            temp_locatif_dot_logement_meuble_d842_2 = False
        temp_locatif_dot_logement_meuble_d842_2_1 = log_variable_definition(["CalculAllocationLogement",
                                                                             "locatif.logement_meublé_d842_2"],
                                                                            temp_locatif_dot_logement_meuble_d842_2)
    except EmptyError:
        temp_locatif_dot_logement_meuble_d842_2_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=807, start_column=10,
                                             end_line=807, end_column=32,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_logement_meuble_d842_2 = temp_locatif_dot_logement_meuble_d842_2_1
    try:
        match_arg_560 = informations_calcul_2
        if match_arg_560.code == InformationsCalculAPL_Code.InfosLocatif:
            infos_39 = match_arg_560.value
            temp_locatif_dot_changement_logement_d842_4 = infos_39.changement_logement_d842_4
        elif match_arg_560.code == InformationsCalculAPL_Code.InfosLogementFoyer:
            _ = match_arg_560.value
            temp_locatif_dot_changement_logement_d842_4 = ChangementLogementD8424(ChangementLogementD8424_Code.PasDeChangement,
                                                                                  Unit())
        elif match_arg_560.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
            _ = match_arg_560.value
            temp_locatif_dot_changement_logement_d842_4 = ChangementLogementD8424(ChangementLogementD8424_Code.PasDeChangement,
                                                                                  Unit())
        temp_locatif_dot_changement_logement_d842_4_1 = log_variable_definition(["CalculAllocationLogement",
                                                                                 "locatif.changement_logement_d842_4"],
                                                                                temp_locatif_dot_changement_logement_d842_4)
    except EmptyError:
        temp_locatif_dot_changement_logement_d842_4_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=808, start_column=10,
                                             end_line=808, end_column=36,
                                             law_headings=["Secteur locatif",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    locatif_dot_changement_logement_d842_4 = temp_locatif_dot_changement_logement_d842_4_1
    result_29 = log_end_call(["CalculAllocationLogement", "locatif",
                              "CalculAllocationLogementLocatif"],
                             log_begin_call(["CalculAllocationLogement", "locatif",
                                             "CalculAllocationLogementLocatif"],
                                            calcul_allocation_logement_locatif,
                                            CalculAllocationLogementLocatifIn(loyer_principal_in=locatif_dot_loyer_principal_1,
                                                                              ressources_menage_arrondies_in=locatif_dot_ressources_menage_arrondies_1,
                                                                              beneficiaire_aide_adulte_ou_enfant_handicapes_in=locatif_dot_beneficiaire_aide_adulte_ou_enfant_handicapes_1,
                                                                              date_courante_in=locatif_dot_date_courante_1,
                                                                              nombre_personnes_a_charge_in=locatif_dot_nombre_personnes_a_charge_1,
                                                                              situation_familiale_calcul_apl_in=locatif_dot_situation_familiale_calcul_apl_1,
                                                                              zone_in=locatif_dot_zone_1,
                                                                              logement_est_chambre_in=locatif_dot_logement_est_chambre_1,
                                                                              agees_ou_handicap_adultes_hebergees_onereux_particuliers_in=locatif_dot_agees_ou_handicap_adultes_hebergees_onereux_particuliers_1,
                                                                              type_aide_in=locatif_dot_type_aide_1,
                                                                              colocation_in=locatif_dot_colocation_1,
                                                                              reduction_loyer_solidarite_in=locatif_dot_reduction_loyer_solidarite_1,
                                                                              logement_meuble_d842_2_in=locatif_dot_logement_meuble_d842_2,
                                                                              changement_logement_d842_4_in=locatif_dot_changement_logement_d842_4)))
    locatif_dot_aide_finale_formule_1 = result_29.aide_finale_formule_out
    locatif_dot_traitement_aide_finale = result_29.traitement_aide_finale_out
    try:
        def temp_traitement_aide_finale_3(param_43: Money):
            try:
                match_arg_561 = categorie_calcul_apl_1
                if match_arg_561.code == CategorieCalculAPL_Code.Location:
                    _ = match_arg_561.value
                    return log_end_call(["CalculAllocationLogementLocatif",
                                         "traitement_aide_finale"],
                                        log_variable_definition(["CalculAllocationLogementLocatif",
                                                                 "traitement_aide_finale", "output"],
                                                                log_begin_call(["CalculAllocationLogementLocatif",
                                                                                "traitement_aide_finale"],
                                                                               locatif_dot_traitement_aide_finale,
                                                                               log_variable_definition(["CalculAllocationLogementLocatif",
                                                                                                        "traitement_aide_finale", "input"], param_43))))
                elif match_arg_561.code == CategorieCalculAPL_Code.AccessionPropriete:
                    _ = match_arg_561.value
                    return log_end_call(["CalculAllocationLogementAccessionPropriété",
                                         "traitement_aide_finale_montant_minimal"],
                                        log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                 "traitement_aide_finale_montant_minimal", "output"],
                                                                log_begin_call(["CalculAllocationLogementAccessionPropriété",
                                                                                "traitement_aide_finale_montant_minimal"],
                                                                               accession_propriete_dot_traitement_aide_finale_montant_minimal_1,
                                                                               log_variable_definition(["CalculAllocationLogementAccessionPropriété",
                                                                                                        "traitement_aide_finale_montant_minimal", "input"],
                                                                                                       param_43))))
                elif match_arg_561.code == CategorieCalculAPL_Code.LogementFoyer:
                    _ = match_arg_561.value
                    return log_end_call(["CalculAllocationLogementFoyer",
                                         "traitement_aide_finale_montant_minimal"],
                                        log_variable_definition(["CalculAllocationLogementFoyer",
                                                                 "traitement_aide_finale_montant_minimal", "output"],
                                                                log_begin_call(["CalculAllocationLogementFoyer",
                                                                                "traitement_aide_finale_montant_minimal"],
                                                                               logement_foyer_dot_traitement_aide_finale_montant_minimal_1,
                                                                               log_variable_definition(["CalculAllocationLogementFoyer",
                                                                                                        "traitement_aide_finale_montant_minimal", "input"],
                                                                                                       param_43))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=1027,
                                                     start_column=10,
                                                     end_line=1027,
                                                     end_column=32,
                                                     law_headings=["Tous secteurs",
                                                                   "Secteur logement-foyer",
                                                                   "Calcul du montant de l'allocation logement",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1027,
                                             start_column=10, end_line=1027,
                                             end_column=32,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_2 = log_variable_definition(["CalculAllocationLogement",
                                                        "traitement_aide_finale"], temp_traitement_aide_finale_3)
    try:
        match_arg_562 = categorie_calcul_apl_1
        if match_arg_562.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_562.value
            temp_aide_finale_formule_8 = locatif_dot_aide_finale_formule_1
        elif match_arg_562.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_562.value
            temp_aide_finale_formule_8 = accession_propriete_dot_aide_finale_formule_1
        elif match_arg_562.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_562.value
            temp_aide_finale_formule_8 = logement_foyer_dot_aide_finale_formule_1
    except EmptyError:
        temp_aide_finale_formule_8 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1026,
                                             start_column=10, end_line=1026,
                                             end_column=29,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_7 = log_variable_definition(["CalculAllocationLogement",
                                                     "aide_finale_formule"], temp_aide_finale_formule_8)
    try:
        match_arg_563 = categorie_calcul_apl_1
        if match_arg_563.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_563.value
            temp___13 = False
        elif match_arg_563.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_563.value
            temp___13 = True
        elif match_arg_563.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_563.value
            temp___13 = False
        if temp___13:
            match_arg_564 = informations_calcul_2
            if match_arg_564.code == InformationsCalculAPL_Code.InfosLocatif:
                _ = match_arg_564.value
                temp___14 = False
            elif match_arg_564.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                _ = match_arg_564.value
                temp___14 = False
            elif match_arg_564.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                _ = match_arg_564.value
                temp___14 = True
        else:
            temp___14 = True
    except EmptyError:
        temp___14 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1603, start_column=5,
                                             end_line=1605, end_column=15,
                                             law_headings=["Article D823-9",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___14
    try:
        match_arg_565 = categorie_calcul_apl_1
        if match_arg_565.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_565.value
            temp___15 = False
        elif match_arg_565.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_565.value
            temp___15 = False
        elif match_arg_565.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_565.value
            temp___15 = True
        if temp___15:
            match_arg_566 = informations_calcul_2
            if match_arg_566.code == InformationsCalculAPL_Code.InfosLocatif:
                _ = match_arg_566.value
                temp___16 = False
            elif match_arg_566.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                _ = match_arg_566.value
                temp___16 = True
            elif match_arg_566.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                _ = match_arg_566.value
                temp___16 = False
        else:
            temp___16 = True
    except EmptyError:
        temp___16 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1599, start_column=5,
                                             end_line=1601, end_column=15,
                                             law_headings=["Article D823-9",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___16
    try:
        match_arg_567 = categorie_calcul_apl_1
        if match_arg_567.code == CategorieCalculAPL_Code.Location:
            _ = match_arg_567.value
            temp___17 = True
        elif match_arg_567.code == CategorieCalculAPL_Code.AccessionPropriete:
            _ = match_arg_567.value
            temp___17 = False
        elif match_arg_567.code == CategorieCalculAPL_Code.LogementFoyer:
            _ = match_arg_567.value
            temp___17 = False
        if temp___17:
            match_arg_568 = informations_calcul_2
            if match_arg_568.code == InformationsCalculAPL_Code.InfosLocatif:
                _ = match_arg_568.value
                temp___18 = True
            elif match_arg_568.code == InformationsCalculAPL_Code.InfosLogementFoyer:
                _ = match_arg_568.value
                temp___18 = False
            elif match_arg_568.code == InformationsCalculAPL_Code.InfosAccessionPropriete:
                _ = match_arg_568.value
                temp___18 = False
        else:
            temp___18 = True
    except EmptyError:
        temp___18 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/code_construction_reglementaire.catala_fr",
                                             start_line=1595, start_column=5,
                                             end_line=1597, end_column=15,
                                             law_headings=["Article D823-9",
                                                           "Section 1 : Calcul, liquidation et versement des aides",
                                                           "Chapitre III : Modalités de liquidation et de versement",
                                                           "Titre II : Dispositions communes aux aides personnelles au logement",
                                                           "Livre VIII : Aides personnelles au logement",
                                                           "Partie réglementaire",
                                                           "Code de la construction et de l'habitation"]))
    assert temp___18
    return CalculAllocationLogementOut(aide_finale_formule_out=aide_finale_formule_7,
                                       traitement_aide_finale_out=traitement_aide_finale_2)


def calculette_aides_au_logement(calculette_aides_au_logement_in: CalculetteAidesAuLogementIn):
    menage_4 = calculette_aides_au_logement_in.menage_in
    demandeur_4 = calculette_aides_au_logement_in.demandeur_in
    informations_calcul_3 = calculette_aides_au_logement_in.informations_calcul_in
    date_courante_16 = calculette_aides_au_logement_in.date_courante_in
    ressources_menage_prises_en_compte = calculette_aides_au_logement_in.ressources_menage_prises_en_compte_in
    try:
        temp_eligibilite_allocation_logement_dot_date_courante = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                          "éligibilité_allocation_logement.date_courante"],
                                                                                         date_courante_16)
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=424, start_column=10,
                                             end_line=424, end_column=23,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_date_courante = temp_eligibilite_allocation_logement_dot_date_courante
    try:
        temp_eligibilite_allocation_logement_dot_menage = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                   "éligibilité_allocation_logement.ménage"], menage_4)
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=425, start_column=10,
                                             end_line=425, end_column=16,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_menage = temp_eligibilite_allocation_logement_dot_menage
    try:
        temp_eligibilite_allocation_logement_dot_demandeur = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                      "éligibilité_allocation_logement.demandeur"], demandeur_4)
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=426, start_column=10,
                                             end_line=426, end_column=19,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_demandeur = temp_eligibilite_allocation_logement_dot_demandeur
    try:
        temp_eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                                  "éligibilité_allocation_logement.bénéficie_aide_personnalisée_logement"],
                                                                                                                 False)
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=427, start_column=10,
                                             end_line=427, end_column=47,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement = temp_eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement
    try:
        temp_eligibilite_allocation_logement_dot_informations_calcul = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                "éligibilité_allocation_logement.informations_calcul"],
                                                                                               informations_calcul_3)
    except EmptyError:
        temp_eligibilite_allocation_logement_dot_informations_calcul = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=428, start_column=10,
                                             end_line=428, end_column=29,
                                             law_headings=["Éligibilité aux allocations de logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_allocation_logement_dot_informations_calcul = temp_eligibilite_allocation_logement_dot_informations_calcul
    result_30 = log_end_call(["CalculetteAidesAuLogement",
                              "éligibilité_allocation_logement",
                              "ÉligibilitéAllocationLogement"],
                             log_begin_call(["CalculetteAidesAuLogement",
                                             "éligibilité_allocation_logement",
                                             "ÉligibilitéAllocationLogement"], eligibilite_allocation_logement,
                                            EligibiliteAllocationLogementIn(date_courante_in=eligibilite_allocation_logement_dot_date_courante,
                                                                            menage_in=eligibilite_allocation_logement_dot_menage,
                                                                            demandeur_in=eligibilite_allocation_logement_dot_demandeur,
                                                                            beneficie_aide_personnalisee_logement_in=eligibilite_allocation_logement_dot_beneficie_aide_personnalisee_logement,
                                                                            informations_calcul_in=eligibilite_allocation_logement_dot_informations_calcul)))
    eligibilite_allocation_logement_dot_eligibilite_avec_condition_logement = result_30.eligibilite_avec_condition_logement_out
    eligibilite_allocation_logement_dot_nombre_personnes_a_charge_prises_en_compte = result_30.nombre_personnes_a_charge_prises_en_compte_out
    eligibilite_allocation_logement_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_30.coefficents_enfants_garde_alternee_pris_en_compte_out
    try:
        temp_eligibilite_aide_personnalisee_logement_dot_menage = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                           "éligibilité_aide_personnalisée_logement.ménage"], menage_4)
    except EmptyError:
        temp_eligibilite_aide_personnalisee_logement_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=387, start_column=10,
                                             end_line=387, end_column=16,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_aide_personnalisee_logement_dot_menage = temp_eligibilite_aide_personnalisee_logement_dot_menage
    try:
        temp_eligibilite_aide_personnalisee_logement_dot_demandeur = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                              "éligibilité_aide_personnalisée_logement.demandeur"],
                                                                                             demandeur_4)
    except EmptyError:
        temp_eligibilite_aide_personnalisee_logement_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=388, start_column=10,
                                             end_line=388, end_column=19,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_aide_personnalisee_logement_dot_demandeur = temp_eligibilite_aide_personnalisee_logement_dot_demandeur
    try:
        temp_eligibilite_aide_personnalisee_logement_dot_date_courante = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                  "éligibilité_aide_personnalisée_logement.date_courante"],
                                                                                                 date_courante_16)
    except EmptyError:
        temp_eligibilite_aide_personnalisee_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=389, start_column=17,
                                             end_line=389, end_column=30,
                                             law_headings=["Éligibilité à l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    eligibilite_aide_personnalisee_logement_dot_date_courante = temp_eligibilite_aide_personnalisee_logement_dot_date_courante
    result_31 = log_end_call(["CalculetteAidesAuLogement",
                              "éligibilité_aide_personnalisée_logement",
                              "ÉligibilitéAidePersonnaliséeLogement"],
                             log_begin_call(["CalculetteAidesAuLogement",
                                             "éligibilité_aide_personnalisée_logement",
                                             "ÉligibilitéAidePersonnaliséeLogement"],
                                            eligibilite_aide_personnalisee_logement,
                                            EligibiliteAidePersonnaliseeLogementIn(menage_in=eligibilite_aide_personnalisee_logement_dot_menage,
                                                                                   demandeur_in=eligibilite_aide_personnalisee_logement_dot_demandeur,
                                                                                   date_courante_in=eligibilite_aide_personnalisee_logement_dot_date_courante)))
    eligibilite_aide_personnalisee_logement_dot_date_courante_1 = result_31.date_courante_out
    eligibilite_aide_personnalisee_logement_dot_eligibilite = result_31.eligibilite_out
    eligibilite_aide_personnalisee_logement_dot_nombre_personnes_a_charge_prises_en_compte = result_31.nombre_personnes_a_charge_prises_en_compte_out
    eligibilite_aide_personnalisee_logement_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_31.coefficents_enfants_garde_alternee_pris_en_compte_out
    try:
        temp_calcul_allocation_logement_dot_mode_occupation = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                       "calcul_allocation_logement.mode_occupation"],
                                                                                      menage_4.logement.mode_occupation)
    except EmptyError:
        temp_calcul_allocation_logement_dot_mode_occupation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1007,
                                             start_column=10, end_line=1007,
                                             end_column=25,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_mode_occupation = temp_calcul_allocation_logement_dot_mode_occupation
    try:
        try:
            temp_calcul_allocation_logement_dot_informations_calcul = informations_calcul_3
        except EmptyError:
            temp_calcul_allocation_logement_dot_informations_calcul = informations_calcul_3
        temp_calcul_allocation_logement_dot_informations_calcul_1 = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                             "calcul_allocation_logement.informations_calcul"],
                                                                                            temp_calcul_allocation_logement_dot_informations_calcul)
    except EmptyError:
        temp_calcul_allocation_logement_dot_informations_calcul_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1008,
                                             start_column=10, end_line=1008,
                                             end_column=29,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_informations_calcul = temp_calcul_allocation_logement_dot_informations_calcul_1
    try:
        temp_calcul_allocation_logement_dot_ressources_menage_sans_arrondi = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                      "calcul_allocation_logement.ressources_ménage_sans_arrondi"],
                                                                                                     ressources_menage_prises_en_compte)
    except EmptyError:
        temp_calcul_allocation_logement_dot_ressources_menage_sans_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1009,
                                             start_column=10, end_line=1009,
                                             end_column=27,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_ressources_menage_sans_arrondi = temp_calcul_allocation_logement_dot_ressources_menage_sans_arrondi
    try:
        temp_calcul_allocation_logement_dot_situation_familiale = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                           "calcul_allocation_logement.situation_familiale"],
                                                                                          menage_4.situation_familiale)
    except EmptyError:
        temp_calcul_allocation_logement_dot_situation_familiale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1012,
                                             start_column=10, end_line=1012,
                                             end_column=29,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_situation_familiale = temp_calcul_allocation_logement_dot_situation_familiale
    try:
        temp_calcul_allocation_logement_dot_nombre_personnes_a_charge = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                 "calcul_allocation_logement.nombre_personnes_à_charge"],
                                                                                                eligibilite_allocation_logement_dot_nombre_personnes_a_charge_prises_en_compte)
    except EmptyError:
        temp_calcul_allocation_logement_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1013,
                                             start_column=10, end_line=1013,
                                             end_column=35,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_nombre_personnes_a_charge = temp_calcul_allocation_logement_dot_nombre_personnes_a_charge
    try:
        temp_calcul_allocation_logement_dot_zone = log_variable_definition(["CalculetteAidesAuLogement",
                                                                            "calcul_allocation_logement.zone"], menage_4.logement.zone)
    except EmptyError:
        temp_calcul_allocation_logement_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1014,
                                             start_column=10, end_line=1014,
                                             end_column=14,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_zone = temp_calcul_allocation_logement_dot_zone
    try:
        temp_calcul_allocation_logement_dot_date_courante = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                     "calcul_allocation_logement.date_courante"], date_courante_16)
    except EmptyError:
        temp_calcul_allocation_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1015,
                                             start_column=10, end_line=1015,
                                             end_column=23,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_date_courante = temp_calcul_allocation_logement_dot_date_courante
    try:
        match_arg_569 = eligibilite_allocation_logement_dot_eligibilite_avec_condition_logement
        if match_arg_569.code == EligibiliteAllocationLogement_Code.PasEligible:
            _ = match_arg_569.value
            temp_calcul_allocation_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AllocationLogementSociale,
                                                                                         Unit())
        elif match_arg_569.code == EligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
            _ = match_arg_569.value
            temp_calcul_allocation_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AllocationLogementFamiliale,
                                                                                         Unit())
        elif match_arg_569.code == EligibiliteAllocationLogement_Code.AllocationLogementSociale:
            _ = match_arg_569.value
            temp_calcul_allocation_logement_dot_type_aide = TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AllocationLogementSociale,
                                                                                         Unit())
        temp_calcul_allocation_logement_dot_type_aide_1 = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                   "calcul_allocation_logement.type_aide"],
                                                                                  temp_calcul_allocation_logement_dot_type_aide)
    except EmptyError:
        temp_calcul_allocation_logement_dot_type_aide_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1016,
                                             start_column=10, end_line=1016,
                                             end_column=19,
                                             law_headings=["Tous secteurs",
                                                           "Secteur logement-foyer",
                                                           "Calcul du montant de l'allocation logement",
                                                           "Prologue : aides au logement"]))
    calcul_allocation_logement_dot_type_aide = temp_calcul_allocation_logement_dot_type_aide_1
    result_32 = log_end_call(["CalculetteAidesAuLogement",
                              "calcul_allocation_logement", "CalculAllocationLogement"],
                             log_begin_call(["CalculetteAidesAuLogement",
                                             "calcul_allocation_logement", "CalculAllocationLogement"],
                                            calcul_allocation_logement,
                                            CalculAllocationLogementIn(mode_occupation_in=calcul_allocation_logement_dot_mode_occupation,
                                                                       informations_calcul_in=calcul_allocation_logement_dot_informations_calcul,
                                                                       ressources_menage_sans_arrondi_in=calcul_allocation_logement_dot_ressources_menage_sans_arrondi,
                                                                       situation_familiale_in=calcul_allocation_logement_dot_situation_familiale,
                                                                       nombre_personnes_a_charge_in=calcul_allocation_logement_dot_nombre_personnes_a_charge,
                                                                       zone_in=calcul_allocation_logement_dot_zone,
                                                                       date_courante_in=calcul_allocation_logement_dot_date_courante,
                                                                       type_aide_in=calcul_allocation_logement_dot_type_aide)))
    calcul_allocation_logement_dot_aide_finale_formule = result_32.aide_finale_formule_out
    calcul_allocation_logement_dot_traitement_aide_finale = result_32.traitement_aide_finale_out
    try:
        temp_calcul_aide_personnalisee_logement_dot_mode_occupation = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                               "calcul_aide_personnalisée_logement.mode_occupation"],
                                                                                              menage_4.logement.mode_occupation)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_mode_occupation = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=752, start_column=10,
                                             end_line=752, end_column=25,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_mode_occupation = temp_calcul_aide_personnalisee_logement_dot_mode_occupation
    try:
        temp_calcul_aide_personnalisee_logement_dot_type_aide = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                         "calcul_aide_personnalisée_logement.type_aide"],
                                                                                        TypeAidesPersonnelleLogement(TypeAidesPersonnelleLogement_Code.AidePersonnaliseeLogement,
                                                                                                                     Unit()))
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_type_aide = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=753, start_column=10,
                                             end_line=753, end_column=19,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_type_aide = temp_calcul_aide_personnalisee_logement_dot_type_aide
    try:
        try:
            temp_calcul_aide_personnalisee_logement_dot_informations_calcul = informations_calcul_3
        except EmptyError:
            temp_calcul_aide_personnalisee_logement_dot_informations_calcul = informations_calcul_3
        temp_calcul_aide_personnalisee_logement_dot_informations_calcul_1 = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                     "calcul_aide_personnalisée_logement.informations_calcul"],
                                                                                                    temp_calcul_aide_personnalisee_logement_dot_informations_calcul)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_informations_calcul_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=754, start_column=10,
                                             end_line=754, end_column=29,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_informations_calcul = temp_calcul_aide_personnalisee_logement_dot_informations_calcul_1
    try:
        temp_calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                              "calcul_aide_personnalisée_logement.ressources_ménage_sans_arrondi"],
                                                                                                             ressources_menage_prises_en_compte)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=755, start_column=10,
                                             end_line=755, end_column=27,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi = temp_calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi
    try:
        temp_calcul_aide_personnalisee_logement_dot_situation_familiale = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                   "calcul_aide_personnalisée_logement.situation_familiale"],
                                                                                                  menage_4.situation_familiale)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_situation_familiale = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=758, start_column=10,
                                             end_line=758, end_column=29,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_situation_familiale = temp_calcul_aide_personnalisee_logement_dot_situation_familiale
    try:
        temp_calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                         "calcul_aide_personnalisée_logement.nombre_personnes_à_charge"],
                                                                                                        eligibilite_aide_personnalisee_logement_dot_nombre_personnes_a_charge_prises_en_compte)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=759, start_column=10,
                                             end_line=759, end_column=35,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge = temp_calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge
    try:
        temp_calcul_aide_personnalisee_logement_dot_zone = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                    "calcul_aide_personnalisée_logement.zone"],
                                                                                   menage_4.logement.zone)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_zone = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=760, start_column=10,
                                             end_line=760, end_column=14,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_zone = temp_calcul_aide_personnalisee_logement_dot_zone
    try:
        temp_calcul_aide_personnalisee_logement_dot_date_courante = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                             "calcul_aide_personnalisée_logement.date_courante"],
                                                                                            date_courante_16)
    except EmptyError:
        temp_calcul_aide_personnalisee_logement_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=761, start_column=10,
                                             end_line=761, end_column=23,
                                             law_headings=["Tous secteurs",
                                                           "Calcul du montant de l'aide personnalisée au logement",
                                                           "Déclarations des champs d'application",
                                                           "Prologue : aides au logement"]))
    calcul_aide_personnalisee_logement_dot_date_courante = temp_calcul_aide_personnalisee_logement_dot_date_courante
    result_33 = log_end_call(["CalculetteAidesAuLogement",
                              "calcul_aide_personnalisée_logement",
                              "CalculAidePersonnaliséeLogement"],
                             log_begin_call(["CalculetteAidesAuLogement",
                                             "calcul_aide_personnalisée_logement",
                                             "CalculAidePersonnaliséeLogement"],
                                            calcul_aide_personnalisee_logement,
                                            CalculAidePersonnaliseeLogementIn(mode_occupation_in=calcul_aide_personnalisee_logement_dot_mode_occupation,
                                                                              type_aide_in=calcul_aide_personnalisee_logement_dot_type_aide,
                                                                              informations_calcul_in=calcul_aide_personnalisee_logement_dot_informations_calcul,
                                                                              ressources_menage_sans_arrondi_in=calcul_aide_personnalisee_logement_dot_ressources_menage_sans_arrondi,
                                                                              situation_familiale_in=calcul_aide_personnalisee_logement_dot_situation_familiale,
                                                                              nombre_personnes_a_charge_in=calcul_aide_personnalisee_logement_dot_nombre_personnes_a_charge,
                                                                              zone_in=calcul_aide_personnalisee_logement_dot_zone,
                                                                              date_courante_in=calcul_aide_personnalisee_logement_dot_date_courante)))
    calcul_aide_personnalisee_logement_dot_aide_finale_formule = result_33.aide_finale_formule_out
    calcul_aide_personnalisee_logement_dot_traitement_aide_finale = result_33.traitement_aide_finale_out
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_5 = eligibilite_aide_personnalisee_logement_dot_coefficents_enfants_garde_alternee_pris_en_compte
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_5 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1092,
                                             start_column=10, end_line=1092,
                                             end_column=59,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_3 = log_variable_definition(["CalculetteAidesAuLogement",
                                                                                   "coefficents_enfants_garde_alternée_pris_en_compte"],
                                                                                  temp_coefficents_enfants_garde_alternee_pris_en_compte_5)
    try:
        match_arg_570 = eligibilite_allocation_logement_dot_eligibilite_avec_condition_logement
        if match_arg_570.code == EligibiliteAllocationLogement_Code.PasEligible:
            _ = match_arg_570.value
            temp_eligibilite_2 = False
        elif match_arg_570.code == EligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
            _ = match_arg_570.value
            temp_eligibilite_2 = True
        elif match_arg_570.code == EligibiliteAllocationLogement_Code.AllocationLogementSociale:
            _ = match_arg_570.value
            temp_eligibilite_2 = True
        temp_eligibilite_3 = (eligibilite_aide_personnalisee_logement_dot_eligibilite or
                              temp_eligibilite_2)
    except EmptyError:
        temp_eligibilite_3 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1089,
                                             start_column=10, end_line=1089,
                                             end_column=21,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    eligibilite_2 = log_variable_definition(["CalculetteAidesAuLogement",
                                             "éligibilité"], temp_eligibilite_3)
    try:
        def temp_traitement_aide_finale_4(param_44: Money):
            try:
                if not eligibilite_2:
                    return param_44
                else:
                    match_arg_571 = eligibilite_allocation_logement_dot_eligibilite_avec_condition_logement
                    if match_arg_571.code == EligibiliteAllocationLogement_Code.PasEligible:
                        _ = match_arg_571.value
                        temp_traitement_aide_finale_5 = True
                    elif match_arg_571.code == EligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
                        _ = match_arg_571.value
                        temp_traitement_aide_finale_5 = False
                    elif match_arg_571.code == EligibiliteAllocationLogement_Code.AllocationLogementSociale:
                        _ = match_arg_571.value
                        temp_traitement_aide_finale_5 = False
                    if (eligibilite_aide_personnalisee_logement_dot_eligibilite and
                            not temp_traitement_aide_finale_5):
                        if (log_end_call(["CalculAidePersonnaliséeLogement",
                            "traitement_aide_finale"],
                                         log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                  "traitement_aide_finale", "output"],
                                                                 log_begin_call(["CalculAidePersonnaliséeLogement",
                                                                                 "traitement_aide_finale"],
                                                                                calcul_aide_personnalisee_logement_dot_traitement_aide_finale,
                                                                                log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                         "traitement_aide_finale", "input"],
                                                                                                        calcul_aide_personnalisee_logement_dot_aide_finale_formule)))) >
                            log_end_call(["CalculAllocationLogement",
                                          "traitement_aide_finale"],
                                         log_variable_definition(["CalculAllocationLogement",
                                                                  "traitement_aide_finale", "output"],
                                                                 log_begin_call(["CalculAllocationLogement",
                                                                                 "traitement_aide_finale"],
                                                                                calcul_allocation_logement_dot_traitement_aide_finale,
                                                                                log_variable_definition(["CalculAllocationLogement",
                                                                                                         "traitement_aide_finale", "input"],
                                                                                                        calcul_allocation_logement_dot_aide_finale_formule))))):
                            return log_end_call(["CalculAidePersonnaliséeLogement",
                                                 "traitement_aide_finale"],
                                                log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                         "traitement_aide_finale", "output"],
                                                                        log_begin_call(["CalculAidePersonnaliséeLogement",
                                                                                        "traitement_aide_finale"],
                                                                                       calcul_aide_personnalisee_logement_dot_traitement_aide_finale,
                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                                "traitement_aide_finale", "input"],
                                                                                                               param_44))))
                        else:
                            return log_end_call(["CalculAllocationLogement",
                                                 "traitement_aide_finale"],
                                                log_variable_definition(["CalculAllocationLogement",
                                                                         "traitement_aide_finale", "output"],
                                                                        log_begin_call(["CalculAllocationLogement",
                                                                                        "traitement_aide_finale"],
                                                                                       calcul_allocation_logement_dot_traitement_aide_finale,
                                                                                       log_variable_definition(["CalculAllocationLogement",
                                                                                                                "traitement_aide_finale", "input"],
                                                                                                               param_44))))
                    else:
                        if eligibilite_aide_personnalisee_logement_dot_eligibilite:
                            return log_end_call(["CalculAidePersonnaliséeLogement",
                                                 "traitement_aide_finale"],
                                                log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                         "traitement_aide_finale", "output"],
                                                                        log_begin_call(["CalculAidePersonnaliséeLogement",
                                                                                        "traitement_aide_finale"],
                                                                                       calcul_aide_personnalisee_logement_dot_traitement_aide_finale,
                                                                                       log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                                "traitement_aide_finale", "input"],
                                                                                                               param_44))))
                        else:
                            return log_end_call(["CalculAllocationLogement",
                                                 "traitement_aide_finale"],
                                                log_variable_definition(["CalculAllocationLogement",
                                                                         "traitement_aide_finale", "output"],
                                                                        log_begin_call(["CalculAllocationLogement",
                                                                                        "traitement_aide_finale"],
                                                                                       calcul_allocation_logement_dot_traitement_aide_finale,
                                                                                       log_variable_definition(["CalculAllocationLogement",
                                                                                                                "traitement_aide_finale", "input"],
                                                                                                               param_44))))
            except EmptyError:
                raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                                     start_line=1091,
                                                     start_column=10,
                                                     end_line=1091,
                                                     end_column=32,
                                                     law_headings=["Calculette globale",
                                                                   "Prologue : aides au logement"]))
    except EmptyError:
        temp_traitement_aide_finale_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1091,
                                             start_column=10, end_line=1091,
                                             end_column=32,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    traitement_aide_finale_3 = log_variable_definition(["CalculetteAidesAuLogement",
                                                        "traitement_aide_finale"], temp_traitement_aide_finale_4)
    try:
        if not eligibilite_2:
            temp_aide_finale_formule_9 = money_of_cents_string("0")
        else:
            match_arg_572 = eligibilite_allocation_logement_dot_eligibilite_avec_condition_logement
            if match_arg_572.code == EligibiliteAllocationLogement_Code.PasEligible:
                _ = match_arg_572.value
                temp_aide_finale_formule_10 = True
            elif match_arg_572.code == EligibiliteAllocationLogement_Code.AllocationLogementFamiliale:
                _ = match_arg_572.value
                temp_aide_finale_formule_10 = False
            elif match_arg_572.code == EligibiliteAllocationLogement_Code.AllocationLogementSociale:
                _ = match_arg_572.value
                temp_aide_finale_formule_10 = False
            if (eligibilite_aide_personnalisee_logement_dot_eligibilite and
                    not temp_aide_finale_formule_10):
                if (log_end_call(["CalculAidePersonnaliséeLogement",
                    "traitement_aide_finale"],
                                 log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                          "traitement_aide_finale", "output"],
                                                         log_begin_call(["CalculAidePersonnaliséeLogement",
                                                                         "traitement_aide_finale"],
                                                                        calcul_aide_personnalisee_logement_dot_traitement_aide_finale,
                                                                        log_variable_definition(["CalculAidePersonnaliséeLogement",
                                                                                                 "traitement_aide_finale", "input"],
                                                                                                calcul_aide_personnalisee_logement_dot_aide_finale_formule)))) >
                    log_end_call(["CalculAllocationLogement",
                                  "traitement_aide_finale"],
                                 log_variable_definition(["CalculAllocationLogement",
                                                          "traitement_aide_finale", "output"],
                                                         log_begin_call(["CalculAllocationLogement",
                                                                         "traitement_aide_finale"],
                                                                        calcul_allocation_logement_dot_traitement_aide_finale,
                                                                        log_variable_definition(["CalculAllocationLogement",
                                                                                                 "traitement_aide_finale", "input"],
                                                                                                calcul_allocation_logement_dot_aide_finale_formule))))):
                    temp_aide_finale_formule_9 = calcul_aide_personnalisee_logement_dot_aide_finale_formule
                else:
                    temp_aide_finale_formule_9 = calcul_allocation_logement_dot_aide_finale_formule
            else:
                if eligibilite_aide_personnalisee_logement_dot_eligibilite:
                    temp_aide_finale_formule_9 = calcul_aide_personnalisee_logement_dot_aide_finale_formule
                else:
                    temp_aide_finale_formule_9 = calcul_allocation_logement_dot_aide_finale_formule
    except EmptyError:
        temp_aide_finale_formule_9 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1090,
                                             start_column=10, end_line=1090,
                                             end_column=29,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    aide_finale_formule_8 = log_variable_definition(["CalculetteAidesAuLogement",
                                                     "aide_finale_formule"], temp_aide_finale_formule_9)
    return CalculetteAidesAuLogementOut(eligibilite_out=eligibilite_2,
                                        aide_finale_formule_out=aide_finale_formule_8,
                                        traitement_aide_finale_out=traitement_aide_finale_3,
                                        coefficents_enfants_garde_alternee_pris_en_compte_out=coefficents_enfants_garde_alternee_pris_en_compte_3)


def calculette_aides_au_logement_garde_alternee(calculette_aides_au_logement_garde_alternee_in: CalculetteAidesAuLogementGardeAlterneeIn):
    menage_5 = calculette_aides_au_logement_garde_alternee_in.menage_in
    demandeur_5 = calculette_aides_au_logement_garde_alternee_in.demandeur_in
    informations_calcul_4 = calculette_aides_au_logement_garde_alternee_in.informations_calcul_in
    date_courante_17 = calculette_aides_au_logement_garde_alternee_in.date_courante_in
    ressources_menage_prises_en_compte_1 = calculette_aides_au_logement_garde_alternee_in.ressources_menage_prises_en_compte_in
    try:
        def temp_menage_sans_enfants_garde_alternee(personne_a_charge_10: Any):
            match_arg_573 = personne_a_charge_10
            if match_arg_573.code == PersonneACharge_Code.EnfantACharge:
                enfant_8 = match_arg_573.value
                match_arg_574 = enfant_8.situation_garde_alternee
                if match_arg_574.code == SituationGardeAlternee_Code.PasDeGardeAlternee:
                    _ = match_arg_574.value
                    return True
                elif match_arg_574.code == SituationGardeAlternee_Code.GardeAlterneeCoefficientPriseEnCharge:
                    _ = match_arg_574.value
                    return False
            elif match_arg_573.code == PersonneACharge_Code.AutrePersonneACharge:
                _ = match_arg_573.value
                return True
        temp_menage_sans_enfants_garde_alternee_1 = Menage(prestations_recues=menage_5.prestations_recues,
                                                           logement=menage_5.logement,
                                                           personnes_a_charge=list_filter(temp_menage_sans_enfants_garde_alternee,
                                                                                          menage_5.personnes_a_charge),
                                                           nombre_autres_occupants_logement=menage_5.nombre_autres_occupants_logement,
                                                           situation_familiale=menage_5.situation_familiale,
                                                           condition_rattache_foyer_fiscal_parent_ifi=menage_5.condition_rattache_foyer_fiscal_parent_ifi,
                                                           nombre_enfants_a_naitre_apres_troisieme_mois_grossesse=menage_5.nombre_enfants_a_naitre_apres_troisieme_mois_grossesse,
                                                           enfant_a_naitre_apres_quatrieme_mois_grossesse=menage_5.enfant_a_naitre_apres_quatrieme_mois_grossesse,
                                                           date_naissance_troisieme_enfant_ou_dernier_si_plus=menage_5.date_naissance_troisieme_enfant_ou_dernier_si_plus)
    except EmptyError:
        temp_menage_sans_enfants_garde_alternee_1 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1167,
                                             start_column=11, end_line=1167,
                                             end_column=45,
                                             law_headings=["Calculette avec garde alternée",
                                                           "Prologue : aides au logement"]))
    menage_sans_enfants_garde_alternee = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                  "ménage_sans_enfants_garde_alternée"],
                                                                 temp_menage_sans_enfants_garde_alternee_1)
    try:
        temp_calculette_dot_menage = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                              "calculette.ménage"], menage_5)
    except EmptyError:
        temp_calculette_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1067,
                                             start_column=10, end_line=1067,
                                             end_column=16,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_dot_menage = temp_calculette_dot_menage
    try:
        temp_calculette_dot_demandeur = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                 "calculette.demandeur"], demandeur_5)
    except EmptyError:
        temp_calculette_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1068,
                                             start_column=10, end_line=1068,
                                             end_column=19,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_dot_demandeur = temp_calculette_dot_demandeur
    try:
        temp_calculette_dot_informations_calcul = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                           "calculette.informations_calcul"], informations_calcul_4)
    except EmptyError:
        temp_calculette_dot_informations_calcul = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1069,
                                             start_column=10, end_line=1069,
                                             end_column=29,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_dot_informations_calcul = temp_calculette_dot_informations_calcul
    try:
        temp_calculette_dot_date_courante = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                     "calculette.date_courante"], date_courante_17)
    except EmptyError:
        temp_calculette_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1070,
                                             start_column=10, end_line=1070,
                                             end_column=23,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_dot_date_courante = temp_calculette_dot_date_courante
    try:
        temp_calculette_dot_ressources_menage_prises_en_compte = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                          "calculette.ressources_ménage_prises_en_compte"],
                                                                                         ressources_menage_prises_en_compte_1)
    except EmptyError:
        temp_calculette_dot_ressources_menage_prises_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1075,
                                             start_column=10, end_line=1075,
                                             end_column=44,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_dot_ressources_menage_prises_en_compte = temp_calculette_dot_ressources_menage_prises_en_compte
    result_34 = log_end_call(["CalculetteAidesAuLogementGardeAlternée",
                              "calculette", "CalculetteAidesAuLogement"],
                             log_begin_call(["CalculetteAidesAuLogementGardeAlternée",
                                             "calculette", "CalculetteAidesAuLogement"],
                                            calculette_aides_au_logement,
                                            CalculetteAidesAuLogementIn(menage_in=calculette_dot_menage,
                                                                        demandeur_in=calculette_dot_demandeur,
                                                                        informations_calcul_in=calculette_dot_informations_calcul,
                                                                        date_courante_in=calculette_dot_date_courante,
                                                                        ressources_menage_prises_en_compte_in=calculette_dot_ressources_menage_prises_en_compte)))
    calculette_dot_eligibilite = result_34.eligibilite_out
    calculette_dot_aide_finale_formule = result_34.aide_finale_formule_out
    calculette_dot_traitement_aide_finale = result_34.traitement_aide_finale_out
    calculette_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_34.coefficents_enfants_garde_alternee_pris_en_compte_out
    try:
        temp_calculette_sans_garde_alternee_dot_menage = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                  "calculette_sans_garde_alternée.ménage"],
                                                                                 menage_sans_enfants_garde_alternee)
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_menage = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1067,
                                             start_column=10, end_line=1067,
                                             end_column=16,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_menage = temp_calculette_sans_garde_alternee_dot_menage
    try:
        temp_calculette_sans_garde_alternee_dot_demandeur = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                     "calculette_sans_garde_alternée.demandeur"], demandeur_5)
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_demandeur = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1068,
                                             start_column=10, end_line=1068,
                                             end_column=19,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_demandeur = temp_calculette_sans_garde_alternee_dot_demandeur
    try:
        temp_calculette_sans_garde_alternee_dot_informations_calcul = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                               "calculette_sans_garde_alternée.informations_calcul"],
                                                                                              informations_calcul_4)
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_informations_calcul = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1069,
                                             start_column=10, end_line=1069,
                                             end_column=29,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_informations_calcul = temp_calculette_sans_garde_alternee_dot_informations_calcul
    try:
        temp_calculette_sans_garde_alternee_dot_date_courante = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                         "calculette_sans_garde_alternée.date_courante"],
                                                                                        date_courante_17)
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_date_courante = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1070,
                                             start_column=10, end_line=1070,
                                             end_column=23,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_date_courante = temp_calculette_sans_garde_alternee_dot_date_courante
    try:
        temp_calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                                              "calculette_sans_garde_alternée.ressources_ménage_prises_en_compte"],
                                                                                                             ressources_menage_prises_en_compte_1)
    except EmptyError:
        temp_calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1075,
                                             start_column=10, end_line=1075,
                                             end_column=44,
                                             law_headings=["Calculette globale",
                                                           "Prologue : aides au logement"]))
    calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte = temp_calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte
    result_35 = log_end_call(["CalculetteAidesAuLogementGardeAlternée",
                              "calculette_sans_garde_alternée", "CalculetteAidesAuLogement"],
                             log_begin_call(["CalculetteAidesAuLogementGardeAlternée",
                                             "calculette_sans_garde_alternée", "CalculetteAidesAuLogement"],
                                            calculette_aides_au_logement,
                                            CalculetteAidesAuLogementIn(menage_in=calculette_sans_garde_alternee_dot_menage,
                                                                        demandeur_in=calculette_sans_garde_alternee_dot_demandeur,
                                                                        informations_calcul_in=calculette_sans_garde_alternee_dot_informations_calcul,
                                                                        date_courante_in=calculette_sans_garde_alternee_dot_date_courante,
                                                                        ressources_menage_prises_en_compte_in=calculette_sans_garde_alternee_dot_ressources_menage_prises_en_compte)))
    calculette_sans_garde_alternee_dot_eligibilite = result_35.eligibilite_out
    calculette_sans_garde_alternee_dot_aide_finale_formule = result_35.aide_finale_formule_out
    calculette_sans_garde_alternee_dot_traitement_aide_finale = result_35.traitement_aide_finale_out
    calculette_sans_garde_alternee_dot_coefficents_enfants_garde_alternee_pris_en_compte = result_35.coefficents_enfants_garde_alternee_pris_en_compte_out
    try:
        temp_eligibilite_4 = calculette_dot_eligibilite
    except EmptyError:
        temp_eligibilite_4 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1174,
                                             start_column=10, end_line=1174,
                                             end_column=21,
                                             law_headings=["Calculette avec garde alternée",
                                                           "Prologue : aides au logement"]))
    eligibilite_3 = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                             "éligibilité"], temp_eligibilite_4)
    try:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_6 = calculette_dot_coefficents_enfants_garde_alternee_pris_en_compte
    except EmptyError:
        temp_coefficents_enfants_garde_alternee_pris_en_compte_6 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1168,
                                             start_column=11, end_line=1168,
                                             end_column=60,
                                             law_headings=["Calculette avec garde alternée",
                                                           "Prologue : aides au logement"]))
    coefficents_enfants_garde_alternee_pris_en_compte_4 = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                                                                   "coefficents_enfants_garde_alternée_pris_en_compte"],
                                                                                  temp_coefficents_enfants_garde_alternee_pris_en_compte_6)
    try:
        if (list_length(coefficents_enfants_garde_alternee_pris_en_compte_4) ==
                integer_of_string("0")):
            temp_aide_finale = money_of_cents_string("0")
        else:
            def temp_aide_finale_1(acc_13: Decimal, coeff_1: Any):
                return (acc_13 + coeff_1)
            temp_aide_finale = ((calculette_dot_aide_finale_formule -
                                 calculette_sans_garde_alternee_dot_aide_finale_formule) *
                                (list_fold_left(temp_aide_finale_1, decimal_of_string("0."),
                                                coefficents_enfants_garde_alternee_pris_en_compte_4) /
                                 decimal_of_integer(list_length(coefficents_enfants_garde_alternee_pris_en_compte_4))))
        temp_aide_finale_2 = log_end_call(["CalculetteAidesAuLogement",
                                           "traitement_aide_finale"],
                                          log_variable_definition(["CalculetteAidesAuLogement",
                                                                   "traitement_aide_finale", "output"],
                                                                  log_begin_call(["CalculetteAidesAuLogement",
                                                                                  "traitement_aide_finale"], calculette_dot_traitement_aide_finale,
                                                                                 log_variable_definition(["CalculetteAidesAuLogement",
                                                                                                          "traitement_aide_finale", "input"],
                                                                                                         (calculette_sans_garde_alternee_dot_aide_finale_formule +
                                                                                                          temp_aide_finale)))))
    except EmptyError:
        temp_aide_finale_2 = dead_value
        raise NoValueProvided(SourcePosition(filename="examples/aides_logement/prologue.catala_fr",
                                             start_line=1175,
                                             start_column=10, end_line=1175,
                                             end_column=21,
                                             law_headings=["Calculette avec garde alternée",
                                                           "Prologue : aides au logement"]))
    aide_finale = log_variable_definition(["CalculetteAidesAuLogementGardeAlternée",
                                           "aide_finale"], temp_aide_finale_2)
    return CalculetteAidesAuLogementGardeAlterneeOut(eligibilite_out=eligibilite_3,
                                                     aide_finale_out=aide_finale)
